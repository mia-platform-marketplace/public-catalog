exports[`Sync script > should match snapshot 1`] = `
[
  {
    "categoryId": "addgeo",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Geolocation"
  },
  {
    "categoryId": "addonsecurity",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Security"
  },
  {
    "categoryId": "artificial-intelligence",
    "__STATE__": "PUBLIC",
    "label": "Artificial Intelligence"
  },
  {
    "categoryId": "auth",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Authentication & Authorization"
  },
  {
    "categoryId": "business",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Data Visualization"
  },
  {
    "categoryId": "code",
    "__STATE__": "PUBLIC",
    "label": "Start From Code"
  },
  {
    "categoryId": "communication",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Communication"
  },
  {
    "categoryId": "data-catalog",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Data Catalog"
  },
  {
    "categoryId": "database",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Database Management"
  },
  {
    "categoryId": "devportal",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Dev Portal"
  },
  {
    "categoryId": "dotnetcore",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - .NET Core"
  },
  {
    "categoryId": "fast-data",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Fast Data"
  },
  {
    "categoryId": "fast-data-connectors",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Fast Data Connectors"
  },
  {
    "categoryId": "files",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Files Management"
  },
  {
    "categoryId": "frontendbuilder",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Frontend Builders"
  },
  {
    "categoryId": "golang",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - Go"
  },
  {
    "categoryId": "healthcare",
    "__STATE__": "PUBLIC",
    "label": "Healthcare"
  },
  {
    "categoryId": "idm",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Identification Manager"
  },
  {
    "categoryId": "insurance",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Insurance"
  },
  {
    "categoryId": "integrations",
    "__STATE__": "PUBLIC",
    "label": "Application Integration"
  },
  {
    "categoryId": "kotlin",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - Java/Kotlin"
  },
  {
    "categoryId": "microfrontend",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Micro Frontend"
  },
  {
    "categoryId": "monitoring",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Monitoring"
  },
  {
    "categoryId": "nodejs",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - Node.js"
  },
  {
    "categoryId": "notification",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Notifications"
  },
  {
    "categoryId": "orchestrators",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Orchestrators"
  },
  {
    "categoryId": "payments",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Payments"
  },
  {
    "categoryId": "python",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - Python"
  },
  {
    "categoryId": "rust",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - Rust/C/Swift"
  },
  {
    "categoryId": "scheduling",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Scheduling Management"
  },
  {
    "categoryId": "scoring",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Scoring Manager"
  },
  {
    "categoryId": "serverless",
    "__STATE__": "PUBLIC",
    "label": "Core Plugins - Serverless"
  },
  {
    "categoryId": "spa",
    "__STATE__": "PUBLIC",
    "label": "Start From Code - SPA - Angular/React"
  },
  {
    "categoryId": "stream",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Data Stream"
  },
  {
    "categoryId": "utility",
    "__STATE__": "PUBLIC",
    "label": "Add-ons - Utilities"
  }
]
`;

exports[`Sync script > should match snapshot 2`] = `
[
  {
    "categoryId": "auth",
    "description": "This service provides REST API that can be configured to manage request ACL",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/acl-service/overview"
    },
    "itemId": "acl-service",
    "name": "ACL Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/acl-service",
    "resources": {
      "services": {
        "acl-service": {
          "type": "plugin",
          "name": "acl-service",
          "description": "This service provides REST API that can be configured to manage request ACL",
          "dockerImage": "nexus.mia-platform.eu/core/acl-service:1.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ACL_CONFIGURATION_PATH",
              "value": "CHANGE_WITH_YOUR_ACL_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "PROFILE_DIR",
              "value": "/home/node/app/profiles",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.064Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "acl-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "This service provides REST API that can be configured to manage request ACL",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/acl-service/overview"
    },
    "itemId": "acl-service",
    "name": "ACL Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/acl-service",
    "resources": {
      "services": {
        "acl-service": {
          "type": "plugin",
          "name": "acl-service",
          "description": "This service provides REST API that can be configured to manage request ACL",
          "dockerImage": "nexus.mia-platform.eu/core/acl-service:1.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ACL_CONFIGURATION_PATH",
              "value": "CHANGE_WITH_YOUR_ACL_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "PROFILE_DIR",
              "value": "/home/node/app/profiles",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "acl-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "This service allow to define and verify rules",
    "itemId": "adaptive-approval-service",
    "name": "Adaptive Approval Service",
    "publishOnMiaDocumentation": true,
    "resources": {
      "services": {
        "adaptive-approval-service": {
          "type": "plugin",
          "name": "adaptive-approval-service",
          "description": "This service allow to define and verify rules",
          "dockerImage": "nexus.mia-platform.eu/fintech/adaptive-approval:0.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "CHANGE-ME",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "20Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.0.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.012Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "adaptive-approval-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "This service allow to define and verify rules",
    "itemId": "adaptive-approval-service",
    "name": "Adaptive Approval Service",
    "publishOnMiaDocumentation": true,
    "resources": {
      "services": {
        "adaptive-approval-service": {
          "type": "plugin",
          "name": "adaptive-approval-service",
          "description": "This service allow to define and verify rules",
          "dockerImage": "nexus.mia-platform.eu/fintech/adaptive-approval:0.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "CHANGE-ME",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "20Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-10-24T09:00:53.763Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "adaptive-approval-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "This application enable AI Compliance Chat, a conversational interface for data compliance working with Data Catalog product. It needs to be installed in a project with the Data Catalog already installed.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_applications/data-catalog-ai-compliance/overview"
    },
    "itemId": "ai-compliance-chat",
    "name": "AI Compliance",
    "publishOnMiaDocumentation": true,
    "resources": {
      "collections": {
        "assistant-catalog-documents": {
          "id": "assistant-catalog-documents",
          "defaultName": "assistant-catalog-documents",
          "fields": [
            {
              "name": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false,
              "description": "_id"
            },
            {
              "name": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false,
              "description": "creatorId"
            },
            {
              "name": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false,
              "description": "createdAt"
            },
            {
              "name": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false,
              "description": "updaterId"
            },
            {
              "name": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false,
              "description": "updatedAt"
            },
            {
              "name": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false,
              "description": "__STATE__"
            },
            {
              "name": "content",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "tenantId",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "projectId",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "sor",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "table",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/assistant-catalog-documents",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            },
            {
              "name": "stateIndex",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ]
            },
            {
              "name": "unique_sor",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "sor",
                  "order": 1
                },
                {
                  "name": "table",
                  "order": 1
                }
              ]
            }
          ],
          "description": "Collection of assistant-catalog-documents",
          "tags": [
            "collection"
          ]
        }
      },
      "endpoints": {
        "/chat": {
          "defaultBasePath": "/chat",
          "type": "custom",
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "service": "ai-chat-fe",
          "port": "80",
          "defaultPathRewrite": "/",
          "description": "Expose frontend chat",
          "tags": [
            "ai"
          ],
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "options": {
            "iframePolicy": "all"
          },
          "useDownstreamProtocol": true
        },
        "/api/chat/completions": {
          "defaultBasePath": "/api/chat/completions",
          "type": "custom",
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "service": "mia-assistant",
          "port": "80",
          "defaultPathRewrite": "/chat/completions",
          "description": "Invoke llm and return response",
          "tags": [
            "ai"
          ],
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "useDownstreamProtocol": true
        }
      },
      "listeners": {
        "frontend": {
          "description": "Default listener for frontend API",
          "name": "frontend",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          },
          "port": "8080",
          "selectedByDefault": true
        }
      },
      "services": {
        "api-gateway": {
          "args": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "componentId": "api-gateway-envoy",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            },
            {
              "from": 9901,
              "name": "admin",
              "to": 9901
            },
            {
              "from": 50051,
              "name": "grpc",
              "protocol": "TCP",
              "to": 50051
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/envoy",
              "name": "api-gateway-envoy-config",
              "viewAsReadOnly": true
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend",
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend",
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "30Mi"
            }
          },
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "name": "api-gateway",
          "tags": [
            "api"
          ],
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"id\\": \\"users\\",\\n  \\"description\\": \\"Collection of users\\",\\n  \\"name\\": \\"users\\",\\n  \\"fields\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"ObjectId\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"_id\\"\\n    },\\n    {\\n      \\"name\\": \\"creatorId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"creatorId\\"\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"createdAt\\"\\n    },\\n    {\\n      \\"name\\": \\"updaterId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"updaterId\\"\\n    },\\n    {\\n      \\"name\\": \\"updatedAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"updatedAt\\"\\n    },\\n    {\\n      \\"name\\": \\"__STATE__\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"__STATE__\\"\\n    },\\n    {\\n      \\"name\\": \\"name\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"groups\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    {\\n      \\"name\\": \\"username\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"email\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerUserId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"realm\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"metadata\\",\\n      \\"type\\": \\"RawObject\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"schema\\": {\\n        \\"properties\\": {\\n          \\"permissions\\": {\\n            \\"type\\": \\"array\\",\\n            \\"items\\": {\\n              \\"type\\": \\"string\\",\\n              \\"enum\\": [\\n                \\"read:pipelines\\",\\n                \\"control:pipelines\\",\\n                \\"read:connections\\",\\n                \\"update:connections\\",\\n                \\"delete:connections\\",\\n                \\"read:runtimes\\",\\n                \\"update:runtimes\\",\\n                \\"read:data-assets\\",\\n                \\"update:metadata-assets\\",\\n                \\"read:users\\",\\n                \\"update:users\\"\\n              ]\\n            }\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\"name\\": \\"permissions\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  ],\\n  \\"endpointBasePath\\": \\"/users\\",\\n  \\"defaultState\\": \\"PUBLIC\\",\\n  \\"indexes\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": true,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"_id\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"creatdAt\\",\\n          \\"order\\": -1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"stateIndex\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"nameSearch\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"email\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"name\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"upsertSupport\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"providerId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"providerUserId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"realm\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    }\\n  ],\\n  \\"tags\\": [\\n    \\"collection\\"\\n  ]\\n}",
                  "name": "users-users.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "<CONFIGURE_ME>",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 3
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 3
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "tags": [
            "crud"
          ],
          "type": "plugin"
        },
        "ai-chat-fe": {
          "type": "plugin",
          "name": "ai-chat-fe",
          "dockerImage": "nexus.mia-platform.eu/data-catalog/ai-chat-fe:0.2.0",
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "valueType": "plain",
              "value": "3000"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "port": "frontend",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "tags": [
            "ai"
          ],
          "containerPorts": [
            {
              "name": "frontend",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ],
          "defaultDocumentationPath": "",
          "defaultTerminationGracePeriodSeconds": 30
        },
        "mia-assistant": {
          "type": "plugin",
          "name": "mia-assistant",
          "dockerImage": "nexus.mia-platform.eu/console/mia-assistant:0.13.2",
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "valueType": "plain",
              "value": "INFO"
            },
            {
              "name": "PORT",
              "valueType": "plain",
              "value": "3000"
            },
            {
              "name": "CONFIGURATION_PATH",
              "valueType": "plain",
              "value": "/configs/config.json"
            },
            {
              "name": "LLM_API_KEY",
              "valueType": "secret",
              "secretName": "mia-assistant-keys",
              "secretKey": "llm.apiKey"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "valueType": "plain",
              "value": "miauserid,miausergroups,miauserproperties,isbackoffice,x-forwarded-for,x-forwarded-host,request-id,x-request-id"
            },
            {
              "name": "DATA_CATALOG_URL",
              "valueType": "plain",
              "value": "http://fabric-bff"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "valueType": "secret",
              "secretName": "mia-assistant-keys",
              "secretKey": "mongo.url"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "valueType": "secret",
              "secretName": "mia-assistant-keys",
              "secretKey": "llm.embeddingsApiKey"
            },
            {
              "name": "CONSOLE_URL",
              "valueType": "plain",
              "value": "{{CONSOLE_URL}}"
            },
            {
              "name": "CONSOLE_CLIENT_ID",
              "valueType": "plain",
              "value": "{{CONSOLE_CLIENT_ID}}"
            },
            {
              "name": "CONSOLE_CLIENT_SECRET",
              "valueType": "secret",
              "secretName": "mia-assistant-keys",
              "secretKey": "console.clientSecret"
            },
            {
              "name": "CRUD_SERVICE_DATA_CATALOG_DOCUMENT_URL",
              "valueType": "plain",
              "value": "http://crud-service/assistant-catalog-documents"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "1000Mi",
              "min": "300Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz"
            },
            "readiness": {
              "path": "/-/ready"
            },
            "startup": {}
          },
          "tags": [
            "ai"
          ],
          "defaultConfigMaps": [
            {
              "name": "mia-assistant-config",
              "mountPath": "/configs/",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"type\\": \\"vertex\\",\\n    \\"name\\": \\"gemini-2.0-flash\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"type\\": \\"vertex\\",\\n    \\"name\\": \\"text-embedding-004\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"collectionName\\": \\"assistant-documents\\",\\n    \\"relevanceScoreFn\\": \\"cosine\\",\\n    \\"maxDocumentsToRetrieve\\": 4,\\n    \\"minScoreDistance\\": 0.6,\\n    \\"ingestionMode\\": \\"transactional\\",\\n    \\"indexName\\": \\"preserve_vector_index\\"\\n  },\\n  \\"chain\\": {\\n    \\"aggregateMaxTokenNumber\\": 7200\\n  },\\n  \\"documentation\\": {\\n    \\"repository\\": {\\n      \\"baseUrl\\": \\"https://api.github.com/repos\\",\\n      \\"owner\\": \\"/mia-platform\\",\\n      \\"name\\": \\"/documentation\\",\\n      \\"baseDir\\": \\"docs\\",\\n      \\"supportedExtensions\\": [\\n        \\".md\\",\\n        \\".mdx\\"\\n      ],\\n      \\"requestTimeoutInSeconds\\": 30\\n    },\\n    \\"website\\": {\\n      \\"baseUrl\\": \\"https://docs.mia-platform.eu\\"\\n    }\\n  },\\n  \\"persistChat\\": {\\n    \\"enabled\\": false\\n  },\\n  \\"history\\": {\\n    \\"type\\": \\"mongo\\",\\n    \\"checkpointCollectionName\\": \\"assistant-checkpoints\\",\\n    \\"checkpointWritesCollectionName\\": \\"assistant-checkpoint-writes\\"\\n  }\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultDocumentationPath": "",
          "defaultTerminationGracePeriodSeconds": 30
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.843Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-compliance-for-data-catalog-logo.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Create a retrieval augmented generation (RAG) app, with a plugin to generate embeddings and train your LLM and a front-end template with a UI to get the chatbot ready in minutes.",
    "itemId": "ai-rag-chat",
    "name": "AI RAG Chat",
    "publishOnMiaDocumentation": false,
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "rag-chatbot-api": {
          "type": "plugin",
          "name": "rag-chatbot-api",
          "dockerImage": "nexus.mia-platform.eu/plugins/rag-chatbot-api:0.5.3",
          "tags": [
            "artificial-intelligence"
          ],
          "componentId": "rag-chatbot-api",
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        },
        "ai-rag-template-chat": {
          "type": "template",
          "name": "ai-rag-template-chat",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template-chat/archive/refs/tags/v0.0.3.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app-vitest.gitlab-ci.yml/raw"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 80,
              "to": 8080
            }
          ]
        }
      },
      "endpoints": {
        "/": {
          "service": "ai-rag-template-chat",
          "port": "80",
          "defaultBasePath": "/",
          "defaultPathRewrite": "/",
          "type": "custom",
          "description": "",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/chat/completions": {
          "service": "rag-chatbot-api",
          "port": "80",
          "defaultBasePath": "/api/chat/completions",
          "defaultPathRewrite": "/chat/completions",
          "type": "custom",
          "description": "",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/embeddings/generate": {
          "service": "rag-chatbot-api",
          "port": "80",
          "defaultBasePath": "/api/embeddings/generate",
          "defaultPathRewrite": "/embeddings/generate",
          "type": "custom",
          "description": "Endpoint /api/embeddings/generate",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/embeddings/generateFromFile": {
          "service": "rag-chatbot-api",
          "port": "80",
          "defaultBasePath": "/api/embeddings/generateFromFile",
          "defaultPathRewrite": "/embeddings/generateFromFile",
          "type": "custom",
          "description": "Endpoint /api/embeddings/generateFromFile",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/embeddings/status": {
          "service": "rag-chatbot-api",
          "port": "80",
          "defaultBasePath": "/api/embeddings/status",
          "defaultPathRewrite": "/embeddings/status",
          "type": "custom",
          "description": "Endpoint /api/embeddings/status",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-08-01T16:26:53.341Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-rag-chat_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Similar to the AI RAG Chat, this application includes the API service in customizable template to create a tailored RAG application.",
    "itemId": "ai-rag-chat-template",
    "name": "AI RAG Chat Template",
    "publishOnMiaDocumentation": false,
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "ai-rag-template": {
          "type": "template",
          "name": "ai-rag-template",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template/archive/refs/tags/v0.5.3.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          }
        },
        "ai-rag-template-chat": {
          "type": "template",
          "name": "ai-rag-template-chat",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template-chat/archive/refs/tags/v0.0.3.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app-vitest.gitlab-ci.yml/raw"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 80,
              "to": 8080
            }
          ]
        }
      },
      "endpoints": {
        "/": {
          "service": "ai-rag-template-chat",
          "port": "80",
          "defaultBasePath": "/",
          "defaultPathRewrite": "/",
          "type": "custom",
          "description": "",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/chat/completions": {
          "service": "ai-rag-template",
          "port": "80",
          "defaultBasePath": "/api/chat/completions",
          "defaultPathRewrite": "/chat/completions",
          "type": "custom",
          "description": "",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/embeddings/generate": {
          "service": "ai-rag-template",
          "port": "80",
          "defaultBasePath": "/api/embeddings/generate",
          "defaultPathRewrite": "/embeddings/generate",
          "type": "custom",
          "description": "Endpoint /api/embeddings/generate",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/embeddings/generateFromFile": {
          "service": "ai-rag-template",
          "port": "80",
          "defaultBasePath": "/api/embeddings/generateFromFile",
          "defaultPathRewrite": "/embeddings/generateFromFile",
          "type": "custom",
          "description": "Endpoint /api/embeddings/generateFromFile",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/embeddings/status": {
          "service": "ai-rag-template",
          "port": "80",
          "defaultBasePath": "/api/embeddings/status",
          "defaultPathRewrite": "/embeddings/status",
          "type": "custom",
          "description": "Endpoint /api/embeddings/status",
          "tags": [
            "artificial-intelligence"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.938Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-rag-chat-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Use this Python template to create a RAG chatbot server",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform/ai-rag-template/main/README.md"
    },
    "itemId": "ai-rag-template",
    "name": "AI RAG Template",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "ai-rag-template": {
          "type": "template",
          "name": "ai-rag-template",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template/archive/refs/tags/v0.5.3.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.5.3",
      "releaseNote": "## What's Changed\\n* fixed HTTP server failing to start\\n* security updates in the code and the dependencies used"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.926Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-rag-template_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Use this Python template to create a RAG chatbot server",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform/ai-rag-template/main/README.md"
    },
    "itemId": "ai-rag-template",
    "name": "AI RAG Template",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "ai-rag-template": {
          "type": "template",
          "name": "ai-rag-template",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template/archive/refs/tags/v0.5.0.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.5.0",
      "releaseNote": "## What's Changed\\n* security updates in the code and the dependencies used"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.926Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-rag-template_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Use this Python template to create a RAG chatbot server",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform/ai-rag-template/main/README.md"
    },
    "itemId": "ai-rag-template",
    "name": "AI RAG Template",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "ai-rag-template": {
          "type": "template",
          "name": "ai-rag-template",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template/archive/refs/tags/v0.4.0.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.4.0",
      "releaseNote": "## What's Changed\\n* updated dependencies (FastAPI, Langchain, OpenAI) \\n* add endpoint \`POST /embeddings/generateFromFile\` for embedding generation \\n* add support for *Azure OpenAI provider* for embedding generation and LLM usage"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.663Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-rag-template_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Use this Python template to create a RAG chatbot server",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform/ai-rag-template/main/README.md"
    },
    "itemId": "ai-rag-template",
    "name": "AI RAG Template",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "ai-rag-template": {
          "type": "template",
          "name": "ai-rag-template",
          "archiveUrl": "https://github.com/mia-platform/ai-rag-template/archive/refs/tags/v0.3.1.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-05-30T16:08:43.683Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ai-rag-template_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with the Angular 10 framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Angular-App-Template/master/README.md"
    },
    "itemId": "angular-template",
    "name": "Angular 10 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Angular-App-Template",
    "resources": {
      "services": {
        "angular-10-template": {
          "type": "template",
          "name": "angular-10-template",
          "description": "This template allows you to start setting up a front-end project with the Angular 10 framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Angular-App-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.885Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "angular-template-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with the Angular 10 framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Angular-App-Template/master/README.md"
    },
    "itemId": "angular-template",
    "name": "Angular 10 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Angular-App-Template",
    "resources": {
      "services": {
        "angular-10-template": {
          "type": "template",
          "name": "angular-10-template",
          "description": "This template allows you to start setting up a front-end project with the Angular 10 framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Angular-App-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:50:24.328Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "angular-template-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "insurance",
    "description": "This plugins provides the REST API to query ANIA (Associazione Nazionale Italiana fra le Imprese Assicuratrici).",
    "itemId": "ania-service-client",
    "name": "ANIA Service Client",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/ania-service",
    "resources": {
      "services": {
        "ania-service-client": {
          "type": "plugin",
          "name": "ania-service-client",
          "description": "This plugins provides the REST API to query ANIA (Associazione Nazionale Italiana fra le Imprese Assicuratrici).",
          "dockerImage": "nexus.mia-platform.eu/plugins/ania-service:4.0.1",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "ANIA_BACKEND",
              "value": "CHANGE_WITH_YOUR_ANIA_BACKEND",
              "valueType": "plain"
            },
            {
              "name": "ANIA_USERNAME",
              "value": "CHANGE_WITH_YOUR_ANIA_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "ANIA_PASSWORD",
              "value": "CHANGE_WITH_YOUR_ANIA_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "IMPRESA_LOGIN",
              "value": "CHANGE_WITH_YOUR_IMPRESA_LOGIN",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.062Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ania-service-client-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "insurance",
    "description": "This plugins provides the REST API to query ANIA (Associazione Nazionale Italiana fra le Imprese Assicuratrici).",
    "itemId": "ania-service-client",
    "name": "ANIA Service Client",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/ania-service",
    "resources": {
      "services": {
        "ania-service-client": {
          "type": "plugin",
          "name": "ania-service-client",
          "description": "This plugins provides the REST API to query ANIA (Associazione Nazionale Italiana fra le Imprese Assicuratrici).",
          "dockerImage": "nexus.mia-platform.eu/plugins/ania-service:4.0.1",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "ANIA_BACKEND",
              "value": "CHANGE_WITH_YOUR_ANIA_BACKEND",
              "valueType": "plain"
            },
            {
              "name": "ANIA_USERNAME",
              "value": "CHANGE_WITH_YOUR_ANIA_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "ANIA_PASSWORD",
              "value": "CHANGE_WITH_YOUR_ANIA_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "IMPRESA_LOGIN",
              "value": "CHANGE_WITH_YOUR_IMPRESA_LOGIN",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ania-service-client-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "This application groups the plugins API Portal and Swagger Aggregator in order to aggregate the individual Open APIs of all the microservices and show them through a graphical interface.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-documentation-aggregator/overview"
    },
    "itemId": "api-documentation-aggregator",
    "name": "API Documentation Aggregator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/api-documentation-aggregator-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "swagger-aggregator": {
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "tags": [
            "api-docs"
          ],
          "type": "plugin",
          "componentId": "swagger-aggregator",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.9.4",
          "defaultDocumentationPath": "",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/documentations/api-portal": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/documentations/api-portal",
          "defaultPathRewrite": "/swagger",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          }
        },
        "/api/openapi": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/api/openapi",
          "defaultPathRewrite": "/openapi/v3-1",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          }
        },
        "/api/openapi/raw": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/api/openapi/raw",
          "defaultPathRewrite": "/",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          }
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-11-17T14:38:17.976Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-documentation-aggregator_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "This application groups the plugins API Portal and Swagger Aggregator in order to aggregate the individual Open APIs of all the microservices and show them through a graphical interface. Endpoints are exposed via NGINX API Gateway",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-documentation-aggregator/overview"
    },
    "itemId": "api-documentation-aggregator-nginx",
    "name": "API Documentation Aggregator NGINX",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/api-documentation-aggregator-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "componentId": "api-gateway",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "tags": [
            "microgateway"
          ],
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            },
            "cpuLimits": {
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        },
        "swagger-aggregator": {
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "tags": [
            "api-docs"
          ],
          "type": "plugin",
          "componentId": "swagger-aggregator",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.9.4",
          "defaultDocumentationPath": "",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/documentations/api-portal": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/documentations/api-portal",
          "defaultPathRewrite": "/swagger",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/openapi": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/api/openapi",
          "defaultPathRewrite": "/openapi/v3-1",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/openapi/raw": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/api/openapi/raw",
          "defaultPathRewrite": "/",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-01T17:26:43.723Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-documentation-aggregator-nginx_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Use this service to route requests to the correct service and verify the need of authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-gateway/overview"
    },
    "itemId": "api-gateway",
    "name": "Nginx API Gateway",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/api-gateway",
    "resources": {
      "services": {
        "nginx-api-gateway": {
          "type": "plugin",
          "name": "nginx-api-gateway",
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.3",
          "componentId": "api-gateway",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            },
            "cpuLimits": {
              "min": "10m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "5.0.3",
      "releaseNote": "Security fixes"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.026Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Use this service to route requests to the correct service and verify the need of authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-gateway/overview"
    },
    "itemId": "api-gateway",
    "name": "Nginx API Gateway",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/api-gateway",
    "resources": {
      "services": {
        "nginx-api-gateway": {
          "type": "plugin",
          "name": "nginx-api-gateway",
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "componentId": "api-gateway",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            },
            "cpuLimits": {
              "min": "10m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "5.0.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.026Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Use this service to route requests to the correct service and verify the need of authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-gateway/overview"
    },
    "itemId": "api-gateway",
    "name": "Nginx API Gateway",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/api-gateway",
    "resources": {
      "services": {
        "nginx-api-gateway": {
          "type": "plugin",
          "name": "nginx-api-gateway",
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "componentId": "api-gateway",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            },
            "cpuLimits": {
              "min": "10m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-08-31T12:03:34.674Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-portal/overview"
    },
    "itemId": "api-portal",
    "name": "API Portal",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/api-portal/website",
    "resources": {
      "services": {
        "api-portal": {
          "type": "plugin",
          "name": "api-portal",
          "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
          "dockerImage": "nexus.mia-platform.eu/api-portal/website:2.2.2",
          "componentId": "api-portal",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/index.html"
            },
            "liveness": {
              "path": "/index.html"
            }
          },
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.2.2",
      "releaseNote": "Fixed missing copies fallback language"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-05-08T10:00:00.000Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-portal_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-portal/overview"
    },
    "itemId": "api-portal",
    "name": "API Portal",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/api-portal/website",
    "resources": {
      "services": {
        "api-portal": {
          "type": "plugin",
          "name": "api-portal",
          "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
          "dockerImage": "nexus.mia-platform.eu/api-portal/website:2.2.1",
          "componentId": "api-portal",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/index.html"
            },
            "liveness": {
              "path": "/index.html"
            }
          },
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.2.1",
      "releaseNote": "Fixed missing copies fallback language"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-05-08T10:00:00.000Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-portal_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-portal/overview"
    },
    "itemId": "api-portal",
    "name": "API Portal",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/api-portal/website",
    "resources": {
      "services": {
        "api-portal": {
          "type": "plugin",
          "name": "api-portal",
          "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
          "dockerImage": "nexus.mia-platform.eu/api-portal/website:2.2.0",
          "componentId": "api-portal",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/index.html"
            },
            "liveness": {
              "path": "/index.html"
            }
          },
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.2.0",
      "releaseNote": "### Added\\n\\n- Added global select to choose which server to send requests\\n- Added configurable logo in header and favicon\\n- Added configurable prefix to endpoints to support multiple API Portal\\n\\n### Fixed\\n\\n- Fixed loading when search input is emptied"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T17:06:06.476Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-portal_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-portal/overview"
    },
    "itemId": "api-portal",
    "name": "API Portal",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/api-portal/website",
    "resources": {
      "services": {
        "api-portal": {
          "type": "plugin",
          "name": "api-portal",
          "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
          "dockerImage": "nexus.mia-platform.eu/api-portal/website:2.1.1",
          "componentId": "api-portal",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/index.html"
            },
            "liveness": {
              "path": "/index.html"
            }
          },
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.012Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-portal_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/api-portal/overview"
    },
    "itemId": "api-portal",
    "name": "API Portal",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/api-portal/website",
    "resources": {
      "services": {
        "api-portal": {
          "type": "plugin",
          "name": "api-portal",
          "description": "Use Mia-Platform core API Portal to expose the swagger documentation of your development services in one unique place.",
          "dockerImage": "nexus.mia-platform.eu/api-portal/website:2.1.1",
          "componentId": "api-portal",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/index.html"
            },
            "liveness": {
              "path": "/index.html"
            }
          },
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-06-01T12:55:53.057Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "api-portal_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "code",
    "description": "This is the best template to start creating an adapter service for your project",
    "itemId": "application-service-adapter",
    "name": "Application Service Adapter",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/template/service-adapter-template",
    "resources": {
      "services": {
        "application-service-adapter": {
          "type": "template",
          "name": "application-service-adapter",
          "description": "This is the best template to start creating an adapter service for your project",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/62973/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "IDENTIFICATION_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "value": "3",
              "valueType": "plain"
            },
            {
              "name": "RETRIES_DELAY_MS",
              "value": "1000",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "value": "REST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIG_FILE_PATH",
              "value": "/path/to/file",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.008Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "application-service-adapter_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "code",
    "description": "This is the best template to start creating an adapter service for your project",
    "itemId": "application-service-adapter",
    "name": "Application Service Adapter",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/template/service-adapter-template",
    "resources": {
      "services": {
        "application-service-adapter": {
          "type": "template",
          "name": "application-service-adapter",
          "description": "This is the best template to start creating an adapter service for your project",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/62973/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "IDENTIFICATION_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "value": "3",
              "valueType": "plain"
            },
            {
              "name": "RETRIES_DELAY_MS",
              "value": "1000",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "value": "REST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIG_FILE_PATH",
              "value": "/path/to/file",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-02-27T14:12:45.071Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "application-service-adapter_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/appointment-manager/overview"
    },
    "itemId": "appointment-manager",
    "name": "Appointment Manager",
    "description": "Manage appointments, availabilities, slots and exceptions.",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/appointment-manager",
    "resources": {
      "services": {
        "appointment-manager": {
          "type": "plugin",
          "name": "appointment-manager",
          "dockerImage": "nexus.mia-platform.eu/plugins/appointment-manager:2.5.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "APPOINTMENTS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/appointment-manager/config.json",
              "valueType": "plain"
            },
            {
              "name": "RESOURCE_ID_FIELD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_TIME_ZONE",
              "value": "Europe/Rome",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "appointment-manager",
              "mountPath": "/home/node/app/appointment-manager",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"users\\": {},\\n\\"channels\\": [],\\n\\"isTeleconsultationAvailable\\": false,\\n\\"isMessagingAvailable\\": false,\\n\\"isNotificationManagerAvailable\\": false,\\n\\"isTimerAvailable\\": false,\\n\\"isUserAvailable\\": false,\\n\\"isFlexibleSlotAvailable\\": false,\\n\\"isParticipantStatusAvailable\\": false\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.5.0",
      "releaseNote": "Automatically truncate startDate and endDate of exceptions to the second"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.535Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "appointment-manager.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/appointment-manager/overview"
    },
    "itemId": "appointment-manager",
    "name": "Appointment Manager",
    "description": "Manage appointments, availabilities, slots and exceptions.",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/appointment-manager",
    "resources": {
      "services": {
        "appointment-manager": {
          "type": "plugin",
          "name": "appointment-manager",
          "dockerImage": "nexus.mia-platform.eu/plugins/appointment-manager:2.4.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "APPOINTMENTS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/appointment-manager/config.json",
              "valueType": "plain"
            },
            {
              "name": "RESOURCE_ID_FIELD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_TIME_ZONE",
              "value": "Europe/Rome",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "appointment-manager",
              "mountPath": "/home/node/app/appointment-manager",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"users\\": {},\\n\\"channels\\": [],\\n\\"isTeleconsultationAvailable\\": false,\\n\\"isMessagingAvailable\\": false,\\n\\"isNotificationManagerAvailable\\": false,\\n\\"isTimerAvailable\\": false,\\n\\"isUserAvailable\\": false,\\n\\"isFlexibleSlotAvailable\\": false,\\n\\"isParticipantStatusAvailable\\": false\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.0",
      "releaseNote": "Add configuration option 'isNotificationManagerAsync' (default to false) and update Node.js to v20"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.527Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "appointment-manager.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/appointment-manager/overview"
    },
    "itemId": "appointment-manager",
    "name": "Appointment Manager",
    "description": "Manage appointments, availabilities, slots and exceptions.",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/appointment-manager",
    "resources": {
      "services": {
        "appointment-manager": {
          "type": "plugin",
          "name": "appointment-manager",
          "dockerImage": "nexus.mia-platform.eu/plugins/appointment-manager:2.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "APPOINTMENTS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/appointment-manager/config.json",
              "valueType": "plain"
            },
            {
              "name": "RESOURCE_ID_FIELD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_TIME_ZONE",
              "value": "Europe/Rome",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "appointment-manager",
              "mountPath": "/home/node/app/appointment-manager",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"users\\": {},\\n\\"channels\\": [],\\n\\"isTeleconsultationAvailable\\": false,\\n\\"isMessagingAvailable\\": false,\\n\\"isNotificationManagerAvailable\\": false,\\n\\"isTimerAvailable\\": false,\\n\\"isUserAvailable\\": false,\\n\\"isFlexibleSlotAvailable\\": false,\\n\\"isParticipantStatusAvailable\\": false\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.3.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.013Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "appointment-manager.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/appointment-manager/overview"
    },
    "itemId": "appointment-manager",
    "name": "Appointment Manager",
    "description": "Manage appointments, availabilities, slots and exceptions.",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/appointment-manager",
    "resources": {
      "services": {
        "appointment-manager": {
          "type": "plugin",
          "name": "appointment-manager",
          "dockerImage": "nexus.mia-platform.eu/plugins/appointment-manager:2.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "APPOINTMENTS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/appointment-manager/config.json",
              "valueType": "plain"
            },
            {
              "name": "RESOURCE_ID_FIELD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_TIME_ZONE",
              "value": "Europe/Rome",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "appointment-manager",
              "mountPath": "/home/node/app/appointment-manager",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"users\\": {},\\n\\"channels\\": [],\\n\\"isTeleconsultationAvailable\\": false,\\n\\"isMessagingAvailable\\": false,\\n\\"isNotificationManagerAvailable\\": false,\\n\\"isTimerAvailable\\": false,\\n\\"isUserAvailable\\": false,\\n\\"isFlexibleSlotAvailable\\": false,\\n\\"isParticipantStatusAvailable\\": false\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-10-14T12:22:38.267Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "appointment-manager.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "itemId": "audit-trail",
    "name": "Audit Trail",
    "categoryId": "healthcare",
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "visibility": {
      "public": true
    },
    "description": "Collect audit logs from your microservice",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_sidecars/audit-trail/overview"
    },
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/audit-trail",
    "type": "sidecar",
    "resources": {
      "name": "audit-trail",
      "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/audit-trail:1.0.0",
      "defaultEnvironmentVariables": [
        {
          "name": "LOG_LEVEL",
          "value": "{{LOG_LEVEL}}",
          "valueType": "plain"
        }
      ],
      "defaultResources": {
        "cpuLimits": {
          "max": "100m",
          "min": "50m"
        },
        "memoryLimits": {
          "max": "100Mi",
          "min": "50Mi"
        }
      }
    },
    "releaseDate": "2025-04-03T13:02:51.888Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "audit-trail_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/auth0-client/configuration"
    },
    "itemId": "auth0-client",
    "name": "Auth0 Client",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/auth0-client",
    "resources": {
      "services": {
        "auth0-client": {
          "type": "plugin",
          "name": "auth0-client",
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.8.0",
          "componentId": "auth0-client",
          "mapEnvVarToMountPath": {
            "auth0-client-config": {
              "type": "folder",
              "envName": "SERVICE_CONFIG_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SESSION_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "CHANGE_WITH_YOUR_ORIGINAL_PROTOCOL_HEADER",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "CHANGE_WITH_YOUR_REDIS_MODE",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MASTER_NAME",
              "value": "CHANGE_WITH_YOUR_REDIS_MASTER_NAME",
              "valueType": "plain"
            },
            {
              "name": "REDIS_TLS",
              "value": "CHANGE_WITH_YOUR_REDIS_TLS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_TLS_CACERT",
              "value": "CHANGE_WITH_YOUR_REDIS_TLS_CACERT",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DB_URL",
              "value": "CHANGE_WITH_YOUR_MONGO_DB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_COLLECTION_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_PROPERTIES_TO_SAVE",
              "value": "CHANGE_WITH_YOUR_USERS_PROPERTIES_TO_SAVE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n \\"clients\\": {\\n  \\"cms\\": {\\n   \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n   \\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n   \\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n   \\"redirectUrl\\": \\"CHANGE_WITH_YOUR_REDIRECT_URL\\",\\n   \\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n   ],\\n   \\"audience\\": \\"CHANGE_WITH_YOUR_AUDIENCE\\",\\n   \\"supportedConnections\\": [],\\n   \\"defaultConnection\\": \\"\\"\\n  }\\n },\\n \\"defaultClient\\": \\"\\",\\n \\"managementClient\\": {\\n  \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n  \\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n  \\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\n  \\"supportedConnectionsMap\\": {\\n  \\"foo\\": { \\"connectionId\\": \\"bar\\"  }\\n },\\n  \\"defaultManagementConnectionName\\": \\"foo\\"\\n },\\n \\"customClaimsNamespaces\\": [\\n  \\"https://mia-platform.eu/app_metadata\\",\\n  \\"https://mia-platform.eu/user_metadata\\"\\n ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.8.0",
      "releaseNote": "### Added\\n\\n- add support for \`prompt\` and \`action\` query parameters set in \`/authorize\` endpoint"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.033Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "auth0-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/auth0-client/configuration"
    },
    "itemId": "auth0-client",
    "name": "Auth0 Client",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/auth0-client",
    "resources": {
      "services": {
        "auth0-client": {
          "type": "plugin",
          "name": "auth0-client",
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.7.1",
          "componentId": "auth0-client",
          "mapEnvVarToMountPath": {
            "auth0-client-config": {
              "type": "folder",
              "envName": "SERVICE_CONFIG_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SESSION_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "CHANGE_WITH_YOUR_ORIGINAL_PROTOCOL_HEADER",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "CHANGE_WITH_YOUR_REDIS_MODE",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MASTER_NAME",
              "value": "CHANGE_WITH_YOUR_REDIS_MASTER_NAME",
              "valueType": "plain"
            },
            {
              "name": "REDIS_TLS",
              "value": "CHANGE_WITH_YOUR_REDIS_TLS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_TLS_CACERT",
              "value": "CHANGE_WITH_YOUR_REDIS_TLS_CACERT",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DB_URL",
              "value": "CHANGE_WITH_YOUR_MONGO_DB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_COLLECTION_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_PROPERTIES_TO_SAVE",
              "value": "CHANGE_WITH_YOUR_USERS_PROPERTIES_TO_SAVE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n \\"clients\\": {\\n  \\"cms\\": {\\n   \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n   \\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n   \\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n   \\"redirectUrl\\": \\"CHANGE_WITH_YOUR_REDIRECT_URL\\",\\n   \\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n   ],\\n   \\"audience\\": \\"CHANGE_WITH_YOUR_AUDIENCE\\",\\n   \\"supportedConnections\\": [],\\n   \\"defaultConnection\\": \\"\\"\\n  }\\n },\\n \\"defaultClient\\": \\"\\",\\n \\"managementClient\\": {\\n  \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n  \\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n  \\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\n  \\"supportedConnectionsMap\\": {\\n  \\"foo\\": { \\"connectionId\\": \\"bar\\"  }\\n },\\n  \\"defaultManagementConnectionName\\": \\"foo\\"\\n },\\n \\"customClaimsNamespaces\\": [\\n  \\"https://mia-platform.eu/app_metadata\\",\\n  \\"https://mia-platform.eu/user_metadata\\"\\n ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.7.1",
      "releaseNote": "Fix logout redirect when query parameters are set in the redirect path"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.870Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "auth0-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/auth0-client/configuration"
    },
    "itemId": "auth0-client",
    "name": "Auth0 Client",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/auth0-client",
    "resources": {
      "services": {
        "auth0-client": {
          "type": "plugin",
          "name": "auth0-client",
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.7.0",
          "componentId": "auth0-client",
          "mapEnvVarToMountPath": {
            "auth0-client-config": {
              "type": "folder",
              "envName": "SERVICE_CONFIG_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SESSION_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "CHANGE_WITH_YOUR_ORIGINAL_PROTOCOL_HEADER",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "CHANGE_WITH_YOUR_REDIS_MODE",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MASTER_NAME",
              "value": "CHANGE_WITH_YOUR_REDIS_MASTER_NAME",
              "valueType": "plain"
            },
            {
              "name": "REDIS_TLS",
              "value": "CHANGE_WITH_YOUR_REDIS_TLS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_TLS_CACERT",
              "value": "CHANGE_WITH_YOUR_REDIS_TLS_CACERT",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DB_URL",
              "value": "CHANGE_WITH_YOUR_MONGO_DB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_COLLECTION_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_PROPERTIES_TO_SAVE",
              "value": "CHANGE_WITH_YOUR_USERS_PROPERTIES_TO_SAVE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n \\"clients\\": {\\n  \\"cms\\": {\\n   \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n   \\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n   \\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n   \\"redirectUrl\\": \\"CHANGE_WITH_YOUR_REDIRECT_URL\\",\\n   \\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n   ],\\n   \\"audience\\": \\"CHANGE_WITH_YOUR_AUDIENCE\\",\\n   \\"supportedConnections\\": [],\\n   \\"defaultConnection\\": \\"\\"\\n  }\\n },\\n \\"defaultClient\\": \\"\\",\\n \\"managementClient\\": {\\n  \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n  \\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n  \\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\n  \\"supportedConnectionsMap\\": {\\n  \\"foo\\": { \\"connectionId\\": \\"bar\\"  }\\n },\\n  \\"defaultManagementConnectionName\\": \\"foo\\"\\n },\\n \\"customClaimsNamespaces\\": [\\n  \\"https://mia-platform.eu/app_metadata\\",\\n  \\"https://mia-platform.eu/user_metadata\\"\\n ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.7.0",
      "releaseNote": "Added support for TLS connections with Redis"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.874Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "auth0-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/auth0-client/configuration"
    },
    "itemId": "auth0-client",
    "name": "Auth0 Client",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/auth0-client",
    "resources": {
      "services": {
        "auth0-client": {
          "type": "plugin",
          "name": "auth0-client",
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.6.0",
          "componentId": "auth0-client",
          "mapEnvVarToMountPath": {
            "auth0-client-config": {
              "type": "folder",
              "envName": "SERVICE_CONFIG_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SESSION_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "CHANGE_WITH_YOUR_ORIGINAL_PROTOCOL_HEADER",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "CHANGE_WITH_YOUR_REDIS_MODE",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MASTER_NAME",
              "value": "CHANGE_WITH_YOUR_REDIS_MASTER_NAME",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DB_URL",
              "value": "CHANGE_WITH_YOUR_MONGO_DB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_COLLECTION_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_PROPERTIES_TO_SAVE",
              "value": "CHANGE_WITH_YOUR_USERS_PROPERTIES_TO_SAVE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n \\"clients\\": {\\n  \\"cms\\": {\\n   \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n   \\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n   \\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n   \\"redirectUrl\\": \\"CHANGE_WITH_YOUR_REDIRECT_URL\\",\\n   \\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n   ],\\n   \\"audience\\": \\"CHANGE_WITH_YOUR_AUDIENCE\\",\\n   \\"supportedConnections\\": [],\\n   \\"defaultConnection\\": \\"\\"\\n  }\\n },\\n \\"defaultClient\\": \\"\\",\\n \\"managementClient\\": {\\n  \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n  \\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n  \\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\n  \\"supportedConnectionsMap\\": {\\n  \\"foo\\": { \\"connectionId\\": \\"bar\\"  }\\n },\\n  \\"defaultManagementConnectionName\\": \\"foo\\"\\n },\\n \\"customClaimsNamespaces\\": [\\n  \\"https://mia-platform.eu/app_metadata\\",\\n  \\"https://mia-platform.eu/user_metadata\\"\\n ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.6.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.850Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "auth0-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/auth0-client/configuration"
    },
    "itemId": "auth0-client",
    "name": "Auth0 Client",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/auth0-client",
    "resources": {
      "services": {
        "auth0-client": {
          "type": "plugin",
          "name": "auth0-client",
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.5.0",
          "componentId": "auth0-client",
          "mapEnvVarToMountPath": {
            "auth0-client-config": {
              "type": "folder",
              "envName": "SERVICE_CONFIG_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SESSION_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "CHANGE_WITH_YOUR_ORIGINAL_PROTOCOL_HEADER",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "CHANGE_WITH_YOUR_REDIS_MODE",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MASTER_NAME",
              "value": "CHANGE_WITH_YOUR_REDIS_MASTER_NAME",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DB_URL",
              "value": "CHANGE_WITH_YOUR_MONGO_DB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_COLLECTION_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_PROPERTIES_TO_SAVE",
              "value": "CHANGE_WITH_YOUR_USERS_PROPERTIES_TO_SAVE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n \\"clients\\": {\\n  \\"cms\\": {\\n   \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n   \\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n   \\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n   \\"redirectUrl\\": \\"CHANGE_WITH_YOUR_REDIRECT_URL\\",\\n   \\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n   ],\\n   \\"audience\\": \\"CHANGE_WITH_YOUR_AUDIENCE\\",\\n   \\"supportedConnections\\": [],\\n   \\"defaultConnection\\": \\"\\"\\n  }\\n },\\n \\"defaultClient\\": \\"\\",\\n \\"managementClient\\": {\\n  \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n  \\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n  \\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\n  \\"supportedConnectionsMap\\": {\\n  \\"foo\\": { \\"connectionId\\": \\"bar\\"  }\\n },\\n  \\"defaultManagementConnectionName\\": \\"foo\\"\\n },\\n \\"customClaimsNamespaces\\": [\\n  \\"https://mia-platform.eu/app_metadata\\",\\n  \\"https://mia-platform.eu/user_metadata\\"\\n ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.5.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.849Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "auth0-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/auth0-client/configuration"
    },
    "itemId": "auth0-client",
    "name": "Auth0 Client",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/auth0-client",
    "resources": {
      "services": {
        "auth0-client": {
          "type": "plugin",
          "name": "auth0-client",
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.6.0",
          "componentId": "auth0-client",
          "mapEnvVarToMountPath": {
            "auth0-client-config": {
              "type": "folder",
              "envName": "SERVICE_CONFIG_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SESSION_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "CHANGE_WITH_YOUR_ORIGINAL_PROTOCOL_HEADER",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "CHANGE_WITH_YOUR_REDIS_MODE",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MASTER_NAME",
              "value": "CHANGE_WITH_YOUR_REDIS_MASTER_NAME",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DB_URL",
              "value": "CHANGE_WITH_YOUR_MONGO_DB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_USERS_COLLECTION_NAME",
              "valueType": "plain"
            },
            {
              "name": "USERS_PROPERTIES_TO_SAVE",
              "value": "CHANGE_WITH_YOUR_USERS_PROPERTIES_TO_SAVE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n \\"clients\\": {\\n  \\"cms\\": {\\n   \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n   \\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n   \\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n   \\"redirectUrl\\": \\"CHANGE_WITH_YOUR_REDIRECT_URL\\",\\n   \\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n   ],\\n   \\"audience\\": \\"CHANGE_WITH_YOUR_AUDIENCE\\",\\n   \\"supportedConnections\\": [],\\n   \\"defaultConnection\\": \\"\\"\\n  }\\n },\\n \\"defaultClient\\": \\"\\",\\n \\"managementClient\\": {\\n  \\"auth0Url\\": \\"CHANGE_WITH_YOUR_AUTH0_URL\\",\\n  \\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n  \\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\n  \\"supportedConnectionsMap\\": {\\n  \\"foo\\": { \\"connectionId\\": \\"bar\\"  }\\n },\\n  \\"defaultManagementConnectionName\\": \\"foo\\"\\n },\\n \\"customClaimsNamespaces\\": [\\n  \\"https://mia-platform.eu/app_metadata\\",\\n  \\"https://mia-platform.eu/user_metadata\\"\\n ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "auth0-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
    "itemId": "authentication-service",
    "name": "Authentication Service",
    "resources": {
      "services": {
        "authentication-service": {
          "type": "plugin",
          "name": "authentication-service",
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.9.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOST",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "CHANGE_WITH_YOUR_USERS_CRUD_BASE_URL",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGN_KEY",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_TOKEN_SIGN_KEY",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_JWT_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_REFRESH_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "CHANGE_WITH_PROVIDER_TOKEN_PASS_PHRASE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "CHANGE WITH YOUR SESSION SCOPE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "authentication-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.9.0",
      "releaseNote": "### Added\\nexpose provider id_token only for Microsoft provider with /provider/idtoken new endpoint"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-18T17:09:39.906Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authentication-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
    "itemId": "authentication-service",
    "name": "Authentication Service",
    "resources": {
      "services": {
        "authentication-service": {
          "type": "plugin",
          "name": "authentication-service",
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.12.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOST",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "CHANGE_WITH_YOUR_USERS_CRUD_BASE_URL",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGN_KEY",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_TOKEN_SIGN_KEY",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_JWT_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_REFRESH_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "CHANGE_WITH_PROVIDER_TOKEN_PASS_PHRASE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "CHANGE WITH YOUR SESSION SCOPE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "authentication-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.12.0",
      "releaseNote": "### Added\\n- feat: \`providerToTokenClaims\` configuration allows you to propagate information from the IDP to user token. It requires adding the \`providerClaims\` field to the user's mongodb collection\\n- feat: \`useProviderGroups\` configuration allows you to use the groups defined in the IDP and synchronize them within the user's mongodb collection"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.534Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authentication-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
    "itemId": "authentication-service",
    "name": "Authentication Service",
    "resources": {
      "services": {
        "authentication-service": {
          "type": "plugin",
          "name": "authentication-service",
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.11.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOST",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "CHANGE_WITH_YOUR_USERS_CRUD_BASE_URL",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGN_KEY",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_TOKEN_SIGN_KEY",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_JWT_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_REFRESH_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "CHANGE_WITH_PROVIDER_TOKEN_PASS_PHRASE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "CHANGE WITH YOUR SESSION SCOPE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "authentication-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.11.0",
      "releaseNote": "### Added\\n- \`customTokenClaims.metadataFieldsToInclude\` configuration now supports nested field specification with dot notation, allowing for more granular metadata injection in the token claims"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.013Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authentication-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
    "itemId": "authentication-service",
    "name": "Authentication Service",
    "resources": {
      "services": {
        "authentication-service": {
          "type": "plugin",
          "name": "authentication-service",
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.10.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOST",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "CHANGE_WITH_YOUR_USERS_CRUD_BASE_URL",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGN_KEY",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_TOKEN_SIGN_KEY",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_JWT_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_REFRESH_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "CHANGE_WITH_PROVIDER_TOKEN_PASS_PHRASE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "CHANGE WITH YOUR SESSION SCOPE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "authentication-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.10.0",
      "releaseNote": "### Added\\nintroduce permissions custom claim, which can be employed by other services to restrict the access to resources specified by the permissions granted to the user.\\nBy default the list of permissions is empty."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-18T17:09:39.873Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authentication-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
    "itemId": "authentication-service",
    "name": "Authentication Service",
    "resources": {
      "services": {
        "authentication-service": {
          "type": "plugin",
          "name": "authentication-service",
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.10.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOST",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "CHANGE_WITH_YOUR_USERS_CRUD_BASE_URL",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGN_KEY",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_TOKEN_SIGN_KEY",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_JWT_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "CHANGE_WITH_YOUR_REFRESH_TOKEN_DURATION",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "CHANGE_WITH_PROVIDER_TOKEN_PASS_PHRASE",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "CHANGE WITH YOUR SESSION SCOPE",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "authentication-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authentication-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/authorization-service/overview"
    },
    "itemId": "authorization-service",
    "name": "Authorization Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/authorization-service",
    "resources": {
      "services": {
        "authorization-service": {
          "type": "plugin",
          "name": "authorization-service",
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.2",
          "componentId": "authorization-service",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "type": "folder",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.0.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "CHANGE_WITH_YOUR_CUSTOM_USER_ID_KEY",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_USER_PROPERTIES_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_BACKOFFICE_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_AUTHORIZATION_HEADERS_TO_PROXY",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "authorization-service-config",
              "mountPath": "/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.2",
      "releaseNote": "Fixed:\\n\\n- return 401 if auth route is not found and strict mode is enabled"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.866Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authorization-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/authorization-service/overview"
    },
    "itemId": "authorization-service",
    "name": "Authorization Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/authorization-service",
    "resources": {
      "services": {
        "authorization-service": {
          "type": "plugin",
          "name": "authorization-service",
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.1",
          "componentId": "authorization-service",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "type": "folder",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.0.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "CHANGE_WITH_YOUR_CUSTOM_USER_ID_KEY",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_USER_PROPERTIES_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_BACKOFFICE_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_AUTHORIZATION_HEADERS_TO_PROXY",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "authorization-service-config",
              "mountPath": "/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.1",
      "releaseNote": "Fixed:\\n\\n- redirect on subsequent slashes in path (even if url encoded)"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.865Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authorization-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/authorization-service/overview"
    },
    "itemId": "authorization-service",
    "name": "Authorization Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/authorization-service",
    "resources": {
      "services": {
        "authorization-service": {
          "type": "plugin",
          "name": "authorization-service",
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.0",
          "componentId": "authorization-service",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "type": "folder",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.0.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "CHANGE_WITH_YOUR_CUSTOM_USER_ID_KEY",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_USER_PROPERTIES_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_BACKOFFICE_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_AUTHORIZATION_HEADERS_TO_PROXY",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "authorization-service-config",
              "mountPath": "/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.0",
      "releaseNote": "Added:\\n\\n- support Envoy calling style by handling all paths starting with \`/auth\`"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.865Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authorization-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/authorization-service/overview"
    },
    "itemId": "authorization-service",
    "name": "Authorization Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/authorization-service",
    "resources": {
      "services": {
        "authorization-service": {
          "type": "plugin",
          "name": "authorization-service",
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.2",
          "componentId": "authorization-service",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "type": "folder",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.0.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "CHANGE_WITH_YOUR_CUSTOM_USER_ID_KEY",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_USER_PROPERTIES_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "CHANGE_WITH_YOUR_BACKOFFICE_USERINFO_URL",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_AUTHORIZATION_HEADERS_TO_PROXY",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "authorization-service-config",
              "mountPath": "/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-07-07T08:27:12.389Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "authorization-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.9",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.9",
      "releaseNote": "Added new key \`$dateNow\` in handlebars to retrieve current date time in ISO format in http requests."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-18T17:09:39.902Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.8",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.8",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.013Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.19",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.19",
      "releaseNote": "Fixed enum arrays not handled correctly in \`bk-form-modal\` in \`wizard\` mode."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-07-04T16:42:16.530Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.18",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.18",
      "releaseNote": "Fixed bk-table wrong column widths introduced with the new Chrome/Chromium version and added possibility to interpolate title and content of the bk-notifications component."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-06-06T16:42:16.530Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.17",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.17",
      "releaseNote": "Added possibility to validate the form content when performing a custom footer action in \`bk-dynamic-form-modal\` component."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-05-20T16:42:16.530Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.16",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.16",
      "releaseNote": "Revert \`&\` character escaping in \`editor\` and \`html-editor\`"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.530Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.14",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.14",
      "releaseNote": "Add \`method\` property to \`bk-import-modal\` to choose which method to use for the \`/import\` HTTP request."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.954Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.13",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.13",
      "releaseNote": "Add \`method\` property to \`bk-import-modal\` to choose which method to use for the \`/import\` HTTP request."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.669Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.12",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.12",
      "releaseNote": "Fixed \\"plus\\" special character in url when used with \`bk-expanded-filters\` component."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.671Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.11",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.11",
      "releaseNote": "The component bk-table now it is visible when inside bk-layout-swap"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.872Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.10",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.10",
      "releaseNote": "By by specifying \`format: date\` or \`format: time\` and adding the flag \`isPartialFormat\` to true in \`formOptions\` it is possible to use dates and time as simple string and not ISO format. Fixed query for writable views' lookup. Fixed typo in italian label on export/import delimiter option."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.866Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Web component library to build your frontend pages.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/business_suite/backoffice/overview"
    },
    "itemId": "back-kit",
    "name": "Back Kit",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/microfrontend-composer/back-kit",
    "resources": {
      "services": {
        "back-kit": {
          "type": "plugin",
          "name": "back-kit",
          "description": "Web component library to build your frontend pages.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/bk-web-components:1.5.8",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-10-14T10:33:27.318Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "back-kit.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "healthcare",
    "description": "This application allows to quickly setup the necessary services in order to manage appointments and availabilities.",
    "itemId": "booking-module",
    "name": "Booking Module",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/applications/booking-module",
    "resources": {
      "collections": {
        "bk_am_appointments": {
          "defaultName": "bk_am_appointments",
          "description": "Appointment Manager appointments",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "reminderMilliseconds",
              "nullable": false,
              "required": false,
              "type": "number"
            },
            {
              "name": "reminderIds",
              "nullable": false,
              "required": false,
              "type": "Array_string"
            },
            {
              "name": "channels",
              "nullable": false,
              "required": false,
              "type": "Array_string"
            },
            {
              "name": "title",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "startDate",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "name": "endDate",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isRemote",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "linkTeleconsultation",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isFlagged",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "availabilityId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "slotId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "ownerId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "status",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "lockExpiration",
              "nullable": true,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "customerId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "customer",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "resourceId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "resource",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "description",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "completed",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "type",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "location",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "participants",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patients",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "doctors",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "method",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "notes",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "bk_am_appointments",
          "internalEndpoints": [
            {
              "basePath": "/bk-am-appointments",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "bk_am_availabilities": {
          "defaultName": "bk_am_availabilities",
          "description": "Collection of bk_am_availabilities",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "startDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "endDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "slotDuration",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "simultaneousSlotsNumber",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "each",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "on",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "untilDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "doctorId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "resourceId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "timeZone",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "location",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "onCreate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "onUpdate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "onDelete",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "onCompute",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "type",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "bk_am_availabilities",
          "internalEndpoints": [
            {
              "basePath": "/bk-am-availabilities",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "bk_am_exceptions": {
          "defaultName": "bk_am_exceptions",
          "description": "Collection of bk_am_exceptions",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "startDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "endDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "reason",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "resourceId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "bk_am_exceptions",
          "internalEndpoints": [
            {
              "basePath": "/bk-am-exceptions",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "bk_am_week_days": {
          "defaultName": "bk_am_week_days",
          "description": "Collection of bk_am_week_days",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "index",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "bk_am_week_days",
          "internalEndpoints": [
            {
              "basePath": "/bk-am-week-days",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "bk_ts_teleconsultations": {
          "defaultName": "bk_ts_teleconsultations",
          "description": "Collection of bk_ts_teleconsultations",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "bandyerRoomId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "participants",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "teleconsultationState",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "participantsNumber",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "startDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "endDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "duration",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            }
          ],
          "id": "bk_ts_teleconsultations",
          "internalEndpoints": [
            {
              "basePath": "/bk-ts-teleconsultations",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "bk_ts_userid_maps": {
          "defaultName": "bk_ts_userid_maps",
          "description": "Collection of bk_ts_userid_maps",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "bandyerId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "receivedUserId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "bk_ts_userid_maps",
          "internalEndpoints": [
            {
              "basePath": "/bk-ts-userid-maps",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/api/v1/telecons-be": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/api/v1/telecons-be",
          "defaultPathRewrite": "/",
          "description": "Endpoint /api/v1/telecons-be",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "teleconsultation-service-backend",
          "tags": [
            "teleconsultation-service-backend"
          ],
          "type": "custom"
        },
        "/appointment-manager": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/appointment-manager",
          "defaultPathRewrite": "/",
          "description": "Endpoint /appointment-manager",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "appointment-manager",
          "tags": [
            "appointment-manager"
          ],
          "type": "custom"
        },
        "/bk-am-appointments": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "bk_am_appointments",
          "defaultBasePath": "/bk-am-appointments",
          "defaultPathRewrite": "/bk-am-appointments",
          "description": "Endpoint /bk-am-appointments",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/bk-am-availabilities": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "bk_am_availabilities",
          "defaultBasePath": "/bk-am-availabilities",
          "defaultPathRewrite": "/bk-am-availabilities",
          "description": "Endpoint /bk-am-availabilities",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/bk-am-exceptions": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "bk_am_exceptions",
          "defaultBasePath": "/bk-am-exceptions",
          "defaultPathRewrite": "/bk-am-exceptions",
          "description": "Endpoint /bk-am-exceptions",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/bk-am-week-days": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "bk_am_week_days",
          "defaultBasePath": "/bk-am-week-days",
          "defaultPathRewrite": "/bk-am-week-days",
          "description": "Endpoint /bk-am-week-days",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/telecons-fe": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/telecons-fe",
          "defaultPathRewrite": "/",
          "description": "Endpoint /telecons-fe",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "teleconsultation-service-frontend",
          "tags": [
            "teleconsultation-service-frontend"
          ],
          "type": "custom"
        }
      },
      "services": {
        "api-gateway": {
          "additionalContainers": [
            {
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultEnvironmentVariables": [
                {
                  "name": "LOG_LEVEL",
                  "value": "{{LOG_LEVEL}}",
                  "valueType": "plain"
                },
                {
                  "name": "TRUSTED_PROXIES",
                  "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
                  "valueType": "plain"
                },
                {
                  "name": "HTTP_PORT",
                  "value": "3000",
                  "valueType": "plain"
                },
                {
                  "name": "USERID_HEADER_KEY",
                  "value": "miauserid",
                  "valueType": "plain"
                },
                {
                  "name": "GROUPS_HEADER_KEY",
                  "value": "miausergroups",
                  "valueType": "plain"
                },
                {
                  "name": "CLIENTTYPE_HEADER_KEY",
                  "value": "client-type",
                  "valueType": "plain"
                },
                {
                  "name": "BACKOFFICE_HEADER_KEY",
                  "value": "isbackoffice",
                  "valueType": "plain"
                },
                {
                  "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
                  "value": "microservice-gateway",
                  "valueType": "plain"
                },
                {
                  "name": "USER_PROPERTIES_HEADER_KEY",
                  "value": "miauserproperties",
                  "valueType": "plain"
                }
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              },
              "defaultResources": {
                "cpuLimits": {
                  "min": "10m"
                },
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                }
              },
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "name": "dnsmasq"
            }
          ],
          "componentId": "api-gateway",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "mountPath": "/etc/nginx/conf.d",
              "name": "api-gateway-server",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/platform.d",
              "name": "api-gateway-platform",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/nginx/customization.d",
              "name": "api-gateway-customization",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/backoffice.d",
              "name": "api-gateway-backoffice",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend"
            },
            "readiness": {
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "name": "api-gateway",
          "type": "plugin"
        },
        "appointment-manager": {
          "componentId": "appointment-manager",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{\\n  \\"users\\": {\\n    \\"doctors\\": {\\n      \\"create\\": \\"{{APPOINTMENT_CREATION_DOCTOR_TEMPLATE_ID}}\\",\\n      \\"reminders\\": [\\n        {\\n          \\"template\\": \\"{{APPOINTMENT_REMINDER_DOCTOR_TEMPLATE_ID}}\\",\\n          \\"reminderMilliseconds\\": 3600000\\n        }\\n      ],\\n      \\"status\\": \\"needs-action\\",\\n      \\"required\\": true,\\n      \\"acceptanceRequired\\": false\\n    },\\n    \\"patients\\": {\\n      \\"create\\": \\"{{APPOINTMENT_CREATION_PATIENT_TEMPLATE_ID}}\\",\\n      \\"reminders\\": [\\n        {\\n          \\"template\\": \\"{{APPOINTMENT_REMINDER_PATIENT_TEMPLATE_ID}}\\",\\n          \\"reminderMilliseconds\\": 3600000\\n        }\\n      ],\\n      \\"status\\": \\"needs-action\\",\\n      \\"required\\": true,\\n      \\"acceptanceRequired\\": false\\n    },\\n    \\"resourceId\\": {}\\n  },\\n  \\"channels\\": [\\n    \\"email\\",\\n    \\"sms\\"\\n  ],\\n  \\"isTeleconsultationAvailable\\": true,\\n  \\"isMessagingAvailable\\": false,\\n  \\"isTimerAvailable\\": false,\\n  \\"isUserAvailable\\": false,\\n  \\"isFlexibleSlotAvailable\\": false,\\n  \\"isParticipantStatusAvailable\\": false,\\n  \\"isNotificationManagerAvailable\\": true\\n}",
                  "name": "config.json"
                }
              ],
              "mountPath": "/home/node/app/appointment-manager",
              "name": "appointment-manager"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "APPOINTMENTS_CRUD_NAME",
              "value": "bk-am-appointments",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/appointment-manager/config.json",
              "valueType": "plain"
            },
            {
              "name": "RESOURCE_ID_FIELD_NAME",
              "value": "resourceId",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_TIME_ZONE",
              "value": "Europe/Rome",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_SERVICE_NAME",
              "value": "teleconsultation-service-backend",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_BASE_PATH",
              "value": "{{TELECONSULTATION_BASE_PATH}}",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_ENDPOINT_FE",
              "value": "/telecons-fe",
              "valueType": "plain"
            },
            {
              "name": "AVAILABILITIES_CRUD_NAME",
              "value": "bk-am-availabilities",
              "valueType": "plain"
            },
            {
              "name": "EXCEPTIONS_CRUD_NAME",
              "value": "bk-am-exceptions",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATION_MANAGER_NAME",
              "value": "{{NOTIFICATION_MANAGER_NAME}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "Use this service to handle appointments.",
          "dockerImage": "nexus.mia-platform.eu/plugins/appointment-manager:{{APPOINTMENT_MANAGER_VERSION}}",
          "name": "appointment-manager",
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "url",
              "secretName": "mongodb",
              "valueType": "secret"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mongodb",
              "name": "mongodb"
            }
          ],
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:{{CRUD_SERVICE_VERSION}}",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "teleconsultation-service-backend": {
          "componentId": "teleconsultation-service-backend",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{\\n  \\"privileges\\": {\\n    \\"basic\\": {\\n      \\"groups\\": [\\n        \\"patient\\"\\n      ],\\n      \\"tools\\": {\\n        \\"chat\\": true,\\n        \\"screen_sharing\\": true,\\n        \\"file_upload\\": true,\\n        \\"whiteboard\\": true,\\n        \\"snapshot\\": true,\\n        \\"live_edit\\": true,\\n        \\"live_pointer\\": true,\\n        \\"present_to_everyone\\": true\\n      }\\n    },\\n    \\"plus\\": {\\n      \\"groups\\": [\\n        \\"doctor\\",\\n        \\"admin\\",\\n        \\"superadmin\\"\\n      ],\\n      \\"tools\\": {\\n        \\"chat\\": true,\\n        \\"screen_sharing\\": true,\\n        \\"file_upload\\": true,\\n        \\"whiteboard\\": true,\\n        \\"snapshot\\": true,\\n        \\"live_edit\\": true,\\n        \\"live_pointer\\": true,\\n        \\"present_to_everyone\\": true\\n      }\\n    }\\n  },\\n  \\"theme\\": {\\n    \\"light\\": {\\n      \\"primaryColor\\": \\"#ffffff\\",\\n      \\"accentColor\\": \\"#480ca8\\"\\n    },\\n    \\"dark\\": {\\n      \\"primaryColor\\": \\"#003049\\",\\n      \\"accentColor\\": \\"#d62828\\"\\n    }\\n  },\\n  \\"environment\\": \\"sandbox\\",\\n  \\"mode\\": \\"window\\",\\n  \\"customUserId\\": {\\n    \\"source\\": \\"_id\\",\\n    \\"target\\": \\"authUserId\\"\\n  }\\n}",
                  "name": "config.json"
                }
              ],
              "mountPath": "/home/node/app/teleconsultation-service",
              "name": "teleconsultation-service"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "x-forwarded-for,x-request-id,x-forwarded-host,cookie,client-type",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_CLIENT_TYPE",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_API_SECRET_KEY",
              "secretKey": "bandyer-api-secret-key",
              "secretName": "teleconsultation",
              "valueType": "secret"
            },
            {
              "name": "TELECONSULTATION_SERVICE_CONFIG_PATH",
              "value": "/home/node/app/teleconsultation-service/config.json",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATIONS_CRUD_NAME",
              "value": "/bk-ts-teleconsultations",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_MAP_CRUD_NAME",
              "value": "/bk-ts-userid-maps",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_BASE_URL",
              "secretKey": "bandyer-base-url",
              "secretName": "teleconsultation",
              "valueType": "secret"
            },
            {
              "name": "BANDYER_APP_ID",
              "secretKey": "bandyer-app-id",
              "secretName": "teleconsultation",
              "valueType": "secret"
            },
            {
              "name": "AUTH_SERVICE",
              "value": "{{AUTH_SERVICE}}",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_ID_USERS_API_ENDPOINT",
              "value": "http://user-manager-service-proxy/users/",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "Use this service to handle teleconsultations.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-backend:{{TELECONSULTATION_SERVICE_BE_VERSION}}",
          "name": "teleconsultation-service-backend",
          "type": "plugin"
        },
        "teleconsultation-service-frontend": {
          "componentId": "teleconsultation-service-frontend",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "Start your videocall application leveraging Bandyer APIs",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-frontend:{{TELECONSULTATION_SERVICE_FE_VERSION}}",
          "name": "teleconsultation-service-frontend",
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "APPOINTMENT_CREATION_DOCTOR_TEMPLATE_ID": {
          "noProductionEnv": "64ee0c6df1d8f12eeb8a2909",
          "productionEnv": "64ee0c6df1d8f12eeb8a2909"
        },
        "APPOINTMENT_CREATION_PATIENT_TEMPLATE_ID": {
          "noProductionEnv": "64ee0cd5f1d8f12eeb8a290e",
          "productionEnv": "64ee0cd5f1d8f12eeb8a290e"
        },
        "APPOINTMENT_MANAGER_VERSION": {
          "noProductionEnv": "2.5.0",
          "productionEnv": "2.5.0"
        },
        "APPOINTMENT_REMINDER_DOCTOR_TEMPLATE_ID": {
          "noProductionEnv": "66ac98c268156d086570e091",
          "productionEnv": "66ac98c268156d086570e091"
        },
        "APPOINTMENT_REMINDER_PATIENT_TEMPLATE_ID": {
          "noProductionEnv": "66ac991668156d086570e092",
          "productionEnv": "66ac991668156d086570e092"
        },
        "AUTH_SERVICE": {
          "noProductionEnv": "auth0-client.user-auth-module-development.svc.cluster.local",
          "productionEnv": "auth0-client.user-auth-module-preproduction.svc.cluster.local"
        },
        "CRUD_SERVICE_VERSION": {
          "noProductionEnv": "7.2.1",
          "productionEnv": "7.2.1"
        },
        "NOTIFICATION_MANAGER_NAME": {
          "noProductionEnv": "notification-manager.notification-module-development.svc.cluster.local",
          "productionEnv": "notification-manager.notification-module-preproduction.svc.cluster.local"
        },
        "TELECONSULTATION_BASE_PATH": {
          "noProductionEnv": "user-auth-module.test.mia-care.io",
          "productionEnv": "user-auth-module.preprod.mia-care.io"
        },
        "TELECONSULTATION_SERVICE_BE_VERSION": {
          "noProductionEnv": "2.1.0",
          "productionEnv": "2.1.0"
        },
        "TELECONSULTATION_SERVICE_FE_VERSION": {
          "noProductionEnv": "2.0.2",
          "productionEnv": "2.0.2"
        },
        "USER_AUTH_MODULE_AUTH_SERVICE": {
          "noProductionEnv": "auth0-client.user-auth-module-development.svc.cluster.local",
          "productionEnv": "auth0-client.user-auth-module-preproduction.svc.cluster.local"
        },
        "USER_AUTH_MODULE_BASE_PATH": {
          "noProductionEnv": "user-auth-module.test.mia-care.io",
          "productionEnv": "user-auth-module.preprod.mia-care.io"
        },
        "USER_AUTH_MODULE_NAMESPACE": {
          "noProductionEnv": "user-auth-module-development",
          "productionEnv": "user-auth-module-preproduction"
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.670Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "booking-module_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "The Bucket Storage Support Application contains all the microservices and resources need to load and reload data from your bucket.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/overview_bucket_storage_support"
    },
    "itemId": "bucket-storage-support-gcp",
    "name": "Bucket Storage Support - GCP",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/bucket-storage-support-application",
    "resources": {
      "services": {
        "api-gateway": {
          "type": "plugin",
          "description": "Use this service to route requests to the correct service and verify the need of authentication.",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "name": "api-gateway",
          "componentId": "api-gateway",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        },
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "componentId": "crud-service",
          "defaultDocumentationPath": "",
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "400Mi",
              "min": "70Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "/",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        },
        "bss-ingestion-storer": {
          "type": "plugin",
          "name": "bss-ingestion-storer",
          "description": "This service consumes messages from Kafka Topics and stores them into a Cloud Storage bucket",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-storer:1.5.3",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "{{KAFKA_STORER_GROUP_ID}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_NAME",
              "value": "{{BUCKET_NAME}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "google",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "{{INGESTION_STORER_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "BSS_EVENTS_TOPIC",
              "value": "{{BSS_EVENTS_TOPIC}}",
              "valueType": "plain"
            },
            {
              "name": "BSS_ENABLE_POST_INGESTION",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain"
            }
          ],
          "defaultSecrets": [
            {
              "name": "google-cloud-credentials-bucket-write",
              "mountPath": "/app/keys/credentials.json"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "bss-gcp-ingestion-storer-properties",
              "mountPath": "/app/config",
              "files": [
                {
                  "content": "bss:\\n  topics-config:\\n    # this section contains the topic that the ingestion storer will store to the bucket    \\n    #  data-topics-mapping:    \\n    #  - ingestion: <input-topic-name> \\n    #    bucket-folder: <optional-custom-folder> this field can be omitted entirely and the service would use the ingestion topic as folder name # leave empty if you don't need post-ingestion topic \\n    #    post-ingestion: []      \\n    #  - <output-topic-name-1>     # this topic will contain file written events from the component    \\n    output-events-topic: {{BSS_EVENTS_TOPIC}}\\n",
                  "name": "application.yaml"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "160Mi",
              "min": "40Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "links": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        },
        "bss-ingestion-reloader": {
          "name": "bss-ingestion-reloader",
          "type": "plugin",
          "description": "This service exposes a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
          "defaultLogParser": "mia-json",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-reloader:1.4.2",
          "defaultSecrets": [
            {
              "name": "google-cloud-credentials-bucket-read",
              "mountPath": "/app/keys/credentials.json"
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_NAME",
              "value": "{{BUCKET_NAME}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "google",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "{{INGESTION_RELOADER_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_PATH",
              "value": "/config",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_COLLECTION",
              "value": "status-service",
              "valueType": "plain"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1500m",
              "min": "250m"
            },
            "memoryLimits": {
              "max": "550Mi",
              "min": "350Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "bss-ingestion-reloader-properties",
              "mountPath": "/app/config",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "application.yaml",
                  "content": ""
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      },
      "endpoints": {
        "/reingestion": {
          "defaultBasePath": "/reingestion",
          "defaultPathRewrite": "/reingestion",
          "description": "",
          "type": "custom",
          "tags": [
            "ingestion-reloader"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "bss-ingestion-reloader"
        },
        "/reingestion/status": {
          "defaultBasePath": "/reingestion/status",
          "defaultPathRewrite": "/status",
          "description": "",
          "type": "custom",
          "tags": [
            "ingestion-reloader"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "bss-ingestion-reloader"
        },
        "/status-service": {
          "defaultBasePath": "/status-service",
          "defaultPathRewrite": "/status-service",
          "description": "Endpoint for collection /status-service",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "collectionId": "status-service",
          "pathName": "/",
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      },
      "collections": {
        "status-service": {
          "id": "status-service",
          "description": "Collection handling the requests of ingestion-reloader",
          "defaultName": "status-service",
          "type": "collection",
          "tags": [
            "ingestion-reloader"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "request",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "schema": {
                "properties": {
                  "reIngestionTopic": {
                    "type": "string"
                  },
                  "topic": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            {
              "name": "status",
              "type": "string",
              "required": false,
              "nullable": false
            },
            {
              "name": "lineIndex",
              "type": "number",
              "required": false,
              "nullable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/status-service",
              "defaultState": "PUBLIC"
            }
          ]
        }
      },
      "unsecretedVariables": {
        "BUCKET_NAME": {
          "productionEnv": "your bucket name",
          "noProductionEnv": "your bucket name"
        },
        "INGESTION_RELOADER_CLIENT_ID": {
          "productionEnv": "ingestion-reloader",
          "noProductionEnv": "ingestion-reloader"
        },
        "INGESTION_STORER_CLIENT_ID": {
          "productionEnv": "ingestion-storer",
          "noProductionEnv": "ingestion-storer"
        },
        "KAFKA_STORER_GROUP_ID": {
          "productionEnv": "change with your ingestion storer consumer group",
          "noProductionEnv": "change with your ingestion storer consumer group"
        },
        "BSS_EVENTS_TOPIC": {
          "productionEnv": "change with your bss events topic",
          "noProductionEnv": "change with your bss events topic"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-07-12T14:22:54.461Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "bucket-storage-support-gcp.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "The Bucket Storage Support Application contains all the microservices and resources need to load and reload data from your bucket.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/overview_bucket_storage_support"
    },
    "itemId": "bucket-storage-support-s3",
    "name": "Bucket Storage Support - S3",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/bucket-storage-support-application",
    "resources": {
      "services": {
        "api-gateway": {
          "type": "plugin",
          "description": "Use this service to route requests to the correct service and verify the need of authentication.",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "name": "api-gateway",
          "componentId": "api-gateway",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        },
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "componentId": "crud-service",
          "defaultDocumentationPath": "",
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "400Mi",
              "min": "70Mi"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "/",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        },
        "bss-ingestion-storer": {
          "type": "plugin",
          "name": "bss-ingestion-storer",
          "description": "This service consumes messages from Kafka Topics and stores them into a Cloud Storage bucket",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-storer:1.5.3",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "{{KAFKA_STORER_GROUP_ID}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_NAME",
              "value": "{{BUCKET_NAME}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "s3",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MAX_POLL_MS",
              "value": "500",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MAX_POLL_RECORDS",
              "value": "1500",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "{{INGESTION_STORER_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "BSS_EVENTS_TOPIC",
              "value": "{{BSS_EVENTS_TOPIC}}",
              "valueType": "plain"
            },
            {
              "name": "BSS_ENABLE_POST_INGESTION",
              "value": "false",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "bss-s3-ingestion-storer-properties",
              "mountPath": "/app/config",
              "files": [
                {
                  "content": "bss:\\n  bucket:\\n    s3-key-id: {{S3_KEY_ID}}\\n    s3-key: {{S3_KEY}}\\n    region: {{S3_REGION}}\\n    endpoint: {{S3_ENDPOINT}}\\n  topics-config:\\n    # this section contains the topic that the ingestion storer will store to the bucket\\n    #  data-topics-mapping:\\n    #  - ingestion: <input-topic-name>\\n    #    bucket-folder: <optional-custom-folder> this field can be omitted entirely and the service would use the ingestion topic as folder name # leave empty if you don't need post-ingestion topic\\n    #    post-ingestion: []\\n    #  - <output-topic-name-1>     # this topic will contain file written events from the component\\n    output-events-topic: {{BSS_EVENTS_TOPIC}}\\n",
                  "name": "application.yaml"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "160Mi",
              "min": "40Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "links": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        },
        "bss-ingestion-reloader": {
          "name": "bss-ingestion-reloader",
          "type": "plugin",
          "description": "This service exposes a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
          "defaultLogParser": "mia-json",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-reloader:1.4.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_NAME",
              "value": "{{BUCKET_NAME}}",
              "valueType": "plain"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "s3",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "{{INGESTION_RELOADER_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_PATH",
              "value": "/config",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_COLLECTION",
              "value": "status-service",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1500m",
              "min": "250m"
            },
            "memoryLimits": {
              "max": "550Mi",
              "min": "350Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "bss-s3-ingestion-reloader-properties",
              "mountPath": "/app/config",
              "files": [
                {
                  "content": "bss:\\n  bucket:\\n    s3-key-id: {{S3_KEY_ID}}\\n    s3-key: {{S3_KEY}}\\n    region: {{S3_REGION}}\\n    endpoint: {{S3_ENDPOINT}}\\n",
                  "name": "application.yaml"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      },
      "endpoints": {
        "/reingestion": {
          "defaultBasePath": "/reingestion",
          "defaultPathRewrite": "/reingestion",
          "description": "",
          "type": "custom",
          "tags": [
            "ingestion-reloader"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "bss-ingestion-reloader"
        },
        "/reingestion/status": {
          "defaultBasePath": "/reingestion/status",
          "defaultPathRewrite": "/status",
          "description": "",
          "type": "custom",
          "tags": [
            "ingestion-reloader"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "bss-ingestion-reloader"
        },
        "/status-service": {
          "defaultBasePath": "/status-service",
          "defaultPathRewrite": "/status-service",
          "description": "Endpoint for collection /status-service",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "collectionId": "status-service",
          "pathName": "/",
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      },
      "collections": {
        "status-service": {
          "id": "status-service",
          "description": "Collection handling the requests of ingestion-reloader",
          "defaultName": "status-service",
          "type": "collection",
          "tags": [
            "ingestion-reloader"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "request",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "schema": {
                "properties": {
                  "reIngestionTopic": {
                    "type": "string"
                  },
                  "topic": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            {
              "name": "status",
              "type": "string",
              "required": false,
              "nullable": false
            },
            {
              "name": "lineIndex",
              "type": "number",
              "required": false,
              "nullable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/status-service",
              "defaultState": "PUBLIC"
            }
          ]
        }
      },
      "unsecretedVariables": {
        "BUCKET_NAME": {
          "productionEnv": "your bucket name",
          "noProductionEnv": "your bucket name"
        },
        "INGESTION_RELOADER_CLIENT_ID": {
          "productionEnv": "ingestion-reloader",
          "noProductionEnv": "ingestion-reloader"
        },
        "INGESTION_STORER_CLIENT_ID": {
          "productionEnv": "ingestion-storer",
          "noProductionEnv": "ingestion-storer"
        },
        "KAFKA_STORER_GROUP_ID": {
          "productionEnv": "change with your ingestion storer consumer group",
          "noProductionEnv": "change with your ingestion storer consumer group"
        },
        "BSS_EVENTS_TOPIC": {
          "productionEnv": "change with your bss events topic",
          "noProductionEnv": "change with your bss events topic"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-08-31T16:13:56.276Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "bucket-storage-support-s3.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "This plugin exposes a bundle of web components, designed by Mia Care, that can be used within your Backoffice.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/care-kit/overview"
    },
    "itemId": "care-kit",
    "name": "Care Kit",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/mia-care-web-components",
    "resources": {
      "services": {
        "care-kit": {
          "type": "plugin",
          "name": "care-kit",
          "description": "This plugin exposes a bundle of web components, designed by Mia Care, that can be used within your Backoffice.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/mia-care-web-components:2.9.3",
          "componentId": "care-kit",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "readiness": {
              "path": "/mia-care-web-components.esm.js"
            },
            "liveness": {
              "path": "/mia-care-web-components.esm.js"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.9.3",
      "releaseNote": "See https://docs.mia-platform.eu/docs/runtime_suite/care-kit/changelog#293"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.529Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "care-kit_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "This plugin exposes a bundle of web components, designed by Mia Care, that can be used within your Backoffice.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/care-kit/overview"
    },
    "itemId": "care-kit",
    "name": "Care Kit",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/mia-care-web-components",
    "resources": {
      "services": {
        "care-kit": {
          "type": "plugin",
          "name": "care-kit",
          "description": "This plugin exposes a bundle of web components, designed by Mia Care, that can be used within your Backoffice.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/mia-care-web-components:2.8.2",
          "componentId": "care-kit",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "readiness": {
              "path": "/mia-care-web-components.esm.js"
            },
            "liveness": {
              "path": "/mia-care-web-components.esm.js"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.8.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.016Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "care-kit_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "This plugin exposes a bundle of web components, designed by Mia Care, that can be used within your Backoffice.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/care-kit/overview"
    },
    "itemId": "care-kit",
    "name": "Care Kit",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/mia-care-web-components",
    "resources": {
      "services": {
        "care-kit": {
          "type": "plugin",
          "name": "care-kit",
          "description": "This plugin exposes a bundle of web components, designed by Mia Care, that can be used within your Backoffice.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/mia-care-web-components:2.8.2",
          "componentId": "care-kit",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "readiness": {
              "path": "/mia-care-web-components.esm.js"
            },
            "liveness": {
              "path": "/mia-care-web-components.esm.js"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-11-11T16:35:31.016Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "care-kit_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Chat Service Backend is a Mia-Platform plugin acting as a proxy between your project's microservices and the Stream Chat APIs, introducing a Token Provider to validate and generate a token for your users.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/chat-service-backend/overview"
    },
    "itemId": "chat-service-backend",
    "name": "Chat Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/chat-service-backend",
    "resources": {
      "services": {
        "chat-service-backend": {
          "type": "plugin",
          "name": "chat-service-backend",
          "description": "The Chat Service Backend is a Mia-Platform plugin acting as a proxy between your project's microservices and the Stream Chat APIs, introducing a Token Provider to validate and generate a token for your users.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/chat-service-backend:1.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "STREAM_API_KEY",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STREAM_API_SECRET",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STREAM_AUTH_TOKEN",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STYLE_CONFIG",
              "value": "/config/styles/style.json",
              "valueType": "plain"
            },
            {
              "name": "EXPIRATION_TOKEN_DURATION",
              "value": "3600",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "chat-service-backend-styles",
              "mountPath": "/config/styles",
              "files": [
                {
                  "name": "style.json",
                  "content": "{\\n  \\"web\\": {\\n    \\"errors\\": {\\n      \\"title\\": \\"Chat not available\\",\\n      \\"message\\": \\"You currently don't have any available chat. Please come back later to start messaging.\\"\\n    },\\n    \\"stylesheet\\": {\\n      \\"--white-snow\\": \\"#F0F0EC\\"\\n    },\\n    \\"options\\": {\\n      \\"showUnreadBadge\\": true,\\n      \\"showLastMessageTimestamp\\": true,\\n      \\"disableEmojiPicker\\": true,\\n      \\"theme\\": {\\n        \\"--white-snow\\": \\"#F0F0EC\\"\\n      }\\n    }\\n  }\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.2",
      "releaseNote": "Update Node.js to v20"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.589Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "chat-service-backend_logo_2025-04-23.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Chat Service Backend is a Mia-Platform plugin acting as a proxy between your project's microservices and the Stream Chat APIs, introducing a Token Provider to validate and generate a token for your users.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/chat-service-backend/overview"
    },
    "itemId": "chat-service-backend",
    "name": "Chat Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/chat-service-backend",
    "resources": {
      "services": {
        "chat-service-backend": {
          "type": "plugin",
          "name": "chat-service-backend",
          "description": "The Chat Service Backend is a Mia-Platform plugin acting as a proxy between your project's microservices and the Stream Chat APIs, introducing a Token Provider to validate and generate a token for your users.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/chat-service-backend:1.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "STREAM_API_KEY",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STREAM_API_SECRET",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STREAM_AUTH_TOKEN",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STYLE_CONFIG",
              "value": "/config/styles/style.json",
              "valueType": "plain"
            },
            {
              "name": "EXPIRATION_TOKEN_DURATION",
              "value": "3600",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "chat-service-backend-styles",
              "mountPath": "/config/styles",
              "files": [
                {
                  "name": "style.json",
                  "content": "{\\n  \\"web\\": {\\n    \\"errors\\": {\\n      \\"title\\": \\"Chat not available\\",\\n      \\"message\\": \\"You currently don't have any available chat. Please come back later to start messaging.\\"\\n    },\\n    \\"stylesheet\\": {\\n      \\"--white-snow\\": \\"#F0F0EC\\"\\n    },\\n    \\"options\\": {\\n      \\"showUnreadBadge\\": true,\\n      \\"showLastMessageTimestamp\\": true,\\n      \\"disableEmojiPicker\\": true,\\n      \\"theme\\": {\\n        \\"--white-snow\\": \\"#F0F0EC\\"\\n      }\\n    }\\n  }\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.015Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "chat-service-backend_logo_2025-04-23.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Chat Service Backend is a Mia-Platform plugin acting as a proxy between your project's microservices and the Stream Chat APIs, introducing a Token Provider to validate and generate a token for your users.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/chat-service-backend/overview"
    },
    "itemId": "chat-service-backend",
    "name": "Chat Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/chat-service-backend",
    "resources": {
      "services": {
        "chat-service-backend": {
          "type": "plugin",
          "name": "chat-service-backend",
          "description": "The Chat Service Backend is a Mia-Platform plugin acting as a proxy between your project's microservices and the Stream Chat APIs, introducing a Token Provider to validate and generate a token for your users.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/chat-service-backend:1.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "STREAM_API_KEY",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STREAM_API_SECRET",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STREAM_AUTH_TOKEN",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "STYLE_CONFIG",
              "value": "/config/styles/style.json",
              "valueType": "plain"
            },
            {
              "name": "EXPIRATION_TOKEN_DURATION",
              "value": "3600",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "chat-service-backend-styles",
              "mountPath": "/config/styles",
              "files": [
                {
                  "name": "style.json",
                  "content": "{\\n  \\"web\\": {\\n    \\"errors\\": {\\n      \\"title\\": \\"Chat not available\\",\\n      \\"message\\": \\"You currently don't have any available chat. Please come back later to start messaging.\\"\\n    },\\n    \\"stylesheet\\": {\\n      \\"--white-snow\\": \\"#F0F0EC\\"\\n    },\\n    \\"options\\": {\\n      \\"showUnreadBadge\\": true,\\n      \\"showLastMessageTimestamp\\": true,\\n      \\"disableEmojiPicker\\": true,\\n      \\"theme\\": {\\n        \\"--white-snow\\": \\"#F0F0EC\\"\\n      }\\n    }\\n  }\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-10-27T14:30:41.971Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "chat-service-backend_logo_2025-04-23.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Chat Service Frontend is a Mia-Platform plugin that uses the Stream React Library to provide a custom micro-frontend to chat with users registered on a target application.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/chat-service-frontend/overview"
    },
    "itemId": "chat-service-frontend",
    "name": "Chat Service Frontend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/chat-service-frontend",
    "resources": {
      "services": {
        "chat-service-frontend": {
          "type": "plugin",
          "name": "chat-service-frontend",
          "description": "The Chat Service Frontend is a Mia-Platform plugin that uses the Stream React Library to provide a custom micro-frontend to chat with users registered on a target application.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/chat-service-frontend:1.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.015Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "chat-service-frontend_logo_2025-04-23.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Chat Service Frontend is a Mia-Platform plugin that uses the Stream React Library to provide a custom micro-frontend to chat with users registered on a target application.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/chat-service-frontend/overview"
    },
    "itemId": "chat-service-frontend",
    "name": "Chat Service Frontend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/chat-service-frontend",
    "resources": {
      "services": {
        "chat-service-frontend": {
          "type": "plugin",
          "name": "chat-service-frontend",
          "description": "The Chat Service Frontend is a Mia-Platform plugin that uses the Stream React Library to provide a custom micro-frontend to chat with users registered on a target application.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/chat-service-frontend:1.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-10-27T15:45:58.211Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "chat-service-frontend_logo_2025-04-23.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/client-credentials/configuration"
    },
    "itemId": "client-credentials",
    "name": "Client Credentials",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/client-credentials",
    "resources": {
      "services": {
        "client-credentials": {
          "type": "plugin",
          "name": "client-credentials",
          "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
          "dockerImage": "nexus.mia-platform.eu/core/client-credentials:3.4.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_CLIENT_BASE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_CLIENT_BASE_URL",
              "description": "Base URL to the crud collection containing the client information.",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_ID_HASH_SALT",
              "value": "CHANGE_WITH_YOUR_CLIENT_ID_HASH_SALT",
              "valueType": "plain"
            },
            {
              "name": "CREDENTIALS_MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CREDENTIALS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_DB_NAME",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_FILE_PATH",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_ID",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_ID",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_ISSUER",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_ISSUER",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_EXPIRES_IN",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_EXPIRES_IN",
              "description": "Expiration time for the generated jwt, in seconds",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_KEY_PASSWORD",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SECRET_KEY_PSW",
              "valueType": "plain"
            },
            {
              "name": "ACCEPTED_AUDIENCES",
              "value": "CHANGE_WITH_YOUR_ACCEPTED_AUDIENCES",
              "description": "Audience accepted by the service, if included in JWT aud claim",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "description": "Comma separated list of hosts with port",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "description": "Can be normal or sentinel depending on your redis installation",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.0",
      "releaseNote": "Added:\\n\\n- add support to tls connection to redis\\n\\n- add support to redis sentinel mode"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.871Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "client-credentials_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/client-credentials/configuration"
    },
    "itemId": "client-credentials",
    "name": "Client Credentials",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/client-credentials",
    "resources": {
      "services": {
        "client-credentials": {
          "type": "plugin",
          "name": "client-credentials",
          "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
          "dockerImage": "nexus.mia-platform.eu/core/client-credentials:3.3.3",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_CLIENT_BASE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_CLIENT_BASE_URL",
              "description": "Base URL to the crud collection containing the client information.",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_ID_HASH_SALT",
              "value": "CHANGE_WITH_YOUR_CLIENT_ID_HASH_SALT",
              "valueType": "plain"
            },
            {
              "name": "CREDENTIALS_MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CREDENTIALS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_DB_NAME",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_FILE_PATH",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_ID",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_ID",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_ISSUER",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_ISSUER",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_EXPIRES_IN",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_EXPIRES_IN",
              "description": "Expiration time for the generated jwt, in seconds",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_KEY_PASSWORD",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SECRET_KEY_PSW",
              "valueType": "plain"
            },
            {
              "name": "ACCEPTED_AUDIENCES",
              "value": "CHANGE_WITH_YOUR_ACCEPTED_AUDIENCES",
              "description": "Audience accepted by the service, if included in JWT aud claim",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "description": "Comma separated list of hosts with port",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "description": "Can be normal or sentinel depending on your redis installation",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.3",
      "releaseNote": "Updated:\\n\\n- transparently read 422 or 409 to support CRUD Service v7 new status code on duplicated entries"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.888Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "client-credentials_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/client-credentials/configuration"
    },
    "itemId": "client-credentials",
    "name": "Client Credentials",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/client-credentials",
    "resources": {
      "services": {
        "client-credentials": {
          "type": "plugin",
          "name": "client-credentials",
          "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
          "dockerImage": "nexus.mia-platform.eu/core/client-credentials:3.3.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_CLIENT_BASE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_CLIENT_BASE_URL",
              "description": "Base URL to the crud collection containing the client information.",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_ID_HASH_SALT",
              "value": "CHANGE_WITH_YOUR_CLIENT_ID_HASH_SALT",
              "valueType": "plain"
            },
            {
              "name": "CREDENTIALS_MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CREDENTIALS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_DB_NAME",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_FILE_PATH",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_ID",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_ID",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_ISSUER",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_ISSUER",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_EXPIRES_IN",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_EXPIRES_IN",
              "description": "Expiration time for the generated jwt, in seconds",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_KEY_PASSWORD",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SECRET_KEY_PSW",
              "valueType": "plain"
            },
            {
              "name": "ACCEPTED_AUDIENCES",
              "value": "CHANGE_WITH_YOUR_ACCEPTED_AUDIENCES",
              "description": "Audience accepted by the service, if included in JWT aud claim",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "description": "Comma separated list of hosts with port",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "description": "Can be normal or sentinel depending on your redis installation",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.2",
      "releaseNote": "Added:\\n\\n- return specific error if the created client already exists"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.870Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "client-credentials_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/client-credentials/configuration"
    },
    "itemId": "client-credentials",
    "name": "Client Credentials",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/client-credentials",
    "resources": {
      "services": {
        "client-credentials": {
          "type": "plugin",
          "name": "client-credentials",
          "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
          "dockerImage": "nexus.mia-platform.eu/core/client-credentials:3.3.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_CLIENT_BASE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_CLIENT_BASE_URL",
              "description": "Base URL to the crud collection containing the client information.",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_ID_HASH_SALT",
              "value": "CHANGE_WITH_YOUR_CLIENT_ID_HASH_SALT",
              "valueType": "plain"
            },
            {
              "name": "CREDENTIALS_MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CREDENTIALS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_DB_NAME",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_FILE_PATH",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_ID",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_ID",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_ISSUER",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_ISSUER",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_EXPIRES_IN",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_EXPIRES_IN",
              "description": "Expiration time for the generated jwt, in seconds",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_KEY_PASSWORD",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SECRET_KEY_PSW",
              "valueType": "plain"
            },
            {
              "name": "ACCEPTED_AUDIENCES",
              "value": "CHANGE_WITH_YOUR_ACCEPTED_AUDIENCES",
              "description": "Audience accepted by the service, if included in JWT aud claim",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "description": "Comma separated list of hosts with port",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "description": "Can be normal or sentinel depending on your redis installation",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.1",
      "releaseNote": "Added:\\n\\n- set \`lastLogin\` field when a service account receives a new access token"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.868Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "client-credentials_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/client-credentials/configuration"
    },
    "itemId": "client-credentials",
    "name": "Client Credentials",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/client-credentials",
    "resources": {
      "services": {
        "client-credentials": {
          "type": "plugin",
          "name": "client-credentials",
          "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
          "dockerImage": "nexus.mia-platform.eu/core/client-credentials:3.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_CLIENT_BASE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_CLIENT_BASE_URL",
              "description": "Base URL to the crud collection containing the client information.",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_ID_HASH_SALT",
              "value": "CHANGE_WITH_YOUR_CLIENT_ID_HASH_SALT",
              "valueType": "plain"
            },
            {
              "name": "CREDENTIALS_MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CREDENTIALS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_DB_NAME",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_FILE_PATH",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_ID",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_ID",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_ISSUER",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_ISSUER",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_EXPIRES_IN",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_EXPIRES_IN",
              "description": "Expiration time for the generated jwt, in seconds",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_KEY_PASSWORD",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SECRET_KEY_PSW",
              "valueType": "plain"
            },
            {
              "name": "ACCEPTED_AUDIENCES",
              "value": "CHANGE_WITH_YOUR_ACCEPTED_AUDIENCES",
              "description": "Audience accepted by the service, if included in JWT aud claim",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "description": "Comma separated list of hosts with port",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "description": "Can be normal or sentinel depending on your redis installation",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.0",
      "releaseNote": "Added:\\n\\n- redis username and password login support for redis mode normal (authentication with redis sentinel is not supported)"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.868Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "client-credentials_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/client-credentials/configuration"
    },
    "itemId": "client-credentials",
    "name": "Client Credentials",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/client-credentials",
    "resources": {
      "services": {
        "client-credentials": {
          "type": "plugin",
          "name": "client-credentials",
          "description": "Use this plugin to expose API to perform OAuth2 compliant client credential flows with third party providers.",
          "dockerImage": "nexus.mia-platform.eu/core/client-credentials:3.4.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_CLIENT_BASE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_CLIENT_BASE_URL",
              "description": "Base URL to the crud collection containing the client information.",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_ID_HASH_SALT",
              "value": "CHANGE_WITH_YOUR_CLIENT_ID_HASH_SALT",
              "valueType": "plain"
            },
            {
              "name": "CREDENTIALS_MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CREDENTIALS_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_CREDENTIALS_DB_NAME",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_FILE_PATH",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_RSA_KEY_ID",
              "value": "CHANGE_WITH_YOUR_SECRET_RSA_KEY_ID",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_ISSUER",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_ISSUER",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_EXPIRES_IN",
              "value": "CHANGE_WITH_YOUR_MIA_JWT_EXPIRES_IN",
              "description": "Expiration time for the generated jwt, in seconds",
              "valueType": "plain"
            },
            {
              "name": "PRIVATE_KEY_PASSWORD",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SECRET_KEY_PSW",
              "valueType": "plain"
            },
            {
              "name": "ACCEPTED_AUDIENCES",
              "value": "CHANGE_WITH_YOUR_ACCEPTED_AUDIENCES",
              "description": "Audience accepted by the service, if included in JWT aud claim",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "CHANGE_WITH_YOUR_REDIS_HOSTS",
              "description": "Comma separated list of hosts with port",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "description": "Can be normal or sentinel depending on your redis installation",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "client-credentials_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "rust",
    "description": "Example of Microservice with Oat++ Web Framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/cpp-oatpp-hello-world-microservice-example/master/README.md"
    },
    "itemId": "cpp-oatpp-hello-world",
    "name": "Cpp Oatpp Hello World",
    "resources": {
      "services": {
        "cpp-oatpp-hello-world": {
          "type": "example",
          "name": "cpp-oatpp-hello-world",
          "description": "Example of Microservice with Oat++ Web Framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/cpp-oatpp-hello-world-microservice-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fcpp-aotpp-hello-world.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.092Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "cpp-oatpp-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "rust",
    "description": "Example of Microservice with Oat++ Web Framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/cpp-oatpp-hello-world-microservice-example/master/README.md"
    },
    "itemId": "cpp-oatpp-hello-world",
    "name": "Cpp Oatpp Hello World",
    "resources": {
      "services": {
        "cpp-oatpp-hello-world": {
          "type": "example",
          "name": "cpp-oatpp-hello-world",
          "description": "Example of Microservice with Oat++ Web Framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/cpp-oatpp-hello-world-microservice-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fcpp-aotpp-hello-world.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-05-05T19:00:15.908Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "cpp-oatpp-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "This service can be configured in order to execute custom scripts with crontab-like configuration.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/cron-scheduler/overview"
    },
    "itemId": "cron-scheduler",
    "name": "Cron Scheduler",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/cron-scheduler",
    "resources": {
      "services": {
        "cron-scheduler": {
          "type": "plugin",
          "name": "cron-scheduler",
          "description": "This service can be configured in order to execute custom scripts with crontab-like configuration.",
          "dockerImage": "nexus.mia-platform.eu/core/cron-scheduler:3.4.7",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "CHANGE_WITH_YOUR_CONFIGURATION_PATH",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.032Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "cron-scheduler-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "This service can be configured in order to execute custom scripts with crontab-like configuration.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/cron-scheduler/overview"
    },
    "itemId": "cron-scheduler",
    "name": "Cron Scheduler",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/cron-scheduler",
    "resources": {
      "services": {
        "cron-scheduler": {
          "type": "plugin",
          "name": "cron-scheduler",
          "description": "This service can be configured in order to execute custom scripts with crontab-like configuration.",
          "dockerImage": "nexus.mia-platform.eu/core/cron-scheduler:3.4.7",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "CHANGE_WITH_YOUR_CONFIGURATION_PATH",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "cron-scheduler-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD MSSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a MSSQL database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-sql/overview"
    },
    "itemId": "crud-mssql",
    "name": "CRUD MSSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-mssql": {
          "type": "plugin",
          "name": "crud-mssql",
          "description": "The CRUD MSSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a MSSQL database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-mssql:0.1.2",
          "componentId": "crud-mssql",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-mssql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.2",
      "releaseNote": "Fixed file-upload"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.913Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-mssql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD MSSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a MSSQL database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-postgresql/overview"
    },
    "itemId": "crud-mssql",
    "name": "CRUD MSSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-mssql": {
          "type": "plugin",
          "name": "crud-mssql",
          "description": "The CRUD MSSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a MSSQL database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-mssql:0.1.0",
          "componentId": "crud-mssql",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-mssql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.027Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-mssql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD MSSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a MSSQL database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-postgresql/overview"
    },
    "itemId": "crud-mssql",
    "name": "CRUD MSSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-mssql": {
          "type": "plugin",
          "name": "crud-mssql",
          "description": "The CRUD MSSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a MSSQL database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-mssql:0.1.0",
          "componentId": "crud-mssql",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-mssql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-21T14:43:22.336Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-mssql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD Oracle is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a Oracle database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-sql/overview"
    },
    "itemId": "crud-oracle",
    "name": "CRUD Oracle DB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-oracle-db": {
          "type": "plugin",
          "name": "crud-oracle-db",
          "description": "The CRUD Oracle is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a Oracle database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-oraclejdbc:0.0.2",
          "componentId": "crud-oracle",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-oracle-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.0.2",
      "releaseNote": "First version after the Oracle JDBC driver became free licensed"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.912Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-oracle.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD PostgreSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a PostgreSQL database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-sql/overview"
    },
    "itemId": "crud-postgresql",
    "name": "CRUD PostgreSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-postgresql": {
          "type": "plugin",
          "name": "crud-postgresql",
          "description": "The CRUD PostgreSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a PostgreSQL database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-postgresql:0.1.2",
          "componentId": "crud-postgresql",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-postgresql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.2",
      "releaseNote": "Fixed file-upload"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.873Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-postgresql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD PostgreSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a PostgreSQL database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-postgresql/overview"
    },
    "itemId": "crud-postgresql",
    "name": "CRUD PostgreSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-postgresql": {
          "type": "plugin",
          "name": "crud-postgresql",
          "description": "The CRUD PostgreSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a PostgreSQL database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-postgresql:0.1.0",
          "componentId": "crud-postgresql",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-postgresql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.014Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-postgresql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "The CRUD PostgreSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a PostgreSQL database in an easy, scalable, and secure way.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-postgresql/overview"
    },
    "itemId": "crud-postgresql",
    "name": "CRUD PostgreSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/crud-sql",
    "resources": {
      "services": {
        "crud-postgresql": {
          "type": "plugin",
          "name": "crud-postgresql",
          "description": "The CRUD PostgreSQL is a Mia-Platform plugin that abstracts SQL tables allowing developers to expose CRUD APIs over a PostgreSQL database in an easy, scalable, and secure way.",
          "dockerImage": "nexus.mia-platform.eu/mia-platform/crud-sql-postgresql:0.1.0",
          "componentId": "crud-postgresql",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-postgresql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-21T16:06:21.499Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-postgresql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.3",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.2.3",
      "releaseNote": "## What's Changed\\n* changed: CRUD Service can now be employed without assigning \`dropCollection\` privilege to the configured Mongo connection string\\n* fix: prevent a potential memory leak to happen when calling \`/export\` endpoint\\n* fix: corrected typo that prevented \`MONGODB_MAX_IDLE_TIME_MS\` environment variable value to be properly set"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.025Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.2.2",
      "releaseNote": "## What's Changed\\n* ci: introduce SBOM generation for service image\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.664Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.1",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.2.1",
      "releaseNote": "## What's Changed\\n* fix: improve query parsing in https://github.com/mia-platform/crud-service/pull/391\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-24T16:13:01.050Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.0",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.2.0",
      "releaseNote": "## What's Changed\\n* fix: support array of object ids and $size operator by @danibix95 in https://github.com/mia-platform/crud-service/pull/376\\n* fix(indexes): terminate the service logging the error when index creation fails by @danibix95 in https://github.com/mia-platform/crud-service/pull/384\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.830Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.1.1",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.1.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.014Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:6.10.4",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.10.4",
      "releaseNote": "## What's Changed\\n* ci: introduce SBOM generation for service image\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.664Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/crud-service/overview_and_usage"
    },
    "itemId": "crud-service",
    "name": "CRUD Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/crud-service",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.1.1",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "This is a template to help you get started using the SQL CRUD service. You can provide a Data Source to connect to your preferred SQL database using the Mia-Platform SQL CRUD library",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_templates/crud-sql-template/overview"
    },
    "itemId": "crud-sql-template",
    "name": "CRUD SQL Template",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform-marketplace/crud-sql-template/tree/0.1.0",
    "resources": {
      "services": {
        "crud-sql-template": {
          "type": "template",
          "name": "crud-sql-template",
          "description": "This is a template to help you get started using the SQL CRUD service. You can provide a Data Source to connect to your preferred SQL database using the Mia-Platform SQL CRUD library",
          "archiveUrl": "https://github.com/mia-platform-marketplace/crud-sql-template/archive/0.1.0.tar.gz",
          "componentId": "crud-sql-template",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-sql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.012Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-sql-template_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "This is a template to help you get started using the SQL CRUD service. You can provide a Data Source to connect to your preferred SQL database using the Mia-Platform SQL CRUD library",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_templates/crud-sql-template/overview"
    },
    "itemId": "crud-sql-template",
    "name": "CRUD SQL Template",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform-marketplace/crud-sql-template/tree/0.1.0",
    "resources": {
      "services": {
        "crud-sql-template": {
          "type": "template",
          "name": "crud-sql-template",
          "description": "This is a template to help you get started using the SQL CRUD service. You can provide a Data Source to connect to your preferred SQL database using the Mia-Platform SQL CRUD library",
          "archiveUrl": "https://github.com/mia-platform-marketplace/crud-sql-template/archive/0.1.0.tar.gz",
          "componentId": "crud-sql-template",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "TABLE_DEFINITION_FOLDER"
            }
          },
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "DB_URL",
              "value": "{{SQL_DB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "TABLE_DEFINITION_FOLDER",
              "value": "/home/node/app/tables-configuration",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "300Mi"
            },
            "cpuLimits": {
              "max": "500m",
              "min": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "crud-sql-tables",
              "mountPath": "/home/node/app/tables-configuration",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "tables-configuration"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-22T13:14:58.402Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "crud-sql-template_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "This application uses the CSV Connector microservice to fetch data from CSV files and deliver it with validation to the Fast Data. It comes with all the microservices needed, namely the Files Service and the CRUD Service",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/csv-connector/configuration"
    },
    "itemId": "csv-connector",
    "name": "CSV Connector",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/csv-connector-application",
    "resources": {
      "services": {
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "70Mi"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:{{FILES_SERVICE_VERSION}}",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            },
            {
              "name": "PROJECT_HOSTNAME",
              "value": "CHANGE_WITH_YOUR_PROJECT_HOSTNAME",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "csv-connector": {
          "type": "plugin",
          "name": "csv-connector",
          "description": "Fetch data from CSV files and deliver it with validation to the Fast Data.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/source/csv-connector:{{CSV_CONNECTOR_VERSION}}",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "FILES_NAMES_REGEXES",
              "value": "CHANGE_WITH_A_CUSTOM_REGEX",
              "valueType": "plain"
            },
            {
              "name": "SCHEMA_FOLDER",
              "value": "/app/config/schema/CHANGE_WITH_YOUR_CUSTOM_SCHEMA_FOLDER_PATH",
              "valueType": "plain"
            },
            {
              "name": "LAUNCH_MECHANISM",
              "value": "polling",
              "valueType": "plain"
            },
            {
              "name": "SCHEDULING",
              "value": "CHANGE_WITH_YOUR_CUSTOM_SCHEDULING",
              "valueType": "plain"
            },
            {
              "name": "FILES_SERVICE",
              "value": "http://files-service/",
              "valueType": "plain"
            },
            {
              "name": "INPUT_FILES_SCOPE",
              "value": "input-csv-connector",
              "valueType": "plain"
            },
            {
              "name": "OUTPUT_FILES_SCOPE",
              "value": "output-csv-connector",
              "valueType": "plain"
            },
            {
              "name": "TOPIC_MAP",
              "value": "CHANGE_WITH_YOUR_CUSTOM_TOPIC_MAP",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "{{HTTP_PORT}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_CUSTOM_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "{{KAFKA_SASL_MECHANISM}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/-/health/ready",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "liveness": {
              "path": "/-/health/live",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "collections": {
        "input_files": {
          "id": "input_files",
          "description": "Collection of input_files for the CSV Connector input scope",
          "defaultName": "input_files",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "description": " original file name",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "file",
              "description": "unique name of the file that should be used to retrieve it using this service",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "size",
              "description": "size in bytes of the uploaded file",
              "type": "number",
              "required": true,
              "nullable": false
            },
            {
              "name": "location",
              "description": "the URL that can be used to download the file using the same service that performed the upload.",
              "type": "string",
              "required": true,
              "nullable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            },
            {
              "name": "file",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "file",
                  "order": 1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/input-csv-connector",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "output_files": {
          "id": "output_files",
          "description": "Collection of output_files for the CSV Connector output scope",
          "defaultName": "output_files",
          "type": "collection",
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "description": " original file name",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "file",
              "description": "unique name of the file that should be used to retrieve it using this service",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "size",
              "description": "size in bytes of the uploaded file",
              "type": "number",
              "required": true,
              "nullable": false
            },
            {
              "name": "location",
              "description": "the URL that can be used to download the file using the same service that performed the upload.",
              "type": "string",
              "required": true,
              "nullable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            },
            {
              "name": "file",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "file",
                  "order": 1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/output-csv-connector",
              "defaultState": "PUBLIC"
            }
          ]
        }
      },
      "unsecretedVariables": {
        "FILES_SERVICE_VERSION": {
          "productionEnv": "2.7.1",
          "noProductionEnv": "latest"
        },
        "CSV_CONNECTOR_VERSION": {
          "productionEnv": "1.0.0",
          "noProductionEnv": "latest"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-04-13T16:06:00.631Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "csv-connector-application-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Fetch data from CSV files and deliver it with validation to the Fast Data.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/csv-connector/configuration"
    },
    "itemId": "csv-connector-plugin",
    "name": "CSV Connector Plugin",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/csv-connector",
    "resources": {
      "services": {
        "csv-connector-plugin": {
          "type": "plugin",
          "name": "csv-connector-plugin",
          "description": "Fetch data from CSV files and deliver it with validation to the Fast Data.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/source/csv-connector:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "FILES_NAMES_REGEXES",
              "value": "CHANGE_WITH_YOUR_CUSTOM_REGEX",
              "valueType": "plain"
            },
            {
              "name": "SCHEMA_FOLDER",
              "value": "/app/config/schema/CHANGE_WITH_YOUR_CUSTOM_SCHEMA_FOLDER_PATH",
              "valueType": "plain"
            },
            {
              "name": "LAUNCH_MECHANISM",
              "value": "polling",
              "valueType": "plain"
            },
            {
              "name": "SCHEDULING",
              "value": "CHANGE_WITH_YOUR_CUSTOM_SCHEDULING",
              "valueType": "plain"
            },
            {
              "name": "FILES_SERVICE",
              "value": "http://files-service/",
              "valueType": "plain"
            },
            {
              "name": "INPUT_FILES_SCOPE",
              "value": "CHANGE_WITH_YOUR_CUSTOM_INPUT_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "OUTPUT_FILES_SCOPE",
              "value": "CHANGE_WITH_YOUR_CUSTOM_OUTPUT_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "TOPIC_MAP",
              "value": "CHANGE_WITH_YOUR_CUSTOM_TOPIC_MAP",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "{{HTTP_PORT}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_CUSTOM_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "{{KAFKA_SASL_MECHANISM}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/-/health/ready",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "liveness": {
              "path": "/-/health/live",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.021Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "csv-connector-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Fetch data from CSV files and deliver it with validation to the Fast Data.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/csv-connector/configuration"
    },
    "itemId": "csv-connector-plugin",
    "name": "CSV Connector Plugin",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/csv-connector",
    "resources": {
      "services": {
        "csv-connector-plugin": {
          "type": "plugin",
          "name": "csv-connector-plugin",
          "description": "Fetch data from CSV files and deliver it with validation to the Fast Data.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/source/csv-connector:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "FILES_NAMES_REGEXES",
              "value": "CHANGE_WITH_YOUR_CUSTOM_REGEX",
              "valueType": "plain"
            },
            {
              "name": "SCHEMA_FOLDER",
              "value": "/app/config/schema/CHANGE_WITH_YOUR_CUSTOM_SCHEMA_FOLDER_PATH",
              "valueType": "plain"
            },
            {
              "name": "LAUNCH_MECHANISM",
              "value": "polling",
              "valueType": "plain"
            },
            {
              "name": "SCHEDULING",
              "value": "CHANGE_WITH_YOUR_CUSTOM_SCHEDULING",
              "valueType": "plain"
            },
            {
              "name": "FILES_SERVICE",
              "value": "http://files-service/",
              "valueType": "plain"
            },
            {
              "name": "INPUT_FILES_SCOPE",
              "value": "CHANGE_WITH_YOUR_CUSTOM_INPUT_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "OUTPUT_FILES_SCOPE",
              "value": "CHANGE_WITH_YOUR_CUSTOM_OUTPUT_SCOPE",
              "valueType": "plain"
            },
            {
              "name": "TOPIC_MAP",
              "value": "CHANGE_WITH_YOUR_CUSTOM_TOPIC_MAP",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "{{HTTP_PORT}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_CUSTOM_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "{{KAFKA_SASL_MECHANISM}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultProbes": {
            "readiness": {
              "path": "/-/health/ready",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "liveness": {
              "path": "/-/health/live",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-04-13T16:06:00.702Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "csv-connector-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "data-catalog",
    "description": "Utilities to fetch metadata from DB-like datasources",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_templates/data-catalog-agent/overview"
    },
    "itemId": "data-catalog",
    "name": "Data Catalog",
    "publishOnMiaDocumentation": false,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/data-catalog",
    "resources": {
      "services": {
        "data-catalog": {
          "type": "template",
          "name": "data-catalog",
          "archiveUrl": "https://git.tools.mia-platform.eu/platform/data-catalog/agent/template/-/archive/v0.6.3/template-v0.6.3.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.881Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-catalog_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "data-catalog",
    "description": "Utilities to fetch metadata from DB-like datasources",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_templates/data-catalog-agent/overview"
    },
    "itemId": "data-catalog",
    "name": "Data Catalog",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/data-catalog",
    "resources": {
      "services": {
        "data-catalog": {
          "type": "template",
          "name": "data-catalog",
          "archiveUrl": "https://git.tools.mia-platform.eu/platform/data-catalog/agent/template/-/archive/v0.6.3/template-v0.6.3.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-15T18:43:24.698Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-catalog_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "data-catalog",
    "description": "Utilities to fetch metadata from DB-like datasources",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_templates/data-catalog-agent/overview"
    },
    "itemId": "data-catalog-agent",
    "name": "Data Catalog Agent",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/data-catalog-agent",
    "resources": {
      "services": {
        "data-catalog-agent": {
          "type": "template",
          "name": "data-catalog-agent",
          "archiveUrl": "https://git.tools.mia-platform.eu/platform/data-catalog/agent/template/-/archive/v0.6.4/template-v0.6.4.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.878Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-catalog-agent_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "data-catalog",
    "description": "Utilities to fetch metadata from DB-like datasources",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_templates/data-catalog-agent/overview"
    },
    "itemId": "data-catalog-agent",
    "name": "Data Catalog Agent",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/data-catalog-agent",
    "resources": {
      "services": {
        "data-catalog-agent": {
          "type": "template",
          "name": "data-catalog-agent",
          "archiveUrl": "https://git.tools.mia-platform.eu/platform/data-catalog/agent/template/-/archive/v0.6.4/template-v0.6.4.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.826Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-catalog-agent_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "data-catalog",
    "description": "This application enable releasing Data Catalog components with ease",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/data-catalog/overview"
    },
    "itemId": "data-catalog-application",
    "name": "Data Catalog",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/data-catalog-application",
    "resources": {
      "collections": {
        "users": {
          "defaultName": "users",
          "description": "Collection of users of Data Fabric solution",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "groups",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "username",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "email",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "providerId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "providerUserId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "realm",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "metadata",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "permissions",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            }
          ],
          "id": "users",
          "indexes": [
            {
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ],
              "name": "_id",
              "type": "normal",
              "unique": true
            },
            {
              "fields": [
                {
                  "name": "creatdAt",
                  "order": -1
                }
              ],
              "name": "createdAt",
              "type": "normal",
              "unique": false
            },
            {
              "fields": [
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ],
              "name": "stateIndex",
              "type": "normal",
              "unique": false
            },
            {
              "fields": [
                {
                  "name": "email",
                  "order": 1
                },
                {
                  "name": "name",
                  "order": 1
                },
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ],
              "name": "nameSearch",
              "type": "normal",
              "unique": false
            },
            {
              "fields": [
                {
                  "name": "providerId",
                  "order": 1
                },
                {
                  "name": "providerUserId",
                  "order": 1
                },
                {
                  "name": "realm",
                  "order": 1
                }
              ],
              "name": "upsertSupport",
              "type": "normal",
              "unique": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/users",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/api/connections": {
          "acl": "false",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/api/connections",
          "defaultPathRewrite": "/api/connections",
          "description": "Endpoint /api/connections",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "routes": {
            "DELETE/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/items/:id",
              "path": "/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "GET/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/items",
              "path": "/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/items/:id",
              "path": "/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "PATCH/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/items/:id",
              "path": "/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "POST/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/items",
              "path": "/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "service": "fabric-bff",
          "showInDocumentation": true,
          "tags": [
            "fabric-bff"
          ],
          "type": "custom"
        },
        "/api/data-catalog": {
          "acl": "false",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/api/data-catalog",
          "defaultPathRewrite": "/api/data-catalog",
          "description": "Endpoint /api/data-catalog",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "routes": {
            "DELETE/columns/:dataset-id/:field-name/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/columns/:dataset-id/:field-name/custom-properties/:name",
              "path": "/columns/:dataset-id/:field-name/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "DELETE/metadata-registry/items/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/metadata-registry/items/:name",
              "path": "/metadata-registry/items/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "DELETE/sors/:dataset-id/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/sors/:dataset-id/custom-properties/:name",
              "path": "/sors/:dataset-id/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "DELETE/tables/:dataset-id/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/tables/:dataset-id/custom-properties/:name",
              "path": "/tables/:dataset-id/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "GET/assets/export": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/assets/export",
              "path": "/assets/export",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "rateLimit": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/assets/search": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/assets/search",
              "path": "/assets/search",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/assets/search-parents": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/assets/search-parents",
              "path": "/assets/search-parents",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/bulk-actions": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:bulk-action\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/bulk-actions",
              "path": "/bulk-actions",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/columns/:dataset-id/:field-name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/columns/:dataset-id/:field-name",
              "path": "/columns/:dataset-id/:field-name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/metadata-registry/count": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/metadata-registry/count",
              "path": "/metadata-registry/count",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/metadata-registry/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/metadata-registry/items",
              "path": "/metadata-registry/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/metadata-registry/items/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/metadata-registry/items/:name",
              "path": "/metadata-registry/items/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/metadata-registry/search": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/metadata-registry/search",
              "path": "/metadata-registry/search",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/sors/:dataset-id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/sors/:dataset-id",
              "path": "/sors/:dataset-id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/tables/:dataset-id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/tables/:dataset-id",
              "path": "/tables/:dataset-id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/tags/count": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/tags/count",
              "path": "/tags/count",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/tags/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/tags/items",
              "path": "/tags/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/tags/search": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/tags/search",
              "path": "/tags/search",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "HEAD/bulk-actions": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:bulk-action\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "HEAD/bulk-actions",
              "path": "/bulk-actions",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "HEAD"
            },
            "PATCH/columns/:dataset-id/:field-name/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/columns/:dataset-id/:field-name/custom-properties/:name",
              "path": "/columns/:dataset-id/:field-name/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/columns/:dataset-id/:field-name/description": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/columns/:dataset-id/:field-name/description",
              "path": "/columns/:dataset-id/:field-name/description",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/columns/:dataset-id/:field-name/tags": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/columns/:dataset-id/:field-name/tags",
              "path": "/columns/:dataset-id/:field-name/tags",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/metadata-registry/items/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/metadata-registry/items/:name",
              "path": "/metadata-registry/items/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/sors/:dataset-id/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/sors/:dataset-id/custom-properties/:name",
              "path": "/sors/:dataset-id/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/sors/:dataset-id/description": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/sors/:dataset-id/description",
              "path": "/sors/:dataset-id/description",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/sors/:dataset-id/tags": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/sors/:dataset-id/tags",
              "path": "/sors/:dataset-id/tags",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/tables/:dataset-id/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/tables/:dataset-id/custom-properties/:name",
              "path": "/tables/:dataset-id/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/tables/:dataset-id/description": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/tables/:dataset-id/description",
              "path": "/tables/:dataset-id/description",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/tables/:dataset-id/tags": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/tables/:dataset-id/tags",
              "path": "/tables/:dataset-id/tags",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "POST/assets/export/init": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/assets/export/init",
              "path": "/assets/export/init",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "rateLimit": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/columns/:dataset-id/:field-name/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/columns/:dataset-id/:field-name/custom-properties/:name",
              "path": "/columns/:dataset-id/:field-name/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/metadata-registry/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/metadata-registry/items",
              "path": "/metadata-registry/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/sors/:dataset-id/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/sors/:dataset-id/custom-properties/:name",
              "path": "/sors/:dataset-id/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/tables/:dataset-id/custom-properties/:name": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:metadata-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/tables/:dataset-id/custom-properties/:name",
              "path": "/tables/:dataset-id/custom-properties/:name",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "service": "fabric-bff",
          "showInDocumentation": true,
          "tags": [
            "fabric-bff"
          ],
          "type": "custom"
        },
        "/api/job-runner": {
          "acl": "false",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/api/job-runner",
          "defaultPathRewrite": "/api/job-runner",
          "description": "Endpoint /api/job-runner",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "routes": {
            "GET/agent/drivers": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/agent/drivers",
              "path": "/agent/drivers",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/agent/dsn": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/agent/dsn",
              "path": "/agent/dsn",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/feedback": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/feedback",
              "path": "/feedback",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/items",
              "path": "/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "rateLimit": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/secret-names": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/secret-names",
              "path": "/secret-names",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "HEAD/feedback": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "HEAD/feedback",
              "path": "/feedback",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "HEAD"
            },
            "POST/agent/abort": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/agent/abort",
              "path": "/agent/abort",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/agent/sync": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"admin:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/agent/sync",
              "path": "/agent/sync",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "service": "fabric-bff",
          "showInDocumentation": true,
          "tags": [
            "fabric-bff"
          ],
          "type": "custom"
        },
        "/api/open-lineage": {
          "acl": "false",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/api/open-lineage",
          "defaultPathRewrite": "/api/open-lineage",
          "description": "Endpoint /api/open-lineage",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "routes": {
            "DELETE/datasets/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/datasets/items/:id",
              "path": "/datasets/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "DELETE/facets/storage/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/facets/storage/items/:id",
              "path": "/facets/storage/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "DELETE/jobs/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/jobs/items/:id",
              "path": "/jobs/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "GET/datasets/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/datasets/items/:id",
              "path": "/datasets/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/facets/storage/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/facets/storage/items/:id",
              "path": "/facets/storage/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/jobs/from/dataset/:id/direction/:direction": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/jobs/from/dataset/:id/direction/:direction",
              "path": "/jobs/from/dataset/:id/direction/:direction",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/jobs/from/system/:id/direction/:direction": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:data-assets\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/jobs/from/system/:id/direction/:direction",
              "path": "/jobs/from/system/:id/direction/:direction",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "PATCH/datasets/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/datasets/items/:id",
              "path": "/datasets/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/jobs/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/jobs/items/:id",
              "path": "/jobs/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "POST/datasets/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/datasets/items",
              "path": "/datasets/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/jobs/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:lineage\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/jobs/items",
              "path": "/jobs/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "service": "fabric-bff",
          "showInDocumentation": true,
          "tags": [
            "fabric-bff"
          ],
          "type": "custom"
        },
        "/apps": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/apps",
          "defaultPathRewrite": "/apps",
          "description": "Endpoint /apps",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": true,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/authorize": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/authorize",
          "defaultPathRewrite": "/authorize",
          "description": "Endpoint /authorize",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": true,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/authz/users": {
          "acl": "\\"read:users\\" in permissions || \\"update:users\\" in permissions",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "collectionId": "users",
          "defaultBasePath": "/authz/users",
          "defaultPathRewrite": "/users",
          "description": "Endpoint /authz/users",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "pathName": "/",
          "public": false,
          "routes": {
            "DELETE/": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "DELETE"
            },
            "DELETE/:id": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/:id",
              "path": "/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "DELETE"
            },
            "GET/": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "GET/:id": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/:id",
              "path": "/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "GET/count": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/count",
              "path": "/count",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "GET/export": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": false,
                "value": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/export",
              "path": "/export",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "PATCH/": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "PATCH"
            },
            "PATCH/:id": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/:id",
              "path": "/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "PATCH"
            },
            "PATCH/bulk": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/bulk",
              "path": "/bulk",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "PATCH"
            },
            "POST/": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/:id/state": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/:id/state",
              "path": "/:id/state",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/bulk": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/bulk",
              "path": "/bulk",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/state": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/state",
              "path": "/state",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/upsert-one": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/upsert-one",
              "path": "/upsert-one",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/data-catalog": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/data-catalog",
          "defaultPathRewrite": "/data-catalog",
          "description": "Endpoint /data-catalog",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "secreted": false,
          "service": "data-catalog-fe",
          "showInDocumentation": true,
          "tags": [
            "data-catalog"
          ],
          "type": "custom"
        },
        "/data-catalog/.well-known/openid-configuration": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/data-catalog/.well-known/openid-configuration",
          "defaultPathRewrite": "/data-catalog/openid-configuration.json",
          "description": "Endpoint /data-catalog/.well-known/openid-configuration",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "secreted": false,
          "service": "data-catalog-fe",
          "showInDocumentation": true,
          "tags": [
            "data-catalog"
          ],
          "type": "custom"
        },
        "/data-catalog/configuration": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/data-catalog/configuration",
          "defaultPathRewrite": "/data-catalog/configuration.json",
          "description": "Endpoint /data-catalog/configuration",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "secreted": false,
          "service": "data-catalog-fe",
          "showInDocumentation": true,
          "tags": [
            "data-catalog"
          ],
          "type": "custom"
        },
        "/logout": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/logout",
          "defaultPathRewrite": "/logout",
          "description": "Endpoint /logout",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/mgmt": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/mgmt",
          "defaultPathRewrite": "/public",
          "description": "Endpoint /mgmt",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "routes": {
            "GET/users": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions || \\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/users",
              "path": "/users",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            }
          },
          "secreted": false,
          "service": "micro-lc",
          "showInDocumentation": true,
          "tags": [
            "backoffice"
          ],
          "type": "custom"
        },
        "/micro-lc-configurations": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/micro-lc-configurations",
          "defaultPathRewrite": "/configurations",
          "description": "Endpoint /micro-lc-configurations",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "secreted": false,
          "service": "micro-lc",
          "showInDocumentation": true,
          "tags": [
            "backoffice"
          ],
          "type": "custom"
        },
        "/oauth/token": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/oauth/token",
          "defaultPathRewrite": "/oauth/token",
          "description": "Endpoint /oauth/token",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": true,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/refreshtoken": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/refreshtoken",
          "defaultPathRewrite": "/refreshtoken",
          "description": "Endpoint /refreshtoken",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/ui/job-runner": {
          "acl": "permissions[\\"admin:producers\\"] || permissions[\\"admin:connections\\"]",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/ui/job-runner",
          "defaultPathRewrite": "/ui/job-runner",
          "description": "Endpoint /ui/job-runner",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "secreted": false,
          "service": "grpcui",
          "showInDocumentation": true,
          "tags": [
            "utils"
          ],
          "type": "custom"
        },
        "/userinfo": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/userinfo",
          "defaultPathRewrite": "/userinfo",
          "description": "Endpoint /userinfo",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "public": false,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/web-login": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/web-login",
          "defaultPathRewrite": "/web-login",
          "description": "Endpoint /web-login",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": true,
          "secreted": false,
          "service": "login-site",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        }
      },
      "listeners": {
        "frontend": {
          "description": "Default listener for frontend API",
          "name": "frontend",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          },
          "port": "8080",
          "selectedByDefault": true
        }
      },
      "services": {
        "api-gateway": {
          "args": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "componentId": "api-gateway-envoy",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            },
            {
              "from": 9901,
              "name": "admin",
              "to": 9901
            },
            {
              "from": 50051,
              "name": "grpc",
              "protocol": "TCP",
              "to": 50051
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/envoy",
              "name": "api-gateway-envoy-config",
              "viewAsReadOnly": true
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend",
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend",
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "30Mi"
            }
          },
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "name": "api-gateway",
          "tags": [
            "api"
          ],
          "type": "plugin"
        },
        "authentication-service": {
          "componentId": "authentication-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/configs",
              "name": "authentication-service-config",
              "files": [
                {
                  "content": "{\\n  \\"apps\\": {\\n    \\"{{DC_APP_ID}}\\": {\\n      \\"providers\\": {\\n        \\"{{DC_PROVIDER_ID}}\\": {\\n          \\"order\\": 10,\\n          \\"type\\": \\"okta\\",\\n          \\"label\\": \\"Login with Okta\\",\\n          \\"clientId\\": \\"{{DC_OKTA_CLIENT_ID}}\\",\\n          \\"clientSecret\\": \\"{{DC_OKTA_CLIENT_SECRET}}\\",\\n          \\"baseUrl\\": \\"{{OKTA_BASE_URL}}\\",\\n          \\"authUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/authorize\\",\\n          \\"tokenUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/token\\",\\n          \\"userInfoUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/userinfo\\",\\n          \\"userSettingsURL\\": \\"{{OKTA_BASE_URL}}/enduser/settings\\",\\n          \\"logoutUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/logout\\",\\n          \\"scope\\": [\\n            \\"openid\\",\\n            \\"profile\\",\\n            \\"email\\",\\n            \\"offline_access\\",\\n            \\"groups\\"\\n          ]\\n        }\\n      },\\n      \\"redirectUrl\\": \\"{{DC_BASE_URL}}/web-login/oauth/callback\\",\\n      \\"defaultRedirectUrlOnSuccessfulLogin\\": \\"/\\",\\n      \\"authorizeStateRequired\\": true,\\n      \\"realm\\": \\"data-fabric\\",\\n      \\"isWebsiteApp\\": true,\\n      \\"issuer\\": \\"{{DC_APP_ID}}\\",\\n      \\"defaultGroups\\": []\\n    }\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "{{DC_REDIS_HOSTS}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "http://crud-service/users",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "86400",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "604800",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "{{DC_REDIS_PASSPHRASE}}",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "{{DC_REDIS_SCOPE}}",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "request-id,traceparent,tracestate",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_PRIVATE_KEY_FILE_PATH",
              "value": "/run/secrets/keys/private-key.pem",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_PRIVATE_KEY_KID",
              "value": "{{DC_JWT_CLIENT_KID}}",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGNING_METHOD",
              "value": "RS256",
              "valueType": "plain"
            },
            {
              "name": "EXPIRE_DELTA_PROVIDER_TOKEN_SEC",
              "value": "300",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "30Mi",
              "min": "15Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/run/secrets/keys",
              "name": "authentication-service-secrets"
            }
          ],
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.12.0",
          "name": "authentication-service",
          "tags": [
            "auth"
          ],
          "type": "plugin"
        },
        "authorization-service": {
          "componentId": "authorization-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/configs",
              "name": "authorization-service-config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"/web-login\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/authorize\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/oauth/token\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/logout\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/refreshtoken\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/userinfo\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/apps\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/micro-lc-configurations\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/mgmt\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/mgmt/users\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions || \\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/export\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/:id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/bulk\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/:id/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"false\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/bulk-actions\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:bulk-action\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/assets/search\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/assets/search-parents\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tags/search\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tags/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tags/items\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/sors/:dataset-id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/sors/:dataset-id/custom-properties/:name\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/sors/:dataset-id/description\\": {\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/sors/:dataset-id/tags\\": {\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tables/:dataset-id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tables/:dataset-id/custom-properties/:name\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tables/:dataset-id/description\\": {\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/tables/:dataset-id/tags\\": {\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/columns/:dataset-id/:field-name\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/columns/:dataset-id/:field-name/custom-properties/:name\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/columns/:dataset-id/:field-name/description\\": {\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/columns/:dataset-id/:field-name/tags\\": {\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/metadata-registry/search\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/metadata-registry/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/metadata-registry/items\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/metadata-registry/items/:name\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:metadata-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/data-catalog\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/data-catalog/configuration\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/data-catalog/.well-known/openid-configuration\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/data-catalog/assets/export\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:data-assets\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  }\\n}",
                  "name": "auth.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.4.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "http://authentication-service/userinfo",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "userId",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "connection,upgrade,sec-websocket-protocol,sec-webSocket-version,x-request-id,request-id,cookie,authorization,client-type,host,x-forwarded-host,traceparent,tracestate",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "provider,email,username,name,permissions,metadata",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.3",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "envName": "CONFIGURATION_PATH",
              "type": "folder"
            }
          },
          "name": "authorization-service",
          "tags": [
            "auth"
          ],
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"id\\": \\"users\\",\\n  \\"description\\": \\"Collection of users\\",\\n  \\"name\\": \\"users\\",\\n  \\"fields\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"ObjectId\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"_id\\"\\n    },\\n    {\\n      \\"name\\": \\"creatorId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"creatorId\\"\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"createdAt\\"\\n    },\\n    {\\n      \\"name\\": \\"updaterId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"updaterId\\"\\n    },\\n    {\\n      \\"name\\": \\"updatedAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"updatedAt\\"\\n    },\\n    {\\n      \\"name\\": \\"__STATE__\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"__STATE__\\"\\n    },\\n    {\\n      \\"name\\": \\"name\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"groups\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    {\\n      \\"name\\": \\"username\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"email\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerUserId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"realm\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"metadata\\",\\n      \\"type\\": \\"RawObject\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"schema\\": {\\n        \\"properties\\": {\\n          \\"permissions\\": {\\n            \\"type\\": \\"array\\",\\n            \\"items\\": {\\n              \\"type\\": \\"string\\",\\n              \\"enum\\": [\\n                \\"read:pipelines\\",\\n                \\"control:pipelines\\",\\n                \\"read:connections\\",\\n                \\"update:connections\\",\\n                \\"delete:connections\\",\\n                \\"read:runtimes\\",\\n                \\"update:runtimes\\",\\n                \\"read:data-assets\\",\\n                \\"update:metadata-assets\\",\\n                \\"read:users\\",\\n                \\"update:users\\"\\n              ]\\n            }\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\"name\\": \\"permissions\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  ],\\n  \\"endpointBasePath\\": \\"/users\\",\\n  \\"defaultState\\": \\"PUBLIC\\",\\n  \\"indexes\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": true,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"_id\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"creatdAt\\",\\n          \\"order\\": -1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"stateIndex\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"nameSearch\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"email\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"name\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"upsertSupport\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"providerId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"providerUserId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"realm\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    }\\n  ],\\n  \\"tags\\": [\\n    \\"collection\\"\\n  ]\\n}",
                  "name": "users-users.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "<CONFIGURE_ME>",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 3
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 3
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.3",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "tags": [
            "crud"
          ],
          "type": "plugin"
        },
        "data-catalog-fe": {
          "componentId": "data-fabric.data-catalog-fe",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/usr/static",
              "name": "data-catalog-fe-config",
              "subPaths": [
                "configuration.json",
                "openid-configuration.json"
              ],
              "usePreserve": true,
              "files": [
                {
                  "content": "{\\n  \\"api\\": {\\n    \\"data-catalog\\": \\"**DATA_CATALOG_BASE_URL**\\"\\n  },\\n  \\"name\\": \\"**APPLICATION_NAME**\\",\\n  \\"version\\": \\"**VERSION**\\"\\n}",
                  "name": "configuration.json"
                },
                {
                  "content": "{\\n  \\"end_session_endpoint\\": \\"{{DC_BASE_URL}}/logout\\"\\n}",
                  "name": "openid-configuration.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "BASE_PATH",
              "value": "/data-catalog/",
              "valueType": "plain"
            },
            {
              "name": "DATA_CATALOG_BASE_URL",
              "value": "/api",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "cmd": [
                "echo",
                "'ok'"
              ],
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "cmd": [
                "echo",
                "'ok'"
              ],
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "15Mi"
            }
          },
          "description": "This is the Data Catalog component for visualizing your data assets definitions and associated metadata",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/data-lineage/data-catalog-frontend:0.3.4",
          "name": "data-catalog-fe",
          "tags": [
            "data-fabric"
          ],
          "type": "plugin"
        },
        "fabric-bff": {
          "componentId": "data-fabric.bff",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/fabric_bff/.fd/data-fabric-bff",
              "name": "fabric-bff-config",
              "files": [
                {
                  "content": "{\\n  \\"openLineage\\": {\\n    \\"rest\\": {\\n      \\"target\\": \\"http://open-lineage\\"\\n    },\\n    \\"grpc\\": {\\n      \\"target\\": \\"http://open-lineage:50051\\"\\n    }\\n  },\\n  \\"persistence\\": {\\n    \\"type\\": \\"mongodb\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"<CONFIGURE_ME>\\"\\n    }\\n  },\\n  \\"jobRunner\\": {\\n    \\"grpc\\": {\\n      \\"target\\": \\"http://job-runner:50051\\"\\n    }\\n  },\\n  \\"settings\\": {\\n    \\"apiPrefix\\": \\"/api\\",\\n    \\"auditUserHeader\\": \\"miauserid\\"\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http"
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "120m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "15Mi"
            }
          },
          "description": "Backend for frontend communication proxy for Data Catalog services and other applications",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/fabric-bff:0.3.4",
          "name": "fabric-bff",
          "tags": [
            "data-fabric"
          ],
          "type": "plugin"
        },
        "fabric-cache": {
          "args": [
            "redis-server",
            "/etc/redis/redis.conf"
          ],
          "containerPorts": [
            {
              "from": 6379,
              "name": "redis",
              "protocol": "TCP",
              "to": 6379
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/etc/redis",
              "name": "redis-configuration",
              "subPaths": [
                "redis.conf"
              ],
              "files": [
                {
                  "content": "## GENERIC ##\\nport                      6379\\nbind                      0.0.0.0\\n\\n## MEMORY ##\\nsave                      \\"\\"\\nappendonly                no\\nmaxmemory                 31457280\\n\\n## REPLICAS ##\\nslave-serve-stale-data    yes\\nslave-read-only           yes\\n",
                  "name": "redis.conf"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "redis"
            },
            "readiness": {
              "port": "redis"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "150m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/cache/redis:7.2.5",
          "name": "fabric-cache",
          "tags": [
            "cache"
          ],
          "type": "plugin"
        },
        "grpcui": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultArgs": [
            "-plaintext",
            "-base-path=/ui/job-runner",
            "-bind=0.0.0.0",
            "-connect-fail-fast=false",
            "job-runner:50051"
          ],
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "http"
            },
            "readiness": {
              "port": "http"
            },
            "startup": {
              "port": "http"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "5m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "20Mi"
            }
          },
          "defaultTerminationGracePeriodSeconds": 30,
          "description": "temporary UI for job-runner",
          "dockerImage": "nexus.mia-platform.eu/cache/fullstorydev/grpcui:v1.4.1",
          "name": "grpcui",
          "tags": [
            "utils"
          ],
          "type": "plugin"
        },
        "job-runner": {
          "containerPorts": [
            {
              "from": 50051,
              "name": "grpc",
              "protocol": "TCP",
              "to": 50051
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/job_runner/.fd/job-runner",
              "name": "job-runner-config-folder",
              "files": [
                {
                  "content": "",
                  "name": ".odbc.ini"
                },
                {
                  "content": "{\\n  \\"persistence\\": {\\n    \\"type\\": \\"mongodb\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"<CONFIGURE_ME>\\"\\n    }\\n  }\\n}",
                  "name": "config.json"
                },
                {
                  "content": "{}",
                  "name": "secrets.json"
                }
              ]
            },
            {
              "mountPath": "/opt/oracle/instantclient/network/admin",
              "name": "job-runner-oracle-tnsadmin",
              "usePreserve": true,
              "files": [
                {
                  "content": "",
                  "name": "tnsnames.ora"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "grpc"
            },
            "readiness": {
              "port": "grpc"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "120m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "350Mi",
              "min": "50Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/data-fabric/job-runner:0.2.3",
          "name": "job-runner",
          "tags": [
            "data-fabric"
          ],
          "type": "plugin"
        },
        "login-site": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "http"
            },
            "readiness": {
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "30Mi",
              "min": "15Mi"
            }
          },
          "description": "Frontend supporting authentication flow",
          "dockerImage": "nexus.mia-platform.eu/backoffice/login-site:8.1.2",
          "name": "login-site",
          "tags": [
            "auth"
          ],
          "type": "plugin"
        },
        "micro-lc": {
          "componentId": "backoffice-backend",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "link": {
                "targetSection": "microfrontend-composer/micro-lc"
              },
              "mountPath": "/usr/static/public",
              "name": "micro-lc-static-files",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/mgmt/\\" target=\\"_blank\\" />\\n\\n  <title>Data Fabric Users Management</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script type=\\"module\\" nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js\\"></script>\\n\\n  <script type=\\"module\\" nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/micro-lc.production.js\\"></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#2cb47b\\">\\n    <micro-lc config-src=\\"/micro-lc-configurations/config.json\\" fallback-language=\\"en\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>",
                  "name": "index.html"
                }
              ]
            },
            {
              "link": {
                "targetSection": "microfrontend-composer/micro-lc"
              },
              "mountPath": "/usr/static/configurations",
              "name": "micro-lc-configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"applications\\": {\\n    \\"users\\": {\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./users\\",\\n      \\"config\\": \\"/micro-lc-configurations/users.config.json\\"\\n    },\\n    \\"docs\\": {\\n      \\"integrationMode\\": \\"iframe\\",\\n      \\"route\\": \\"./documentation\\",\\n      \\"src\\": \\"https://docs.mia-platform.eu/docs/fast_data/runtime_management/overview\\"\\n    },\\n    \\"job-runner-ui\\": {\\n      \\"integrationMode\\": \\"iframe\\",\\n      \\"route\\": \\"./job-runner\\",\\n      \\"src\\": \\"{{DC_BASE_URL}}/ui/job-runner\\"\\n    }\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"logo\\": {\\n            \\"altText\\": \\"Mia-Platform Logo\\",\\n            \\"url\\": \\"https://raw.githubusercontent.com/mia-platform/.github/master/profile/img/mia-platform_logo_color.png\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"HomeOutlined\\"\\n              },\\n              \\"id\\": \\"docs\\",\\n              \\"label\\": \\"Documentation\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"UserOutlined\\"\\n              },\\n              \\"id\\": \\"users\\",\\n              \\"label\\": \\"Users\\"\\n            },\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"LinkOutlined\\"\\n              },\\n              \\"id\\": \\"job-runner-ui\\",\\n              \\"label\\": \\"Job Runner\\"\\n            }\\n          ],\\n          \\"mode\\": \\"topBar\\",\\n          \\"showSearchBar\\": false,\\n          \\"userMenu\\": {\\n            \\"logout\\": {\\n              \\"method\\": \\"GET\\",\\n              \\"redirectUrl\\": \\"/\\",\\n              \\"url\\": \\"/logout\\"\\n            },\\n            \\"userInfoUrl\\": \\"/userinfo\\"\\n          },\\n          \\"userMenuTrigger\\": \\"click\\"\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#2cb47b\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./users\\"\\n  },\\n  \\"version\\": 2\\n}",
                  "name": "config.json"
                },
                {
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"required\\": [\\n        \\"providerId\\",\\n        \\"providerUserId\\"\\n      ],\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true,\\n            \\"disabled\\": false,\\n            \\"hidden\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true,\\n            \\"disabled\\": false,\\n            \\"hidden\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true,\\n            \\"hiddenOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true,\\n            \\"hiddenOnUpdate\\": false,\\n            \\"hidden\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"__STATE__\\": {\\n          \\"enum\\": [\\n            \\"PUBLIC\\",\\n            \\"DRAFT\\",\\n            \\"TRASH\\",\\n            \\"DELETED\\"\\n          ],\\n          \\"formOptions\\": {\\n            \\"readOnlyOnUpdate\\": true,\\n            \\"readOnly\\": false,\\n            \\"placeholder\\": \\"PUBLIC\\"\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"name\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          }\\n        },\\n        \\"groups\\": {\\n          \\"type\\": \\"array\\",\\n          \\"items\\": {\\n            \\"type\\": \\"string\\"\\n          }\\n        },\\n        \\"username\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"email\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"providerId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          }\\n        },\\n        \\"providerUserId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"realm\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnlyOnInsert\\": false,\\n            \\"readOnly\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"permissions\\": {\\n          \\"type\\": \\"array\\",\\n          \\"items\\": {\\n            \\"type\\": \\"string\\",\\n            \\"enum\\": [\\n              \\"read:pipelines\\",\\n              \\"control:pipelines\\",\\n              \\"read:runtimes\\",\\n              \\"update:runtimes\\",\\n              \\"read:data-assets\\",\\n              \\"update:metadata-assets\\",\\n              \\"update:bulk-action\\",\\n              \\"read:users\\",\\n              \\"update:users\\",\\n              \\"update:lineage\\",\\n              \\"admin:connections\\",\\n              \\"admin:producers\\"\\n            ]\\n          },\\n          \\"dataSchema\\": {\\n            \\"type\\": \\"array\\",\\n            \\"items\\": {\\n              \\"type\\": \\"string\\",\\n              \\"enum\\": [\\n                \\"read:pipelines\\",\\n                \\"control:pipelines\\",\\n                \\"read:runtimes\\",\\n                \\"update:runtimes\\",\\n                \\"read:data-assets\\",\\n                \\"update:metadata-assets\\",\\n                \\"update:bulk-action\\",\\n                \\"read:users\\",\\n                \\"update:users\\",\\n                \\"update:lineage\\",\\n                \\"admin:connections\\",\\n                \\"admin:producers\\"\\n              ]\\n            }\\n          }\\n        },\\n        \\"metadata\\": {\\n          \\"type\\": \\"object\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"Users\\"\\n                },\\n                \\"tag\\": \\"bk-title\\"\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-left: 14px; align-self: end;\\"\\n                }\\n              },\\n              {\\n                \\"tag\\": \\"div\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"placeholder\\": \\"Search...\\"\\n                },\\n                \\"tag\\": \\"bk-search-bar\\"\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"\\",\\n                  \\"clickConfig\\": {\\n                    \\"type\\": \\"event\\",\\n                    \\"actionConfig\\": {\\n                      \\"label\\": \\"filter\\",\\n                      \\"payload\\": {}\\n                    }\\n                  },\\n                  \\"type\\": \\"outlined\\",\\n                  \\"iconId\\": \\"FunnelPlotOutlined\\"\\n                },\\n                \\"tag\\": \\"bk-button\\"\\n              }\\n            ],\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; gap: 10px; padding: 0 20px;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"width: 100%; display: flex; justify-content: space-between;\\"\\n            },\\n            \\"content\\": [\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                },\\n                \\"properties\\": {\\n                  \\"tabs\\": [\\n                    {\\n                      \\"key\\": \\"public\\",\\n                      \\"title\\": \\"Public\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"PUBLIC\\"\\n                        }\\n                      ],\\n                      \\"order\\": 0\\n                    },\\n                    {\\n                      \\"title\\": \\"Draft\\",\\n                      \\"key\\": \\"draft\\",\\n                      \\"order\\": 2,\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"DRAFT\\"\\n                        }\\n                      ]\\n                    },\\n                    {\\n                      \\"title\\": \\"Trash\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"TRASH\\"\\n                        }\\n                      ],\\n                      \\"order\\": 3,\\n                      \\"key\\": \\"trash\\"\\n                    }\\n                  ]\\n                },\\n                \\"tag\\": \\"bk-tabs\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-right: 4px\\"\\n                },\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"filters\\": []\\n                },\\n                \\"tag\\": \\"bk-filters-manager\\"\\n              }\\n            ]\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"padding: 0 20px;\\"\\n            },\\n            \\"content\\": {\\n              \\"tag\\": \\"bk-breadcrumbs\\",\\n              \\"properties\\": {\\n                \\"dataSchema\\": {\\n                  \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                }\\n              }\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"header\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; padding-top: 10px; background-color: white;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"rowActions\\": {\\n                \\"kind\\": \\"icons\\",\\n                \\"actions\\": [\\n                  {\\n                    \\"label\\": \\"Delete\\",\\n                    \\"icon\\": \\"fas fa-trash\\",\\n                    \\"kind\\": \\"event\\",\\n                    \\"content\\": \\"delete-data\\",\\n                    \\"meta\\": {\\n                      \\"actionId\\": \\"delete-data\\"\\n                    },\\n                    \\"requireConfirm\\": true\\n                  }\\n                ]\\n              },\\n              \\"fitParentContainer\\": true\\n            },\\n            \\"tag\\": \\"bk-table\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"requireConfirm\\": {\\n                \\"onClose\\": true,\\n                \\"onSave\\": true\\n              },\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"70vw\\",\\n              \\"allowObjectAsTable\\": false,\\n              \\"editorHeight\\": \\"30vh\\",\\n              \\"allowNavigation\\": true\\n            },\\n            \\"tag\\": \\"bk-form-modal\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-confirmation-modal\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"rootElementSelectors\\": \\"main.micro-lc-layout-content\\",\\n              \\"successEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully created\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully updated\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully deleted\\",\\n                  \\"type\\": \\"success\\"\\n                }\\n              },\\n              \\"errorEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order creation\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order updated\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order deletion\\",\\n                  \\"type\\": \\"error\\"\\n                }\\n              }\\n            },\\n            \\"tag\\": \\"bk-notifications\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"main\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"flex-grow: 1; background-color: #f0f2f5; padding: 20px; overflow-y: auto;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"40vw\\"\\n            },\\n            \\"tag\\": \\"bk-filter-drawer\\"\\n          }\\n        ],\\n        \\"tag\\": \\"aside\\"\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-bulk-delete\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-bulk-actions\\",\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              }\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; justify-content: end; align-items: center;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"properties\\": {\\n              \\"pageSize\\": 10\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"footer\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; flex-wrap: wrap; padding: 10px 20px; background-color: white; gap: 10px; position: sticky; bottom: 0; z-index: 10\\"\\n        }\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/authz/users\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-client\\"\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; position: relative;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n  ]\\n}",
                  "name": "users.config.json"
                }
              ]
            },
            {
              "link": {
                "targetSection": "microfrontend-composer/micro-lc"
              },
              "mountPath": "/usr/src/app/config",
              "name": "micro-lc-server-configuration",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</micro-lc-configurations/config.json>; rel=preload; as=fetch; crossorigin\\",\\n        \\"</mfe-application/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/assets/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            },
            {
              "mountPath": "/usr/static/public/assets",
              "name": "micro-lc-assets",
              "files": [
                {
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}",
                  "name": "style.css"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 5
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 5
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "description": "micro-lc config server.",
          "dockerImage": "nexus.mia-platform.eu/microlc/middleware:3.4.0",
          "links": [
            {
              "enableIf": "ENABLE_BACKOFFICE_CONFIGURATOR",
              "label": "Microfrontend Composer",
              "targetSection": "microfrontend-composer"
            }
          ],
          "name": "micro-lc",
          "tags": [
            "composer"
          ],
          "type": "plugin"
        },
        "open-lineage": {
          "componentId": "data-fabric.open-lineage",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "to": 3000
            },
            {
              "from": 50051,
              "name": "grpc",
              "to": 50051
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/open_lineage/.fd/open-lineage",
              "name": "open-lineage-config",
              "files": [
                {
                  "content": "{\\n  \\"cache\\": {\\n    \\"type\\": \\"redis\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"redis://fabric-cache:6379\\"\\n    }\\n  },\\n  \\"persistence\\": {\\n    \\"type\\": \\"mongodb\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"<CONFIGURE_ME>\\"\\n    }\\n  },\\n  \\"settings\\": {\\n    \\"apiPrefix\\": \\"/api\\",\\n    \\"auditUserHeader\\": \\"miauserid\\"\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http"
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "400m",
              "min": "125m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "100Mi"
            }
          },
          "description": "Data Catalog component that allows reading your data assets definition and enrich them with ad-hoc metadata",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/open-lineage:0.3.8",
          "name": "open-lineage",
          "tags": [
            "data-fabric"
          ],
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "BACK_KIT_VERSION": {
          "noProductionEnv": "1.5.8",
          "productionEnv": "1.5.8"
        },
        "DC_APP_ID": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "DC_BASE_URL": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "DC_PROVIDER_ID": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "DC_REDIS_SCOPE": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "LOG_LEVEL": {
          "noProductionEnv": "debug",
          "productionEnv": "info"
        },
        "MICRO_LC_MANAGER_VERSION": {
          "noProductionEnv": "3.4.0",
          "productionEnv": "3.4.0"
        },
        "MICRO_LC_VERSION": {
          "noProductionEnv": "2.4.3",
          "productionEnv": "2.4.3"
        },
        "OKTA_BASE_URL": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.843Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-catalog-application-new.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "A CDC (Change Data Capture) plugin from MongoDB to Kafka, enabling real-time data synchronization of database collection events",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mongezium-cdc/overview"
    },
    "itemId": "data-fabric-mongezium-cdc",
    "name": "Mongezium CDC",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/data-fabric/mongezium",
    "resources": {
      "services": {
        "mongezium-cdc": {
          "type": "plugin",
          "name": "data-fabric-mongezium-cdc",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/mongezium:0.4.0",
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http",
              "initialDelaySeconds": 5,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http",
              "initialDelaySeconds": 5,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "valueType": "plain",
              "value": "info"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "mongezium-cdc-configuration",
              "mountPath": "/home/mongezium/.df/mongezium",
              "files": [
                {
                  "content": "{\\n  \\"persistence\\": {\\n    \\"url\\": \\"CHANGE_ME\\"\\n  },\\n  \\"collections\\": [],\\n  \\"stream\\": {\\n    \\"consumer\\": {\\n      \\"bootstrap.servers\\": \\"CHANGE_ME\\"\\n    },\\n    \\"producer\\": {\\n      \\"bootstrap.servers\\": \\"CHANGE_ME\\"\\n    }\\n  }\\n}\\n",
                  "name": "config.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "to": 3000,
              "from": 80,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-07-08T16:15:06.843Z",
    "lifecycleStatus": "published",
    "version": {
      "name": "0.4.0",
      "releaseNote": "Initial release"
    },
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mongezium_logo_20250708.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "business",
    "description": "A customizable frontend to display your data in beautiful dashboards. Use it with Data Visualization Backend.",
    "itemId": "data-visualization",
    "name": "Data Visualization",
    "resources": {
      "services": {
        "data-visualization": {
          "type": "plugin",
          "name": "data-visualization",
          "description": "A customizable frontend to display your data in beautiful dashboards. Use it with Data Visualization Backend.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/data-visualization:1.8.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.8.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.016Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-visualization.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "business",
    "description": "A customizable frontend to display your data in beautiful dashboards. Use it with Data Visualization Backend.",
    "itemId": "data-visualization",
    "name": "Data Visualization",
    "resources": {
      "services": {
        "data-visualization": {
          "type": "plugin",
          "name": "data-visualization",
          "description": "A customizable frontend to display your data in beautiful dashboards. Use it with Data Visualization Backend.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/data-visualization:1.8.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-visualization.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "business",
    "description": "This is a backend for frontend to be used to configure Data Visualization dashboards.",
    "itemId": "data-visualization-backend",
    "name": "Data Visualization Backend",
    "resources": {
      "services": {
        "data-visualization-backend": {
          "type": "plugin",
          "name": "data-visualization-backend",
          "description": "This is a backend for frontend to be used to configure Data Visualization dashboards.",
          "dockerImage": "nexus.mia-platform.eu/core/charts-service:2.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "DASHBOARD_AND_CHARTS_CONFIG_PATH",
              "value": "CHANGE_WITH_YOUR_DASHBOARD_CONFIG_PATH",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.015Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-visualization-backend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "business",
    "description": "This is a backend for frontend to be used to configure Data Visualization dashboards.",
    "itemId": "data-visualization-backend",
    "name": "Data Visualization Backend",
    "resources": {
      "services": {
        "data-visualization-backend": {
          "type": "plugin",
          "name": "data-visualization-backend",
          "description": "This is a backend for frontend to be used to configure Data Visualization dashboards.",
          "dockerImage": "nexus.mia-platform.eu/core/charts-service:2.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "DASHBOARD_AND_CHARTS_CONFIG_PATH",
              "value": "CHANGE_WITH_YOUR_DASHBOARD_CONFIG_PATH",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "data-visualization-backend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#db2"
    },
    "itemId": "debezium-server-db2-template",
    "name": "Debezium Server DB2 Template",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-db2-template",
    "resources": {
      "services": {
        "debezium-server-db2-template": {
          "type": "template",
          "name": "debezium-server-db2-template",
          "description": "Debezium is an open source distributed platform for change data capture",
          "archiveUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-db2-template/-/archive/main/debezium-server-db2-template-main.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "v4/projects/platform%2Ffast-data%2Fconnectors%2Fsource%2Fdebezium-server-db2-template/repository/files/.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-cdc-db2-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.db2.Db2Connector\\n\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-db2::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\ndebezium.source.database.dbname = {{DATABASE_NAME}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\n\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.delimiter = .\\n\\ndebezium.source.schema.include.list = {{DATABASES_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# redo_log_catalog (default) or online_catalog\\ndebezium.source.log.mining.strategy = redo_log_catalog\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\n# to all tables that are mapped onto topics\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n# add the suffix .ingestion\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n# this disable the additional parameter that is added to the key, since the service it still sending\\n# each table to their own topic and therefore the key is still unique within that topic\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.014Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-db2-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#db2"
    },
    "itemId": "debezium-server-db2-template",
    "name": "Debezium Server DB2 Template",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-db2-template",
    "resources": {
      "services": {
        "debezium-server-db2-template": {
          "type": "template",
          "name": "debezium-server-db2-template",
          "description": "Debezium is an open source distributed platform for change data capture",
          "archiveUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-db2-template/-/archive/main/debezium-server-db2-template-main.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "v4/projects/platform%2Ffast-data%2Fconnectors%2Fsource%2Fdebezium-server-db2-template/repository/files/.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-cdc-db2-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.db2.Db2Connector\\n\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-db2::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\ndebezium.source.database.dbname = {{DATABASE_NAME}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\n\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.delimiter = .\\n\\ndebezium.source.schema.include.list = {{DATABASES_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# redo_log_catalog (default) or online_catalog\\ndebezium.source.log.mining.strategy = redo_log_catalog\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\n# to all tables that are mapped onto topics\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n# add the suffix .ingestion\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n# this disable the additional parameter that is added to the key, since the service it still sending\\n# each table to their own topic and therefore the key is still unique within that topic\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-05-25T16:10:21.008Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-db2-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#mysql"
    },
    "itemId": "debezium-server-for-mysql",
    "name": "Debezium Server for MySQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-with-prometheus-metrics",
    "resources": {
      "services": {
        "debezium-server-for-mysql": {
          "type": "plugin",
          "name": "debezium-server-for-mysql",
          "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/debezium-server:1.0.3",
          "componentId": "debezium-server-mysql",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 60,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 60,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-mysql-cdc-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.mysql.MySqlConnector\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-mysql::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}} \\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\n\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.delimiter = .\\n\\ndebezium.source.database.include.list = {{DATABASES_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-mysql-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.018Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-for-mysql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#mysql"
    },
    "itemId": "debezium-server-for-mysql",
    "name": "Debezium Server for MySQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-with-prometheus-metrics",
    "resources": {
      "services": {
        "debezium-server-for-mysql": {
          "type": "plugin",
          "name": "debezium-server-for-mysql",
          "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/debezium-server:1.0.3",
          "componentId": "debezium-server-mysql",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 60,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 60,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-mysql-cdc-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.mysql.MySqlConnector\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-mysql::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}} \\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\n\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.delimiter = .\\n\\ndebezium.source.database.include.list = {{DATABASES_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-mysql-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-30T16:19:49.295Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-for-mysql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#oracle-db"
    },
    "itemId": "debezium-server-for-oracle",
    "name": "Debezium Server for Oracle",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-template",
    "resources": {
      "services": {
        "debezium-server-for-oracle": {
          "type": "template",
          "name": "debezium-server-for-oracle",
          "description": "Debezium is an open source distributed platform for change data capture",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/65125/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "v4/projects/platform%2Ffast-data%2Fconnectors%2Fsource%2Fdebezium-server-template/repository/files/.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-cdc-oracle-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.oracle.OracleConnector\\n\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-oracle::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\ndebezium.source.database.dbname = {{DATABASE_NAME}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\n\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.delimiter = .\\n\\ndebezium.source.schema.include.list = {{DATABASES_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# redo_log_catalog (default) or online_catalog\\ndebezium.source.log.mining.strategy = redo_log_catalog\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\n# to all tables that are mapped onto topics\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n# add the suffix .ingestion\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n# this disable the additional parameter that is added to the key, since the service it still sending\\n# each table to their own topic and therefore the key is still unique within that topic\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.008Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-for-oracle.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#oracle-db"
    },
    "itemId": "debezium-server-for-oracle",
    "name": "Debezium Server for Oracle",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-template",
    "resources": {
      "services": {
        "debezium-server-for-oracle": {
          "type": "template",
          "name": "debezium-server-for-oracle",
          "description": "Debezium is an open source distributed platform for change data capture",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/65125/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "v4/projects/platform%2Ffast-data%2Fconnectors%2Fsource%2Fdebezium-server-template/repository/files/.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-cdc-oracle-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.oracle.OracleConnector\\n\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-oracle::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\ndebezium.source.database.dbname = {{DATABASE_NAME}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\n\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.delimiter = .\\n\\ndebezium.source.schema.include.list = {{DATABASES_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# redo_log_catalog (default) or online_catalog\\ndebezium.source.log.mining.strategy = redo_log_catalog\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\n# to all tables that are mapped onto topics\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n# add the suffix .ingestion\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n# this disable the additional parameter that is added to the key, since the service it still sending\\n# each table to their own topic and therefore the key is still unique within that topic\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-30T16:19:49.326Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-for-oracle.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#postgresql"
    },
    "itemId": "debezium-server-for-postgresql",
    "name": "Debezium Server for PostgreSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-with-prometheus-metrics",
    "resources": {
      "services": {
        "debezium-server-for-postgresql": {
          "type": "plugin",
          "name": "debezium-server-for-postgresql",
          "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/debezium-server:1.0.3",
          "componentId": "debezium-server-postgre-sql",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 60,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 60,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-postgres-cdc-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.postgresql.PostgresConnector\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-postgres::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}} \\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.naming.strategy = io.debezium.schema.DefaultTopicNamingStrategy\\n\\ndebezium.source.database.dbname = {{DATABASE_NAME}}\\ndebezium.source.schema.include.list = {{SCHEMAS_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-mysql-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.018Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-for-postgresql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc#postgresql"
    },
    "itemId": "debezium-server-for-postgresql",
    "name": "Debezium Server for PostgreSQL",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-with-prometheus-metrics",
    "resources": {
      "services": {
        "debezium-server-for-postgresql": {
          "type": "plugin",
          "name": "debezium-server-for-postgresql",
          "description": "Debezium is an open source distributed platform for change data capture. This plugins offers the Debezium server application with the addition of JMX Prometheus exporter to expose server metrics",
          "dockerImage": "nexus.mia-platform.eu/fast-data/connectors/debezium-server:1.0.3",
          "componentId": "debezium-server-postgre-sql",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 60,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 60,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-postgres-cdc-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\nquarkus.http.port = \${HTTP_PORT:3000}\\nquarkus.log.level = \${LOG_LEVEL:INFO}\\nquarkus.log.console.json = false\\nquarkus.log.console.json.excluded-keys = sequence,loggerClassName\\n\\n# Source Configuration\\ndebezium.source.name = {{DEBEZIUM_SOURCE_TASK_NAME}}\\ndebezium.source.tasks.max = 1\\ndebezium.source.connector.class = io.debezium.connector.postgresql.PostgresConnector\\ndebezium.source.offset.flush.interval.ms = 15000\\ndebezium.source.offset.storage = io.debezium.storage.redis.offset.RedisOffsetBackingStore\\ndebezium.source.offset.storage.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.offset.storage.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.offset.storage.redis.password = {{DEBEZIUM_REDIS_PASSWORD}}\\ndebezium.source.offset.storage.redis.key = metadata::debezium-postgres::offsets\\n\\ndebezium.source.schema.history.internal = io.debezium.storage.redis.history.RedisSchemaHistory\\ndebezium.source.schema.history.internal.redis.address = {{REDIS_HOSTNAME}}:\${REDIS_PORT}\\ndebezium.source.schema.history.internal.redis.user = {{DEBEZIUM_REDIS_USERNAME}}\\ndebezium.source.schema.history.internal.redis.password = {{DEBEZIUM_REDIS_PASSWORD}} \\n\\ndebezium.source.database.hostname = {{DATABASE_HOSTNAME}}\\ndebezium.source.database.port = {{DATABASE_PORT}}\\ndebezium.source.database.user = {{DEBEZIUM_DB_USERNAME}}\\ndebezium.source.database.password = {{DEBEZIUM_DB_PASSWORD}}\\n\\ndebezium.source.database.server.id = 1\\ndebezium.source.database.ssl.mode = <CONFIGURE_ME>\\ndebezium.source.topic.prefix = {{TOPIC_PREFIX}}\\ndebezium.source.topic.naming.strategy = io.debezium.schema.DefaultTopicNamingStrategy\\n\\ndebezium.source.database.dbname = {{DATABASE_NAME}}\\ndebezium.source.schema.include.list = {{SCHEMAS_LIST}}\\ndebezium.source.table.include.list = {{TABLES_LIST}}\\n\\ndebezium.source.include.schema.changes = false\\ndebezium.source.include.schema.comments = false\\n\\ndebezium.source.key.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.key.converter.schemas.enable = false\\n\\ndebezium.source.value.converter = org.apache.kafka.connect.json.JsonConverter\\ndebezium.source.value.converter.schemas.enable = false\\n\\ndebezium.source.poll.interval.ms = 500\\ndebezium.source.max.batch.size = 2048\\ndebezium.source.max.queue.size = 8192\\n\\ndebezium.source.tombstones.on.delete = true\\n\\n# Sink Configuration\\ndebezium.sink.type = kafka\\ndebezium.sink.name = {{DEBEZIUM_SINK_TASK_NAME}}\\ndebezium.sink.kafka.producer.bootstrap.servers={{KAFKA_BROKERS}}\\ndebezium.sink.kafka.producer.client.id = dz-cdc-mysql-producer-{{ENVIRONMENT_TO_DEPLOY}}\\n\\ndebezium.sink.kafka.producer.ssl.endpoint.identification.algorithm = HTTPS\\ndebezium.sink.kafka.producer.security.protocol = SASL_SSL\\ndebezium.sink.kafka.producer.sasl.mechanism = SCRAM-SHA-256\\ndebezium.sink.kafka.producer.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{KAFKA_USERNAME}}\\" password=\\"{{KAFKA_PASSWORD}}\\";\\n\\ndebezium.sink.kafka.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer\\ndebezium.sink.kafka.producer.value.serializer = org.apache.kafka.common.serialization.StringSerializer\\n\\ndebezium.sink.kafka.producer.acks = all\\ndebezium.sink.kafka.producer.max.in.flight.requests.per.connection = 5\\ndebezium.sink.kafka.producer.enable.idempotence = true\\ndebezium.sink.kafka.producer.min.insync.replicas = 2\\ndebezium.sink.kafka.producer.retries = 2147483647\\ndebezium.sink.kafka.producer.compression.type = snappy\\n\\n\\n# Format Configuration\\ndebezium.format.key = json\\ndebezium.format.value = json\\n\\n# Transforms\\ndebezium.transforms=Reroute\\ndebezium.transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter\\ndebezium.transforms.Reroute.topic.regex=(.+)\\n\\ndebezium.transforms.Reroute.topic.replacement=$1.ingestion\\n\\ndebezium.transforms.Reroute.key.enforce.uniqueness=false\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-04-13T16:06:00.697Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-for-postgresql.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc"
    },
    "itemId": "debezium-server-generic-template",
    "name": "Debezium Server Generic Template",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-generic-template",
    "resources": {
      "services": {
        "debezium-server-generic-template": {
          "type": "template",
          "name": "debezium-server-generic-template",
          "description": "Debezium is an open source distributed platform for change data capture",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/72186/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "v4/projects/platform%2Ffast-data%2Fconnectors%2Fsource%2Fdebezium-server-generic-template/repository/files/.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-generic-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\n# Insert here Debezium specific configuration\\n\\n# EXAMPLE\\n# database.hostname={{DEBEZIUM_DATABASE_HOSTNAME}}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "0.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.009Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-generic-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "Debezium is an open source distributed platform for change data capture",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/connectors/debezium_cdc"
    },
    "itemId": "debezium-server-generic-template",
    "name": "Debezium Server Generic Template",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/source/debezium-server-generic-template",
    "resources": {
      "services": {
        "debezium-server-generic-template": {
          "type": "template",
          "name": "debezium-server-generic-template",
          "description": "Debezium is an open source distributed platform for change data capture",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/72186/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "v4/projects/platform%2Ffast-data%2Fconnectors%2Fsource%2Fdebezium-server-generic-template/repository/files/.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "METRICS_HTTP_PORT",
              "value": "3001",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "REDIS_PORT",
              "value": "6379",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "900Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "500m"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultProbes": {
            "liveness": {
              "path": "/q/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/q/health/ready",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultConfigMaps": [
            {
              "name": "debezium-generic-conf",
              "mountPath": "/debezium/conf",
              "files": [
                {
                  "name": "application.properties",
                  "content": "# Application Configuration\\n# Insert here Debezium specific configuration\\n\\n# EXAMPLE\\n# database.hostname={{DEBEZIUM_DATABASE_HOSTNAME}}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            },
            {
              "name": "metrics",
              "from": 8080,
              "to": 3001
            }
          ]
        }
      }
    },
    "supportedBy": "Community",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-05-04T16:45:12.459Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "debezium-server-generic-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "debezium.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use this application to set up your Developer Portal in a few clicks",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/dev_portal/overview"
    },
    "itemId": "dev-portal",
    "name": "Dev Portal",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/dev-portal/dev-portal-application",
    "resources": {
      "services": {
        "api-gateway": {
          "componentId": "api-gateway-envoy",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            },
            {
              "from": 9901,
              "name": "admin",
              "to": 9901
            },
            {
              "from": 50051,
              "name": "grpc",
              "to": 50051
            }
          ],
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/envoy",
              "name": "api-gateway-envoy-config",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend",
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend",
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "30Mi"
            }
          },
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "name": "api-gateway",
          "tags": [
            "custom"
          ],
          "type": "plugin"
        },
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.0",
          "componentId": "crud-service",
          "defaultDocumentationPath": "",
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            },
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.1",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/file-records/",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/config/config.json",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "/files-service/",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/node/config",
              "name": "files-service-configuration",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"type\\": \\"mongodb\\",\\n  \\"options\\": {\\n    \\"url\\": \\"{{MONGODB_URL}}\\",\\n    \\"bucketName\\": \\"dev-portal-files-bucket\\"\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.8.0",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "dev-portal-marketplace-bff": {
          "type": "plugin",
          "name": "dev-portal-marketplace-bff",
          "description": "This plugin allows you to create the backend configuration for the dev portal marketplace.",
          "defaultLogParser": "mia-json",
          "dockerImage": "nexus.mia-platform.eu/dev-portal/marketplace-bff:1.1.0",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CATEGORIES_CRUD_PATH",
              "value": "/categories",
              "valueType": "plain"
            },
            {
              "name": "COMPONENTS_CRUD_PATH",
              "value": "/components",
              "valueType": "plain"
            },
            {
              "name": "REQUESTS_CRUD_PATH",
              "value": "/requests",
              "valueType": "plain"
            },
            {
              "name": "TAGS_CRUD_PATH",
              "value": "/tags",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "dev-portal-frontend": {
          "type": "template",
          "name": "dev-portal-frontend",
          "description": "Dev Portal frontend aggregation",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Dev-Portal-Template/archive/main.tar.gz",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "dev-portal-static-files",
              "mountPath": "/usr/static",
              "usePreserve": true,
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"$schema\\": \\"https://raw.githubusercontent.com/micro-lc/micro-lc/main/packages/interfaces/schemas/v2/config.schema.json\\",\\n  \\"version\\": 2,\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"/dev-portal/home/\\"\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"mode\\": \\"topBar\\",\\n          \\"logo\\": {\\n            \\"altText\\": \\"Dev Portal\\",\\n            \\"onClickHref\\": \\"/dev-portal/\\",\\n            \\"url\\": \\"https://www.mia-platform.eu/static/img/logo.svg\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faHome\\"\\n              },\\n              \\"id\\": \\"home\\",\\n              \\"label\\": \\"Home\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faBook\\"\\n              },\\n              \\"id\\": \\"documentation\\",\\n              \\"label\\": \\"Documentation\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faSearchDollar\\"\\n              },\\n              \\"id\\": \\"marketplace\\",\\n              \\"label\\": \\"Marketplace\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faArrowUpRightFromSquare\\"\\n              },\\n              \\"id\\": \\"api-portal\\",\\n              \\"label\\": \\"API Documentation\\",\\n              \\"type\\": \\"href\\",\\n              \\"target\\": \\"_blank\\",\\n              \\"href\\": \\"/documentations/api-portal/\\"\\n            }\\n          ],\\n          \\"helpMenu\\": {\\n            \\"helpHref\\": \\"https://docs.mia-platform.eu/docs/dev_portal/overview\\"\\n          },\\n          \\"head\\": {\\n            \\"favIconUrl\\": \\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\",\\n            \\"title\\": \\"Dev Portal\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#4568B5\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\",\\n            \\"dev-portal\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"applications\\": {\\n    \\"home\\": {\\n      \\"integrationMode\\": \\"parcel\\",\\n      \\"route\\": \\"/dev-portal/home/\\",\\n      \\"entry\\": \\"/dev-portal-home/\\",\\n      \\"injectBase\\": true\\n    },\\n    \\"documentation\\": {\\n      \\"integrationMode\\": \\"parcel\\",\\n      \\"route\\": \\"/dev-portal/documentation/\\",\\n      \\"entry\\": \\"/dev-portal-documentation/\\"\\n    },\\n    \\"marketplace\\": {\\n      \\"integrationMode\\": \\"parcel\\",\\n      \\"route\\": \\"/dev-portal/marketplace/\\",\\n      \\"entry\\": \\"/dev-portal-marketplace/\\",\\n      \\"injectBase\\": true,\\n      \\"properties\\": {\\n        \\"formKind\\": \\"clientCredentials\\"\\n      }\\n    }\\n  }\\n}\\n"
                },
                {
                  "name": "index.html",
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <title>Dev Portal</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" href=\\"/dev-portal/style.css\\" />\\n\\n  <script \\n    type=\\"module\\" \\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-loading-animation.esm.js\\"\\n  ></script>\\n\\n  <script\\n    type=\\"module\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/micro-lc.production.js\\"\\n  ></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#1890ff\\">\\n    <micro-lc config-src=\\"/dev-portal/config.json\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>\\n"
                },
                {
                  "name": "style.css",
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n\\ndiv#__micro_lc {\\n  background-color: white;\\n}\\n"
                }
              ]
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": ""
        },
        "dev-portal-backoffice": {
          "type": "plugin",
          "name": "dev-portal-backoffice",
          "description": "Dev Portal Backoffice instance",
          "dockerImage": "nexus.mia-platform.eu/microlc/middleware:3.3.0",
          "componentId": "backoffice-backend",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "backoffice-static-files",
              "mountPath": "/usr/static/public",
              "viewAsReadOnly": true,
              "files": [
                {
                  "name": "index.html",
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/dev-portal-backoffice/\\" target=\\"_blank\\" />\\n\\n  <title>Dev Portal Backoffice</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-loading-animation.esm.js\\"\\n  ></script>\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/micro-lc.production.js\\"\\n  ></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#1890ff\\">\\n    <micro-lc config-src=\\"/dev-portal-backoffice-configurations/config.json\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>\\n"
                }
              ]
            },
            {
              "name": "backoffice-configurations",
              "mountPath": "/usr/static/configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "name": "categories.config.json",
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"name\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Name\\",\\n            \\"it\\": \\"Nome\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Select a name\\",\\n              \\"it\\": \\"Seleziona un nome\\"\\n            }\\n          }\\n        },\\n        \\"description\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text-area\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Description\\",\\n            \\"it\\": \\"Descrizione\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a description\\",\\n              \\"it\\": \\"Aggiungi una descrizione\\"\\n            }\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"date-time\\",\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"LLLL\\"\\n          },\\n          \\"label\\": {\\n            \\"en\\": \\"Last Update\\",\\n            \\"it\\": \\"Ultima modifica\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"__STATE__\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"State\\",\\n            \\"it\\": \\"Stato\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"iconMap\\": {\\n              \\"PUBLIC\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#52C41A\\"\\n              },\\n              \\"DRAFT\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#CDCDCE\\"\\n              }\\n            }\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        }\\n      },\\n      \\"required\\": [\\n        \\"name\\"\\n      ]\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": {\\n                    \\"en\\": \\"Categories\\",\\n                    \\"it\\": \\"Categorie\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-title\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"placeholder\\": {\\n                \\"en\\": \\"Search...\\",\\n                \\"it\\": \\"Cerca...\\"\\n              }\\n            },\\n            \\"tag\\": \\"bk-search-bar\\",\\n            \\"attributes\\": {}\\n          },\\n          {\\n            \\"content\\": [\\n              {\\n                \\"tag\\": \\"bk-add-new-button\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-add-filter-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; justify-content: space-between; margin: 1vw 2vw 0.5vw 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"tabs\\": [\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"All\\",\\n                    \\"it\\": \\"Tutte\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"DRAFT\\"\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Draft\\",\\n                    \\"it\\": \\"Da Pubblicare\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"PUBLIC\\"\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Public\\",\\n                    \\"it\\": \\"Pubbliche\\"\\n                  }\\n                }\\n              ]\\n            },\\n            \\"tag\\": \\"bk-tabs\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"filters\\": []\\n            },\\n            \\"tag\\": \\"bk-filters-manager\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; margin: 0 2vw; gap: 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"rowActions\\": {\\n                    \\"kind\\": \\"icons\\",\\n                    \\"actions\\": [\\n                      {\\n                        \\"label\\": {\\n                          \\"en\\": \\"Delete\\",\\n                          \\"it\\": \\"Elimina\\"\\n                        },\\n                        \\"icon\\": \\"far fa-trash-alt\\",\\n                        \\"kind\\": \\"event\\",\\n                        \\"content\\": \\"delete-data\\",\\n                        \\"requireConfirm\\": {\\n                          \\"cancelText\\": {\\n                            \\"en\\": \\"Cancel\\",\\n                            \\"it\\": \\"Annulla\\"\\n                          },\\n                          \\"content\\": \\"Are you sure you want to delete this category?\\",\\n                          \\"okText\\": {\\n                            \\"en\\": \\"Delete\\",\\n                            \\"it\\": \\"Elimina\\"\\n                          },\\n                          \\"title\\": \\"Delete Category\\"\\n                        }\\n                      }\\n                    ]\\n                  }\\n                },\\n                \\"tag\\": \\"bk-table\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"height: 90%\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"60vw\\",\\n                  \\"requireConfirm\\": {\\n                    \\"cancelText\\": {\\n                      \\"en\\": \\"Keep editing\\",\\n                      \\"it\\": \\"Continua a modificare\\"\\n                    },\\n                    \\"content\\": \\"Your changes will be lost if you don't save them.\\",\\n                    \\"okText\\": {\\n                      \\"en\\": \\"Close without saving\\",\\n                      \\"it\\": \\"Esci senza salvare\\"\\n                    },\\n                    \\"title\\": \\"Save changes before closing?\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-form-modal\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"400\\"\\n                },\\n                \\"tag\\": \\"bk-filter-drawer\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: column; background-color: #f0f2f5; padding: 1.2vw 2vw; flex-grow: 1; position:relative; overflow:hidden;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; flex-grow: 1;position:relative;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; position: sticky; justify-content: space-between; margin: 0.5vw 2vw; background-color: white; z-index: 10; bottom: 0; max-height: 64px;\\"\\n        }\\n      },\\n      {\\n        \\"tag\\": \\"bk-confirmation-modal\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"rootElementSelectors\\": \\".composer-body\\",\\n          \\"errorEventMap\\": {\\n            \\"update-data\\": {\\n              \\"type\\": \\"error\\",\\n              \\"content\\": {\\n                \\"en\\": \\"The data has not been updated correctly\\",\\n                \\"it\\": \\"I dati non sono stati aggiornati correttamente\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"tag\\": \\"bk-notifications\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/categories\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          },\\n          \\"enableDefinitiveDelete\\": true\\n        },\\n        \\"tag\\": \\"bk-crud-client\\",\\n        \\"attributes\\": {}\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"display: flex; flex-direction: column; height: calc(100vh - 64px);; background: white;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js\\"\\n  ]\\n}\\n"
                },
                {
                  "name": "config.json",
                  "content": "{\\n  \\"version\\": 2,\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./marketplace-components\\"\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"mode\\": \\"fixedSideBar\\",\\n          \\"logo\\": {\\n            \\"altText\\": \\"Mia Platform\\",\\n            \\"onClickHref\\": \\"./marketplace-components\\",\\n            \\"url\\": \\"https://www.mia-platform.eu/static/img/logo.svg\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faCartShopping\\"\\n              },\\n              \\"id\\": \\"marketplace\\",\\n              \\"label\\": \\"Marketplace\\"\\n            },\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faTableList\\"\\n              },\\n              \\"id\\": \\"categories\\",\\n              \\"label\\": \\"Categories\\"\\n            },\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faTags\\"\\n              },\\n              \\"id\\": \\"tags\\",\\n              \\"label\\": \\"Tags\\"\\n            },\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@fortawesome/free-solid-svg-icons\\",\\n                \\"selector\\": \\"faUserPlus\\"\\n              },\\n              \\"id\\": \\"requests\\",\\n              \\"label\\": \\"Requests\\"\\n            }\\n          ],\\n          \\"head\\": {\\n            \\"favIconUrl\\": \\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\",\\n            \\"title\\": \\"Dev Portal Backoffice\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#4568B5\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"applications\\": {\\n    \\"marketplace\\": {\\n      \\"config\\": \\"/dev-portal-backoffice-configurations/marketplace.config.json\\",\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./marketplace-components\\"\\n    },\\n    \\"categories\\": {\\n      \\"config\\": \\"/dev-portal-backoffice-configurations/categories.config.json\\",\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./marketplace-categories\\"\\n    },\\n    \\"tags\\": {\\n      \\"config\\": \\"/dev-portal-backoffice-configurations/tags.config.json\\",\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./components-tags\\"\\n    },\\n    \\"requests\\": {\\n      \\"config\\": \\"/dev-portal-backoffice-configurations/requests.config.json\\",\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./marketplace-requests\\"\\n    }\\n  }\\n}\\n"
                },
                {
                  "name": "marketplace.config.json",
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"title\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Title\\",\\n            \\"it\\": \\"Titolo\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Select a title\\",\\n              \\"it\\": \\"Seleziona un titolo\\"\\n            }\\n          }\\n        },\\n        \\"type\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Type\\",\\n            \\"it\\": \\"Tipologia\\"\\n          },\\n          \\"enum\\": [\\n            \\"api\\",\\n            \\"event\\"\\n          ],\\n          \\"visualizationOptions\\": {\\n            \\"iconMap\\": {\\n              \\"api\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#D5A6BD\\"\\n              },\\n              \\"event\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#B6D7A8\\"\\n              }\\n            }\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Select a type\\",\\n              \\"it\\": \\"Seleziona una tipologia\\"\\n            }\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"date-time\\",\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"LLLL\\"\\n          },\\n          \\"label\\": {\\n            \\"en\\": \\"Last Update\\",\\n            \\"it\\": \\"Ultima modifica\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"category\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"lookup\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Category\\",\\n            \\"it\\": \\"Categoria\\"\\n          },\\n          \\"lookupOptions\\": {\\n            \\"lookupDataSource\\": \\"categories\\",\\n            \\"lookupFields\\": [\\n              \\"name\\"\\n            ],\\n            \\"lookupValue\\": \\"_id\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Select a category\\",\\n              \\"it\\": \\"Seleziona una categoria\\"\\n            }\\n          }\\n        },\\n        \\"tags\\": {\\n          \\"type\\": \\"array\\",\\n          \\"format\\": \\"multilookup\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Tags\\",\\n            \\"it\\": \\"Tag\\"\\n          },\\n          \\"lookupOptions\\": {\\n            \\"lookupDataSource\\": \\"tags\\",\\n            \\"lookupFields\\": [\\n              \\"name\\"\\n            ],\\n            \\"lookupValue\\": \\"_id\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Select tags\\",\\n              \\"it\\": \\"Seleziona dei tag\\"\\n            }\\n          }\\n        },\\n        \\"description\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"editor\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Description\\",\\n            \\"it\\": \\"Descrizione\\"\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a description\\",\\n              \\"it\\": \\"Aggiungi una descrizione\\"\\n            }\\n          }\\n        },\\n        \\"linksTitle\\": {\\n          \\"type\\": \\"form-addon\\",\\n          \\"format\\": \\"title\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"Links\\",\\n            \\"it\\": \\"Link\\"\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"linkApiPortal\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"link\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"Api Portal Link\\",\\n            \\"it\\": \\"Link ad API Portal\\"\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hiddenOnUpdate\\": true,\\n            \\"hiddenOnInsert\\": true,\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a Api Portal link\\",\\n              \\"it\\": \\"Aggiungi un link ad API Portal\\"\\n            }\\n          }\\n        },\\n        \\"linkDocumentation\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"link\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Documentation Link\\",\\n            \\"it\\": \\"Link alla Documentazione\\"\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a documentation link\\",\\n              \\"it\\": \\"Aggiungi un link alla documentazione\\"\\n            }\\n          }\\n        },\\n        \\"mediaTitle\\": {\\n          \\"type\\": \\"form-addon\\",\\n          \\"format\\": \\"title\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"Media\\",\\n            \\"it\\": \\"Media\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"icon\\": {\\n          \\"type\\": \\"object\\",\\n          \\"format\\": \\"file\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"Icon\\",\\n            \\"it\\": \\"Icona\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add an icon\\",\\n              \\"it\\": \\"Aggiungi un' icona\\"\\n            }\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"supporterName\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Supporter\\",\\n            \\"it\\": \\"Supporter\\"\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a supporter\\",\\n              \\"it\\": \\"Aggiungi un supporter\\"\\n            }\\n          }\\n        },\\n        \\"supporterIcon\\": {\\n          \\"type\\": \\"object\\",\\n          \\"format\\": \\"file\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"Supporter Icon\\",\\n            \\"it\\": \\"Icona del Supporter\\"\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a supporter icon\\",\\n              \\"it\\": \\"Aggiungi un' icona per il supporter\\"\\n            }\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"__STATE__\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"State\\",\\n            \\"it\\": \\"Stato\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"iconMap\\": {\\n              \\"PUBLIC\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#52C41A\\"\\n              },\\n              \\"DRAFT\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#CDCDCE\\"\\n              }\\n            }\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        }\\n      },\\n      \\"required\\": [\\n        \\"title\\",\\n        \\"type\\",\\n        \\"category\\"\\n      ]\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": {\\n                    \\"en\\": \\"Marketplace\\",\\n                    \\"it\\": \\"Marketplace\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-title\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"placeholder\\": {\\n                \\"en\\": \\"Search...\\",\\n                \\"it\\": \\"Cerca...\\"\\n              }\\n            },\\n            \\"tag\\": \\"bk-search-bar\\",\\n            \\"attributes\\": {}\\n          },\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"initialValues\\": {\\n                    \\"description\\": \\"<h3>Overview</h3>\\\\n<p>In this section, you can write a simple overview of your component. This information can help your clients understand its main purpose and capabilities.</p>\\\\n<p><br></p>\\\\n\\\\n<h3>Introduction</h3>\\\\n<p>After a brief description, you can add further details regarding your component, including popular use cases and which problems it helps to solve. In addition, you can include details regarding the team behind its implementation, the interfaces it provides, and also how it performs in terms of speed and reliability.</p>\\\\n<p><br></p>\\\\n\\\\n<h3>Pricing</h3>\\\\n<p>Here you can structure a pricing plan where you analyze in detail every requirement linked to your component usage. Popular pricing frameworks include different subscription plans, composed for example of free and professional tiers.</p>\\\\n<p><br></p>\\\\n\\\\n<h3>Documentation</h3>\\\\n<p>In this section, you can describe all the technical details regarding your component, including the routes it offers and some related examples.</p>\\\\n<p>Furthermore, you can add links directed to the <a href='https://docs.mia-platform.eu/' rel='noopener noreferrer' target='_blank'>official documentation</a> where your component is described exhaustively.</p>\\\\n<p><br></p>\\\\n\\\\n<h4>Routes</h4>\\\\n<p>Here you can define all the possible ways your component can be accessed from the outside and their relative interfaces.</p>\\\\n<p><br></p>\\\\n\\\\n<h4>Examples</h4>\\\\n<p>Once you have defined how your component can be accessed, you can use the following section to provide examples including specific pieces of code:</p>\\\\n<pre class='ql-syntax' spellcheck='false'>\\\\n  module.exports = function toDate (value, fieldName, logger) {\\\\n    const date = new Date(value)\\\\n    if (date.toString() !== 'Invalid Date') {\\\\n      return date\\\\n    }\\\\n    logger.debug({fieldName}, 'cannot be converted to date')\\\\n    return undefined\\\\n  }\\\\n</pre>\\\\n<p><br></p>\\\\n\\\\n<h3>Support</h3>\\\\n<p>Here you can include a link redirecting to your customer support service: <a href='https://docs.mia-platform.eu/' rel='noopener noreferrer' target='_blank'>Learn more</a>.</p>\\\\n<p><br></p>\\\\n\\\\n<h3>Terms of service</h3>\\\\n<p>In this section you can specify all the terms and conditions of the software license associated with your component. <a href='https://docs.mia-platform.eu/' rel='noopener noreferrer' target='_blank'>Terms of service</a>.</p>\\\\n<p><br></p>\\\\n\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-add-new-button\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-add-filter-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; justify-content: space-between; margin: 1vw 2vw 0.5vw 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"tabs\\": [\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"All\\",\\n                    \\"it\\": \\"Tutte\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"DRAFT\\"\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Draft\\",\\n                    \\"it\\": \\"Da Pubblicare\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"PUBLIC\\"\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Public\\",\\n                    \\"it\\": \\"Pubbliche\\"\\n                  }\\n                }\\n              ]\\n            },\\n            \\"tag\\": \\"bk-tabs\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"filters\\": []\\n            },\\n            \\"tag\\": \\"bk-filters-manager\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; margin: 0 2vw; gap: 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"rowActions\\": {\\n                    \\"kind\\": \\"icons\\",\\n                    \\"actions\\": [\\n                      {\\n                        \\"label\\": {\\n                          \\"en\\": \\"Download Icon\\",\\n                          \\"it\\": \\"Scarica Icona\\"\\n                        },\\n                        \\"icon\\": \\"fas fa-download\\",\\n                        \\"kind\\": \\"event\\",\\n                        \\"content\\": \\"download-file\\",\\n                        \\"meta\\": {\\n                          \\"property\\": \\"icon\\"\\n                        }\\n                      },\\n                      {\\n                        \\"label\\": {\\n                          \\"en\\": \\"Delete\\",\\n                          \\"it\\": \\"Elimina\\"\\n                        },\\n                        \\"icon\\": \\"far fa-trash-alt\\",\\n                        \\"kind\\": \\"event\\",\\n                        \\"content\\": \\"delete-data\\",\\n                        \\"requireConfirm\\": {\\n                          \\"cancelText\\": {\\n                            \\"en\\": \\"Cancel\\",\\n                            \\"it\\": \\"Annulla\\"\\n                          },\\n                          \\"content\\": \\"Are you sure you want to delete this component?\\",\\n                          \\"okText\\": {\\n                            \\"en\\": \\"Delete\\",\\n                            \\"it\\": \\"Elimina\\"\\n                          },\\n                          \\"title\\": \\"Delete Component\\"\\n                        }\\n                      }\\n                    ]\\n                  }\\n                },\\n                \\"tag\\": \\"bk-table\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"height: 90%\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"requireConfirm\\": {\\n                    \\"cancelText\\": {\\n                      \\"en\\": \\"Keep editing\\",\\n                      \\"it\\": \\"Continua a modificare\\"\\n                    },\\n                    \\"content\\": \\"Your changes will be lost if you don't save them.\\",\\n                    \\"okText\\": {\\n                      \\"en\\": \\"Close without saving\\",\\n                      \\"it\\": \\"Esci senza salvare\\"\\n                    },\\n                    \\"title\\": \\"Save changes before closing?\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-form-modal\\",\\n                \\"attributes\\": {\\n                  \\"height\\": \\"65vh\\",\\n                  \\"width\\": \\"80vw\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"400\\"\\n                },\\n                \\"tag\\": \\"bk-filter-drawer\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-file-picker-drawer\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: column; background-color: #f0f2f5; padding: 1.2vw 2vw; flex-grow: 1; position:relative; overflow:hidden;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; flex-grow: 1;position:relative;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; position: sticky; justify-content: space-between; margin: 0.5vw 2vw; background-color: white; z-index: 10; bottom: 0; max-height: 64px;\\"\\n        }\\n      },\\n      {\\n        \\"tag\\": \\"bk-confirmation-modal\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"rootElementSelectors\\": \\".composer-body\\",\\n          \\"errorEventMap\\": {\\n            \\"update-data\\": {\\n              \\"type\\": \\"error\\",\\n              \\"content\\": {\\n                \\"en\\": \\"The data has not been updated correctly\\",\\n                \\"it\\": \\"I dati non sono stati aggiornati correttamente\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"tag\\": \\"bk-notifications\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/components\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          },\\n          \\"enableDefinitiveDelete\\": true\\n        },\\n        \\"tag\\": \\"bk-crud-client\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2\\",\\n          \\"lookupDefaultState\\": [\\n            \\"PUBLIC\\"\\n          ],\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-lookup-client\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/files-service\\"\\n        },\\n        \\"tag\\": \\"bk-file-client\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"tag\\": \\"bk-file-manager\\",\\n        \\"attributes\\": {}\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"display: flex; flex-direction: column; height: calc(100vh - 64px); background: white;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js\\"\\n  ]\\n}\\n"
                },
                {
                  "name": "requests.config.json",
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"userName\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"User name\\",\\n            \\"it\\": \\"Nome utente\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          }\\n        },\\n        \\"userEmail\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"email\\",\\n          \\"label\\": {\\n            \\"en\\": \\"User e-mail\\",\\n            \\"it\\": \\"E-Mail utente\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          }\\n        },\\n        \\"userOrganization\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"email\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Organization\\",\\n            \\"it\\": \\"Organizzazione\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          }\\n        },\\n        \\"publicKey\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Public Key\\",\\n            \\"it\\": \\"Chiave Pubblica\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"additionalDescription\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Details\\",\\n            \\"it\\": \\"Dettagli\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"requestedComponentId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"lookup\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"label\\": {\\n            \\"en\\": \\"Component name\\",\\n            \\"it\\": \\"Nome component\\"\\n          },\\n          \\"lookupOptions\\": {\\n            \\"lookupValue\\": \\"_id\\",\\n            \\"lookupFields\\": [\\n              \\"title\\"\\n            ],\\n            \\"lookupDataSource\\": \\"components\\"\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"date-time\\",\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"LLLL\\"\\n          },\\n          \\"label\\": {\\n            \\"en\\": \\"Insert date\\",\\n            \\"it\\": \\"Data inserimento\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          }\\n        },\\n        \\"managePermissions\\": {\\n          \\"type\\": \\"form-addon\\",\\n          \\"format\\": \\"link\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"label\\": {\\n            \\"en\\": \\"Manage Permissions\\",\\n            \\"it\\": \\"Gestione Permessi\\"\\n          },\\n          \\"formLinkOptions\\": {\\n            \\"href\\": \\"https://www.mia-platform.eu/\\",\\n            \\"target\\": \\"_blank\\",\\n            \\"icon\\": \\"fas fa-key\\"\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"status\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text\\",\\n          \\"enum\\": [\\n            \\"PENDING\\",\\n            \\"APPROVED\\",\\n            \\"DENIED\\",\\n            \\"ARCHIVED\\"\\n          ],\\n          \\"label\\": {\\n            \\"en\\": \\"Request status\\",\\n            \\"it\\": \\"Stato richiesta\\"\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        }\\n      },\\n      \\"required\\": []\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": {\\n                    \\"en\\": \\"Requests\\",\\n                    \\"it\\": \\"Richieste\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-title\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"placeholder\\": {\\n                \\"en\\": \\"Search...\\",\\n                \\"it\\": \\"Cerca...\\"\\n              }\\n            },\\n            \\"tag\\": \\"bk-search-bar\\",\\n            \\"attributes\\": {}\\n          },\\n          {\\n            \\"tag\\": \\"bk-add-filter-button\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; align-items: center; justify-content: space-between; margin: 1vw 2vw 0.5vw 2vw;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"tabs\\": [\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"status\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"PENDING\\"\\n                    },\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Pending\\",\\n                    \\"it\\": \\"In sospeso\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"status\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"APPROVED\\"\\n                    },\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Approved\\",\\n                    \\"it\\": \\"Approvato\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"status\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"DENIED\\"\\n                    },\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Denied\\",\\n                    \\"it\\": \\"Rifiutato\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"status\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"ARCHIVED\\"\\n                    },\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Archived\\",\\n                    \\"it\\": \\"Archiviato\\"\\n                  }\\n                }\\n              ]\\n            },\\n            \\"tag\\": \\"bk-tabs\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"filters\\": []\\n            },\\n            \\"tag\\": \\"bk-filters-manager\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; margin: 0 2vw; gap: 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"rowActions\\": {\\n                    \\"kind\\": \\"icons\\",\\n                    \\"actions\\": [\\n                      {\\n                        \\"label\\": {\\n                          \\"en\\": \\"Delete\\",\\n                          \\"it\\": \\"Elimina\\"\\n                        },\\n                        \\"icon\\": \\"far fa-trash-alt\\",\\n                        \\"kind\\": \\"event\\",\\n                        \\"content\\": \\"delete-data\\",\\n                        \\"requireConfirm\\": {\\n                          \\"cancelText\\": {\\n                            \\"en\\": \\"Cancel\\",\\n                            \\"it\\": \\"Annulla\\"\\n                          },\\n                          \\"content\\": \\"Are you sure you want to delete this request?\\",\\n                          \\"okText\\": {\\n                            \\"en\\": \\"Delete\\",\\n                            \\"it\\": \\"Elimina\\"\\n                          },\\n                          \\"title\\": \\"Delete Request\\"\\n                        }\\n                      }\\n                    ]\\n                  }\\n                },\\n                \\"tag\\": \\"bk-table\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"height: 90%\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"60vw\\",\\n                  \\"requireConfirm\\": {\\n                    \\"cancelText\\": {\\n                      \\"en\\": \\"Keep editing\\",\\n                      \\"it\\": \\"Continua a modificare\\"\\n                    },\\n                    \\"content\\": \\"Your changes will be lost if you don't save them.\\",\\n                    \\"okText\\": {\\n                      \\"en\\": \\"Close without saving\\",\\n                      \\"it\\": \\"Esci senza salvare\\"\\n                    },\\n                    \\"title\\": \\"Save changes before closing?\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-form-modal\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"400\\"\\n                },\\n                \\"tag\\": \\"bk-filter-drawer\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-file-picker-drawer\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: column; background-color: #f0f2f5; padding: 1.2vw 2vw; flex-grow: 1; position:relative; overflow:hidden;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; flex-grow: 1;position:relative;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"disableStateChange\\": true\\n            },\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; position: sticky; justify-content: space-between; margin: 0.5vw 2vw; background-color: white; z-index: 10; bottom: 0; max-height: 64px;\\"\\n        }\\n      },\\n      {\\n        \\"tag\\": \\"bk-confirmation-modal\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"rootElementSelectors\\": \\".composer-body\\",\\n          \\"errorEventMap\\": {\\n            \\"update-data\\": {\\n              \\"type\\": \\"error\\",\\n              \\"content\\": {\\n                \\"en\\": \\"The data has not been updated correctly\\",\\n                \\"it\\": \\"I dati non sono stati aggiornati correttamente\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"tag\\": \\"bk-notifications\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/requests\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          },\\n          \\"enableDefinitiveDelete\\": true\\n        },\\n        \\"tag\\": \\"bk-crud-client\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-lookup-client\\",\\n        \\"attributes\\": {}\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"display: flex; flex-direction: column; height: calc(100vh - 64px); background: white;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js\\"\\n  ]\\n}\\n"
                },
                {
                  "name": "tags.config.json",
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"name\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Name\\",\\n            \\"it\\": \\"Nome\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Select a name\\",\\n              \\"it\\": \\"Seleziona un nome\\"\\n            }\\n          }\\n        },\\n        \\"description\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text-area\\",\\n          \\"label\\": {\\n            \\"en\\": \\"Description\\",\\n            \\"it\\": \\"Descrizione\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"placeholder\\": {\\n              \\"en\\": \\"Add a description\\",\\n              \\"it\\": \\"Aggiungi una descrizione\\"\\n            }\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"date-time\\",\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"LLLL\\"\\n          },\\n          \\"label\\": {\\n            \\"en\\": \\"Last Update\\",\\n            \\"it\\": \\"Ultima modifica\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"__STATE__\\": {\\n          \\"type\\": \\"string\\",\\n          \\"format\\": \\"text\\",\\n          \\"excludeFromSearch\\": true,\\n          \\"label\\": {\\n            \\"en\\": \\"State\\",\\n            \\"it\\": \\"Stato\\"\\n          },\\n          \\"formOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"iconMap\\": {\\n              \\"PUBLIC\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#52C41A\\"\\n              },\\n              \\"DRAFT\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#CDCDCE\\"\\n              }\\n            }\\n          },\\n          \\"filtersOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        }\\n      },\\n      \\"required\\": [\\n        \\"name\\"\\n      ]\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": {\\n                    \\"en\\": \\"Tags\\",\\n                    \\"it\\": \\"Tags\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-title\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"placeholder\\": {\\n                \\"en\\": \\"Search...\\",\\n                \\"it\\": \\"Cerca...\\"\\n              }\\n            },\\n            \\"tag\\": \\"bk-search-bar\\",\\n            \\"attributes\\": {}\\n          },\\n          {\\n            \\"content\\": [\\n              {\\n                \\"tag\\": \\"bk-add-new-button\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"tag\\": \\"bk-add-filter-button\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; align-items: center; gap: 1vw;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; justify-content: space-between; margin: 1vw 2vw 0.5vw 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"tabs\\": [\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"includeSome\\",\\n                      \\"value\\": [\\n                        \\"PUBLIC\\",\\n                        \\"DRAFT\\"\\n                      ]\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"All\\",\\n                    \\"it\\": \\"Tutte\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"DRAFT\\"\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Draft\\",\\n                    \\"it\\": \\"Da Pubblicare\\"\\n                  }\\n                },\\n                {\\n                  \\"filters\\": [\\n                    {\\n                      \\"property\\": \\"__STATE__\\",\\n                      \\"operator\\": \\"equal\\",\\n                      \\"value\\": \\"PUBLIC\\"\\n                    }\\n                  ],\\n                  \\"title\\": {\\n                    \\"en\\": \\"Public\\",\\n                    \\"it\\": \\"Pubbliche\\"\\n                  }\\n                }\\n              ]\\n            },\\n            \\"tag\\": \\"bk-tabs\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"filters\\": []\\n            },\\n            \\"tag\\": \\"bk-filters-manager\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; margin: 0 2vw; align-items: center;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"rowActions\\": {\\n                    \\"kind\\": \\"icons\\",\\n                    \\"actions\\": [\\n                      {\\n                        \\"label\\": {\\n                          \\"en\\": \\"Delete\\",\\n                          \\"it\\": \\"Elimina\\"\\n                        },\\n                        \\"icon\\": \\"far fa-trash-alt\\",\\n                        \\"kind\\": \\"event\\",\\n                        \\"content\\": \\"delete-data\\",\\n                        \\"requireConfirm\\": {\\n                          \\"cancelText\\": {\\n                            \\"en\\": \\"Cancel\\",\\n                            \\"it\\": \\"Annulla\\"\\n                          },\\n                          \\"content\\": \\"Are you sure you want to delete this tag?\\",\\n                          \\"okText\\": {\\n                            \\"en\\": \\"Delete\\",\\n                            \\"it\\": \\"Elimina\\"\\n                          },\\n                          \\"title\\": \\"Delete Tag\\"\\n                        }\\n                      }\\n                    ]\\n                  }\\n                },\\n                \\"tag\\": \\"bk-table\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"height: 90%\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"60vw\\",\\n                  \\"requireConfirm\\": {\\n                    \\"cancelText\\": {\\n                      \\"en\\": \\"Keep editing\\",\\n                      \\"it\\": \\"Continua a modificare\\"\\n                    },\\n                    \\"content\\": \\"Your changes will be lost if you don't save them.\\",\\n                    \\"okText\\": {\\n                      \\"en\\": \\"Close without saving\\",\\n                      \\"it\\": \\"Esci senza salvare\\"\\n                    },\\n                    \\"title\\": \\"Save changes before closing?\\"\\n                  }\\n                },\\n                \\"tag\\": \\"bk-form-modal\\",\\n                \\"attributes\\": {}\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"width\\": \\"400\\"\\n                },\\n                \\"tag\\": \\"bk-filter-drawer\\",\\n                \\"attributes\\": {}\\n              }\\n            ],\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: column; background-color: #f0f2f5; padding: 1.2vw 2vw; flex-grow: 1; position:relative; overflow:hidden;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; flex-grow: 1;position:relative;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"margin: auto 0;\\"\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"div\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; position: sticky; justify-content: space-between; margin: 0.5vw 2vw; background-color: white; z-index: 10; bottom: 0; max-height: 64px;\\"\\n        }\\n      },\\n      {\\n        \\"tag\\": \\"bk-confirmation-modal\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"rootElementSelectors\\": \\".composer-body\\",\\n          \\"errorEventMap\\": {\\n            \\"update-data\\": {\\n              \\"type\\": \\"error\\",\\n              \\"content\\": {\\n                \\"en\\": \\"Data haven't been updated correctly\\",\\n                \\"it\\": \\"I dati non sono stati aggiornati correttamente\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"tag\\": \\"bk-notifications\\",\\n        \\"attributes\\": {}\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/tags\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          },\\n          \\"enableDefinitiveDelete\\": true\\n        },\\n        \\"tag\\": \\"bk-crud-client\\",\\n        \\"attributes\\": {}\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"display: flex; flex-direction: column; height: calc(100vh - 64px); background: white;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js\\"\\n  ]\\n}\\n"
                }
              ]
            },
            {
              "name": "backoffice-server-configuration",
              "mountPath": "/usr/src/app/config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</dev-portal-backoffice-configurations/config.json>; rel=preload; as=fetch; crossorigin\\",\\n        \\"</dev-portal-backoffice/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/1.5.9/dist/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}\\n"
                }
              ]
            },
            {
              "name": "backoffice-assets",
              "mountPath": "/usr/static/public/assets",
              "files": [
                {
                  "name": "style.css",
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "links": [
            {
              "label": "Microfrontend Composer",
              "targetSection": "microfrontend-composer",
              "enableIf": "ENABLE_BACKOFFICE_CONFIGURATOR"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/components": {
          "defaultBasePath": "/components",
          "defaultPathRewrite": "/components",
          "description": "Endpoint /components",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "collectionId": "components",
          "pathName": "/",
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/categories": {
          "defaultBasePath": "/categories",
          "defaultPathRewrite": "/categories",
          "description": "Endpoint /categories",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "collectionId": "categories",
          "pathName": "/",
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/tags": {
          "defaultBasePath": "/tags",
          "defaultPathRewrite": "/tags",
          "description": "Endpoint /tags",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "collectionId": "tags",
          "pathName": "/",
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/requests": {
          "defaultBasePath": "/requests",
          "defaultPathRewrite": "/requests",
          "description": "Endpoint /requests",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "collectionId": "requests",
          "pathName": "/",
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/files-service": {
          "defaultBasePath": "/files-service",
          "defaultPathRewrite": "/",
          "description": "Endpoint /files-service",
          "type": "custom",
          "tags": [
            "files"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "files-service"
        },
        "/documentations/api-portal": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/documentations/api-portal",
          "defaultPathRewrite": "/swagger",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": true,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/openapi": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/api/openapi",
          "defaultPathRewrite": "/openapi/v3-1",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/api/openapi/raw": {
          "service": "swagger-aggregator",
          "defaultBasePath": "/api/openapi/raw",
          "defaultPathRewrite": "/",
          "type": "custom",
          "description": "",
          "tags": [
            "api-docs"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/dev-portal-marketplace-bff": {
          "defaultBasePath": "/dev-portal-marketplace-bff",
          "defaultPathRewrite": "/",
          "description": "Endpoint /dev-portal-marketplace-bff",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-marketplace-bff"
        },
        "/dev-portal": {
          "defaultBasePath": "/dev-portal",
          "defaultPathRewrite": "/",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal-home": {
          "defaultBasePath": "/dev-portal-home",
          "defaultPathRewrite": "/dev-portal-home",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal-documentation": {
          "defaultBasePath": "/dev-portal-documentation",
          "defaultPathRewrite": "/dev-portal-documentation",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal/documentation/assets": {
          "defaultBasePath": "/dev-portal/documentation/assets",
          "defaultPathRewrite": "/dev-portal-documentation/assets",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal/documentation/img": {
          "defaultBasePath": "/dev-portal/documentation/img",
          "defaultPathRewrite": "/dev-portal-documentation/img",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal-marketplace": {
          "defaultBasePath": "/dev-portal-marketplace",
          "defaultPathRewrite": "/dev-portal-marketplace",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal/marketplace/assets": {
          "defaultBasePath": "/dev-portal/marketplace/assets",
          "defaultPathRewrite": "/dev-portal-marketplace/assets",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal/marketplace/img": {
          "defaultBasePath": "/dev-portal/marketplace/img",
          "defaultPathRewrite": "/dev-portal-marketplace/img",
          "description": "",
          "type": "custom",
          "tags": [
            "dev-portal"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-frontend"
        },
        "/dev-portal-backoffice": {
          "defaultBasePath": "/dev-portal-backoffice",
          "defaultPathRewrite": "/public",
          "description": "",
          "type": "custom",
          "tags": [
            "backoffice"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-backoffice"
        },
        "/dev-portal-backoffice-configurations": {
          "defaultBasePath": "/dev-portal-backoffice-configurations",
          "defaultPathRewrite": "/configurations",
          "description": "",
          "type": "custom",
          "tags": [
            "backoffice"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "dev-portal-backoffice"
        }
      },
      "collections": {
        "file_records": {
          "id": "file_records",
          "description": "Collection of file records implementing the JS File interface",
          "defaultName": "file_records",
          "type": "collection",
          "tags": [
            "files"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "file",
              "type": "string",
              "required": false,
              "nullable": false
            },
            {
              "name": "location",
              "type": "string",
              "required": false,
              "nullable": false
            },
            {
              "name": "size",
              "type": "number",
              "required": true,
              "nullable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/file-records",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "components": {
          "id": "components",
          "description": "Collection of components",
          "defaultName": "components",
          "type": "collection",
          "tags": [
            "dev portal"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "title",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "icon",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "category",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "type",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "linkApiPortal",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "linkDocumentation",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "supporterName",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "supporterIcon",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "tags",
              "type": "Array_string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/components",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "categories": {
          "id": "categories",
          "description": "Collection of categories",
          "defaultName": "categories",
          "type": "collection",
          "tags": [
            "dev portal"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/categories",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "tags": {
          "id": "tags",
          "description": "Collection of tags",
          "defaultName": "tags",
          "type": "collection",
          "tags": [
            "dev portal"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/tags",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "requests": {
          "id": "requests",
          "description": "Collection of requests",
          "defaultName": "requests",
          "type": "collection",
          "tags": [
            "dev portal"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "userEmail",
              "description": "E-mail of the user that is requesting access",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": true,
              "encryptionSearchable": true
            },
            {
              "name": "userName",
              "description": "Name of the user that is requesting access",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "status",
              "description": "Request status",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "userOrganization",
              "description": "Organization the user belongs to",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "requestedComponentId",
              "type": "ObjectId",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "publicKey",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityDescription": "Public key of the user that is requesting the access",
              "sensitivityValue": 2,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "additionalDescription",
              "description": "Additional description provided by the requestor user",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/requests",
              "defaultState": "PUBLIC"
            }
          ]
        }
      },
      "listeners": {
        "frontend": {
          "description": "Default listener for frontend API",
          "name": "frontend",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          },
          "port": "8080",
          "selectedByDefault": true
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-08-31T07:46:09.508Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "dev-portal.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/device-manager/overview"
    },
    "itemId": "device-manager",
    "name": "Device Manager",
    "description": "Collect, store and visualize patient health data from medical and wearable devices.",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/device-manager",
    "resources": {
      "services": {
        "device-manager": {
          "type": "plugin",
          "name": "device-manager",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/device-manager:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "TMM_SERVICE_URL",
              "value": "http://therapy-monitoring-manager",
              "valueType": "plain"
            },
            {
              "name": "CRUD_DEVICES_ENDPOINT",
              "value": "/tdm-dm-devices",
              "valueType": "plain"
            },
            {
              "name": "CRUD_HEALTH_DATA_ENDPOINT",
              "value": "/tdm-dm-health-data",
              "valueType": "plain"
            },
            {
              "name": "CRUD_HEALTH_DATA_TYPE_ENDPOINT",
              "value": "/tdm-dm-health-data-type",
              "valueType": "plain"
            },
            {
              "name": "TMM_MONITORINGS_ENDPOINT",
              "value": "/monitorings",
              "valueType": "plain"
            },
            {
              "name": "TMM_DETECTIONS_ENDPOINT",
              "value": "/detections",
              "valueType": "plain"
            },
            {
              "name": "TMM_PROTOTYPES_ENDPOINT",
              "value": "/prototypes",
              "valueType": "plain"
            },
            {
              "name": "MEDISANTE_PROVIDER",
              "value": "medisante",
              "valueType": "plain"
            },
            {
              "name": "HEALTHKIT_PROVIDER",
              "value": "healthkit",
              "valueType": "plain"
            },
            {
              "name": "STANDARD_JSON_MEDISANTE",
              "value": "medisante-standard-json",
              "valueType": "plain"
            },
            {
              "name": "STANDARD_JSON_HEALTHKIT",
              "value": "healthkit-standard-json",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "DATA_ACQUISITION_JOB_COLLECTION",
              "value": "tdm_dm_data_acquisition_jobs",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "First release"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.018Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "device-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "monitoring",
    "description": "This plugin reports status of the running microservices in your project.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/doctor-service/configuration"
    },
    "itemId": "doctor-service",
    "name": "Doctor Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/doctor-service",
    "resources": {
      "services": {
        "doctor-service": {
          "type": "plugin",
          "name": "doctor-service",
          "description": "This plugin reports status of the running microservices in your project.",
          "dockerImage": "nexus.mia-platform.eu/core/doctor-service:2.0.2",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "SERVICES_LIST_PATH",
              "value": "CHANGE_WITH_YOUR_SERVICES_LIST_PATH",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.011Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "doctor-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "monitoring",
    "description": "This plugin reports status of the running microservices in your project.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/doctor-service/configuration"
    },
    "itemId": "doctor-service",
    "name": "Doctor Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/doctor-service",
    "resources": {
      "services": {
        "doctor-service": {
          "type": "plugin",
          "name": "doctor-service",
          "description": "This plugin reports status of the running microservices in your project.",
          "dockerImage": "nexus.mia-platform.eu/core/doctor-service:2.0.2",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "SERVICES_LIST_PATH",
              "value": "CHANGE_WITH_YOUR_SERVICES_LIST_PATH",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "doctor-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "This is the application that sets up a Drools Workbench and a Kie Server instance",
    "documentation": {
      "type": "externalLink",
      "url": "https://hub.docker.com/r/jboss/drools-workbench/"
    },
    "itemId": "drools-and-kie-server",
    "name": "Drools and Kie Server",
    "resources": {
      "services": {
        "drools-workbench": {
          "type": "plugin",
          "name": "drools-workbench",
          "description": "This is a ready to run Docker image for JBoss Drools Workbench. Just run it and try the Drools workbench!",
          "dockerImage": "nexus.mia-platform.eu/cache/jboss/drools-workbench-showcase:latest",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "50m",
              "max": "1000m"
            },
            "memoryLimits": {
              "min": "1000Mi",
              "max": "2000Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "failureThreshold": 3,
              "successThreshold": 1
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        },
        "kie-server": {
          "type": "plugin",
          "name": "kie-server",
          "description": "This is a ready to run Docker image for Drools KIE Server. Just run it and try the Drools runtime execution server!",
          "dockerImage": "nexus.mia-platform.eu/cache/jboss/kie-server-showcase:latest",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "KIE_SERVER_CONTROLLER",
              "value": "http://drools-workbench:80/business-central/rest/controller",
              "valueType": "plain"
            },
            {
              "name": "KIE_SERVER_CONTROLLER_USER",
              "value": "{{KIE_SERVER_CONTROLLER_USER}}",
              "valueType": "plain"
            },
            {
              "name": "KIE_SERVER_CONTROLLER_PWD",
              "value": "{{KIE_SERVER_CONTROLLER_PASSWORD}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "50m",
              "max": "1000m"
            },
            "memoryLimits": {
              "min": "1000Mi",
              "max": "2000Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "failureThreshold": 3,
              "successThreshold": 1
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-02-14T08:23:50.713Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "drools-application.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "healthcare",
    "description": "This application allows to quickly setup the necessary services in order to handle forms and medical reports.",
    "itemId": "ehr-module",
    "name": "EHR Module",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/applications/ehr-module",
    "resources": {
      "collections": {
        "ehr_clinical_diaries": {
          "defaultName": "ehr_clinical_diaries",
          "description": "Collection of ehr_clinical_diaries",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "Date of the clinical diary record",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "date",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "description": "The group of the creator of the diary record",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "role",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "Type of diary note. It can be \\"free note\\" or \\"event\\".",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "annotationType",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "Type of event. It is filled only when annotationType is set to \\"event\\".",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "eventType",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "Patient reported outcomes and info. It is a long text about the patient.",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientReportedOutcomes",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "clinicalNotes",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "decisions",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "The role of the user that writes the diary notes.",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "userGroup",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "The id of the patient of the clinical diary.",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "ehr_clinical_diaries",
          "internalEndpoints": [
            {
              "basePath": "/ehr-clinical-diaries",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "ehr_fs_filled_forms": {
          "defaultName": "ehr_fs_filled_forms",
          "description": "Collection of ehr_fs_form_anamnesis",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "data",
              "nullable": false,
              "required": false,
              "schema": {
                "additionalProperties": true,
                "properties": {
                  "patientId": {
                    "type": "string"
                  }
                }
              },
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "formSchemaId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "hasDraft",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isValid",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            }
          ],
          "id": "ehr_fs_filled_forms",
          "internalEndpoints": [
            {
              "basePath": "/ehr-fs-filled-forms",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "ehr_fs_form_drafts": {
          "defaultName": "ehr_fs_form_drafts",
          "description": "Collection of ehr_fs_form_drafts",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "data",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "formSchemaId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "stableFormId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "ehr_fs_form_drafts",
          "internalEndpoints": [
            {
              "basePath": "/ehr-fs-form-drafts",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "ehr_fs_form_schema_maps": {
          "defaultName": "ehr_fs_form_schema_maps",
          "description": "Collection of ehr_fs_form_schema_maps",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "the id of the form data seved in the formSubmitUrl CRUD endpoint",
              "name": "formDataId",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "the id of the form schema in the form_schemas CRUD",
              "name": "formSchemaId",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "options for the form visualizer: eg: readOnly, noAlerts... ",
              "name": "options",
              "nullable": false,
              "required": false,
              "type": "RawObject"
            }
          ],
          "id": "ehr_fs_form_schema_maps",
          "internalEndpoints": [
            {
              "basePath": "/ehr-fs-form-schema-maps",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "ehr_fs_form_schemas": {
          "defaultName": "ehr_fs_form_schemas",
          "description": "Collection of ehr_fs_form_schemas",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "the name of the form",
              "name": "name",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "the URL to call on form submission",
              "name": "formSubmitUrl",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "the JSON schema of the form",
              "name": "formSchema",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "category",
              "nullable": true,
              "required": false,
              "type": "string"
            },
            {
              "description": "",
              "name": "audience",
              "nullable": true,
              "required": false,
              "type": "string"
            },
            {
              "description": "Form's expiration date",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "formExpirationDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPrivate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isEditable",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "description": "Email template to send to the users when form is submitted",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailTemplateId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "ObjectId"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailCarbonCopies",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailBlindCarbonCopies",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailEnabled",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "formExpirationMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailSender",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "formAvailabilityDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "enabledUserGroups",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "formVisualizerOptions",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "parent",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "ehr_fs_form_schemas",
          "internalEndpoints": [
            {
              "basePath": "/ehr-fs-form-schemas",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "ehr_medical_reports": {
          "defaultName": "ehr_medical_reports",
          "description": "Collection of ehr_medical_reports",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "role",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "examDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "examType",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "clinicalQuestion",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "clinicalNotes",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "outcome",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "ehr_medical_reports",
          "internalEndpoints": [
            {
              "basePath": "/ehr-medical-reports",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/api/v1/forms": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/api/v1/forms",
          "defaultPathRewrite": "/",
          "description": "Endpoint /api/v1/forms",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "form-service-backend",
          "tags": [
            "form-service-backend"
          ],
          "type": "custom"
        },
        "/ehr-clinical-diaries": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "ehr_clinical_diaries",
          "defaultBasePath": "/ehr-clinical-diaries",
          "defaultPathRewrite": "/ehr-clinical-diaries",
          "description": "Endpoint /ehr-clinical-diaries",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/ehr-medical-reports": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "ehr_medical_reports",
          "defaultBasePath": "/ehr-medical-reports",
          "defaultPathRewrite": "/ehr-medical-reports",
          "description": "Endpoint /ehr-medical-reports",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/form-service": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/form-service",
          "defaultPathRewrite": "/",
          "description": "Endpoint /form-service",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "form-service-frontend",
          "tags": [
            "form-service-frontend"
          ],
          "type": "custom"
        }
      },
      "services": {
        "api-gateway": {
          "additionalContainers": [
            {
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultEnvironmentVariables": [
                {
                  "name": "LOG_LEVEL",
                  "value": "{{LOG_LEVEL}}",
                  "valueType": "plain"
                },
                {
                  "name": "TRUSTED_PROXIES",
                  "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
                  "valueType": "plain"
                },
                {
                  "name": "HTTP_PORT",
                  "value": "3000",
                  "valueType": "plain"
                },
                {
                  "name": "USERID_HEADER_KEY",
                  "value": "miauserid",
                  "valueType": "plain"
                },
                {
                  "name": "GROUPS_HEADER_KEY",
                  "value": "miausergroups",
                  "valueType": "plain"
                },
                {
                  "name": "CLIENTTYPE_HEADER_KEY",
                  "value": "client-type",
                  "valueType": "plain"
                },
                {
                  "name": "BACKOFFICE_HEADER_KEY",
                  "value": "isbackoffice",
                  "valueType": "plain"
                },
                {
                  "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
                  "value": "microservice-gateway",
                  "valueType": "plain"
                },
                {
                  "name": "USER_PROPERTIES_HEADER_KEY",
                  "value": "miauserproperties",
                  "valueType": "plain"
                }
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              },
              "defaultResources": {
                "cpuLimits": {
                  "min": "10m"
                },
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                }
              },
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "name": "dnsmasq"
            }
          ],
          "componentId": "api-gateway",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "mountPath": "/etc/nginx/conf.d",
              "name": "api-gateway-server",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/platform.d",
              "name": "api-gateway-platform",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/nginx/customization.d",
              "name": "api-gateway-customization",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/backoffice.d",
              "name": "api-gateway-backoffice",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend"
            },
            "readiness": {
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "name": "api-gateway",
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "url",
              "secretName": "mongodb",
              "valueType": "secret"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mongodb",
              "name": "mongodb"
            }
          ],
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:{{CRUD_SERVICE_VERSION}}",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "form-service-backend": {
          "componentId": "form-service-backend",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{\\n  \\"theming\\": {\\n    \\"primaryColor\\": \\"#00b359\\"\\n  },\\n  \\"formSchemasCrud\\": \\"/ehr-fs-form-schemas\\",\\n  \\"formSchemaMapCrud\\": \\"/ehr-fs-form-schema-maps\\",\\n  \\"formDraftsCrud\\": \\"/ehr-fs-form-drafts\\",\\n  \\"formMetadata\\": [],\\n  \\"formSubmitUrls\\": [\\n    {\\n      \\"id\\": \\"ehr-fs-filled-forms\\",\\n      \\"submitUrl\\": \\"http://crud-service/ehr-fs-filled-forms\\",\\n      \\"label\\": \\"EHR module - filled forms collection\\"\\n    }\\n  ],\\n  \\"formVisualizerOptions\\": {\\n    \\"autosaveIntervalValueMs\\": 10000,\\n    \\"messageToBeShownOnExpiredForm\\": \\"This form is expired!\\",\\n    \\"language\\": \\"it\\"\\n  },\\n  \\"formBuilderCustomProperties\\": {\\n    \\"formAvailabilityDateFormat\\": \\"DD-MM-YYYY\\",\\n    \\"formExpirationDateFormat\\": \\"DD-MM-YYYY\\"\\n  },\\n  \\"formBuilderOptions\\": {\\n    \\"builder\\": {\\n      \\"premium\\": {\\n        \\"ignore\\": true\\n      }\\n    },\\n    \\"editForm\\": {\\n      \\"textfield\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"textArea\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"number\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"password\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"checkbox\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"selectBoxes\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"select\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"radio\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"button\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"email\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"url\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"phoneNumber\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"tags\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"address\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"dateTime\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"day\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"survey\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"signature\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"hidden\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"container\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"datamap\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"dataGrid\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"editGrid\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ],\\n      \\"tree\\": [\\n        {\\n          \\"key\\": \\"data\\",\\n          \\"ignore\\": false,\\n          \\"components\\": [\\n            {\\n              \\"key\\": \\"persistent\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"protected\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"encrypted\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"dbIndex\\",\\n              \\"ignore\\": true\\n            },\\n            {\\n              \\"key\\": \\"calculateServer\\",\\n              \\"ignore\\": true\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    \\"i18n\\": {\\n      \\"it\\": {\\n        \\"Submit\\": \\"Invia\\"\\n      }\\n    }\\n  },\\n  \\"userGroups\\": [\\n    {\\n      \\"group\\": \\"customer\\",\\n      \\"label\\": \\"Customer\\"\\n    },\\n    {\\n      \\"group\\": \\"admin\\",\\n      \\"label\\": \\"Administrator\\"\\n    },\\n    {\\n      \\"group\\": \\"superadmin\\",\\n      \\"label\\": \\"Superadmin\\"\\n    }\\n  ]\\n}",
                  "name": "config.json"
                }
              ],
              "mountPath": "/home/node/app/form-service",
              "name": "form-service-config"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "DRAFT_COLLECTION_ENDPOINT",
              "value": "/ehr-fs-form-drafts",
              "valueType": "plain"
            },
            {
              "name": "FORM_SERVICE_CONFIG_PATH",
              "value": "/home/node/app/form-service/config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "This is a backend for frontend to be used for building and managing forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-backend:{{FORM_SERVICE_BE_VERSION}}",
          "name": "form-service-backend",
          "type": "plugin"
        },
        "form-service-frontend": {
          "componentId": "form-service-frontend",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "Build and manage custom forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-frontend:{{FORM_SERVICE_FE_VERSION}}",
          "name": "form-service-frontend",
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "CRUD_SERVICE_VERSION": {
          "noProductionEnv": "7.1.0",
          "productionEnv": "7.1.0"
        },
        "FORM_SERVICE_BE_VERSION": {
          "noProductionEnv": "2.1.1",
          "productionEnv": "2.1.1"
        },
        "FORM_SERVICE_FE_VERSION": {
          "noProductionEnv": "2.1.1",
          "productionEnv": "2.1.1"
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.670Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ehr-module_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Build and manage custom html email templates.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/email-builder/overview"
    },
    "itemId": "email-builder",
    "name": "Email Builder",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/email-builder",
    "resources": {
      "services": {
        "email-builder": {
          "type": "plugin",
          "name": "email-builder",
          "description": "Build and manage custom html email templates.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/email-builder:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "## Overview\\nThe first version of **Email Builder** offers a simple and intuitive solution for creating HTML email templates through a graphical interface.\\n\\n---\\n\\n## Features\\n\\n- **Template Creation**: Enables creating and editing HTML templates via a graphical interface using customizable components.\\n- **Template Export**: Allows saving email templates in HTML and JSON formats via POST to a customizable endpoint.\\n- **Predefined Templates**: Includes a collection of basic templates for common email types that can be quickly customized."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.020Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "email-builder.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/envoy-api-gateway/overview"
    },
    "itemId": "envoy-api-gateway",
    "name": "Envoy API Gateway",
    "publishOnMiaDocumentation": false,
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.29.2",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.29.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.022Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "envoy-api-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/envoy-api-gateway/overview"
    },
    "itemId": "envoy-api-gateway",
    "name": "Envoy API Gateway",
    "publishOnMiaDocumentation": false,
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.29.2",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-04-07T16:19:37.098Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "envoy-api-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "This service helps you manage Excel, CSV or JSON export from other services using jsonl.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/export-service/overview"
    },
    "itemId": "export-service",
    "name": "Export Service",
    "resources": {
      "services": {
        "export-service": {
          "type": "plugin",
          "name": "export-service",
          "description": "This service helps you manage Excel, CSV or JSON export from other services using jsonl.",
          "dockerImage": "nexus.mia-platform.eu/core/export-service:2.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.017Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "export-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "This service helps you manage Excel, CSV or JSON export from other services using jsonl.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/export-service/overview"
    },
    "itemId": "export-service",
    "name": "Export Service",
    "resources": {
      "services": {
        "export-service": {
          "type": "plugin",
          "name": "export-service",
          "description": "This service helps you manage Excel, CSV or JSON export from other services using jsonl.",
          "dockerImage": "nexus.mia-platform.eu/core/export-service:2.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-01-11T09:18:15.101Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "export-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Use this application to set up a Control Plane with identity access management to control your Fast Data Runtime with just a few clicks",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_applications/control-plane/overview"
    },
    "itemId": "fast-data-control-plane",
    "name": "Fast Data Control Plane",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/control-plane-application",
    "resources": {
      "collections": {
        "users": {
          "defaultName": "users",
          "description": "Collection of users of Data Fabric solution",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "groups",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "username",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "email",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "providerId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "providerUserId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "realm",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "metadata",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "permissions",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            }
          ],
          "id": "users",
          "indexes": [
            {
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ],
              "name": "_id",
              "type": "normal",
              "unique": true
            },
            {
              "fields": [
                {
                  "name": "creatdAt",
                  "order": -1
                }
              ],
              "name": "createdAt",
              "type": "normal",
              "unique": false
            },
            {
              "fields": [
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ],
              "name": "stateIndex",
              "type": "normal",
              "unique": false
            },
            {
              "fields": [
                {
                  "name": "email",
                  "order": 1
                },
                {
                  "name": "name",
                  "order": 1
                },
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ],
              "name": "nameSearch",
              "type": "normal",
              "unique": false
            },
            {
              "fields": [
                {
                  "name": "providerId",
                  "order": 1
                },
                {
                  "name": "providerUserId",
                  "order": 1
                },
                {
                  "name": "realm",
                  "order": 1
                }
              ],
              "name": "upsertSupport",
              "type": "normal",
              "unique": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/users",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/api/backend/projects": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/api/backend/projects",
          "defaultPathRewrite": "/api/backend/projects",
          "description": "Endpoint /api/backend/projects",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "secreted": false,
          "service": "fabric-bff",
          "showInDocumentation": true,
          "tags": [
            "fabric-bff"
          ],
          "type": "custom"
        },
        "/api/fast-data": {
          "acl": "false",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/api/fast-data",
          "defaultPathRewrite": "/api/fast-data",
          "description": "Endpoint /api/fast-data",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "routes": {
            "DELETE/connections/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"delete:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/connections/items",
              "path": "/connections/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "DELETE/runtimes/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:runtimes\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/runtimes/items/:id",
              "path": "/runtimes/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "DELETE"
            },
            "GET/connections/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/connections/items",
              "path": "/connections/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/feedback": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/feedback",
              "path": "/feedback",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/runtimes/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/runtimes/items",
              "path": "/runtimes/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/runtimes/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/runtimes/items/:id",
              "path": "/runtimes/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/runtimes/items/:id/pipelines": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/runtimes/items/:id/pipelines",
              "path": "/runtimes/items/:id/pipelines",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/runtimes/namespaces/usage": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/runtimes/namespaces/usage",
              "path": "/runtimes/namespaces/usage",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "rateLimit": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "GET/runtimes/stats": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/runtimes/stats",
              "path": "/runtimes/stats",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            },
            "HEAD/control": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"control:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "HEAD/control",
              "path": "/control",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "HEAD"
            },
            "HEAD/feedback": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"read:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "HEAD/feedback",
              "path": "/feedback",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "HEAD"
            },
            "PATCH/connections/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/connections/items",
              "path": "/connections/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "PATCH/runtimes/items/:id": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:runtimes\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/runtimes/items/:id",
              "path": "/runtimes/items/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "PATCH"
            },
            "POST/connections/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:connections\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/connections/items",
              "path": "/connections/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/control": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"control:pipelines\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/control",
              "path": "/control",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            },
            "POST/runtimes/items": {
              "acl": {
                "inherited": false,
                "value": "permissions[\\"update:runtimes\\"]"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/runtimes/items",
              "path": "/runtimes/items",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "service": "fabric-bff",
          "showInDocumentation": true,
          "tags": [
            "control-plane"
          ],
          "type": "custom"
        },
        "/apps": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/apps",
          "defaultPathRewrite": "/apps",
          "description": "Endpoint /apps",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": true,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/authorize": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/authorize",
          "defaultPathRewrite": "/authorize",
          "description": "Endpoint /authorize",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": true,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/authz/users": {
          "acl": "\\"update:users\\" in permissions",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "collectionId": "users",
          "defaultBasePath": "/authz/users",
          "defaultPathRewrite": "/users",
          "description": "Endpoint /authz/users",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "pathName": "/",
          "public": false,
          "routes": {
            "DELETE/": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "DELETE"
            },
            "DELETE/:id": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "DELETE/:id",
              "path": "/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "DELETE"
            },
            "GET/": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "GET/:id": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/:id",
              "path": "/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "GET/count": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/count",
              "path": "/count",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "GET/export": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": false,
                "value": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/export",
              "path": "/export",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "GET"
            },
            "PATCH/": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "PATCH"
            },
            "PATCH/:id": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/:id",
              "path": "/:id",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "PATCH"
            },
            "PATCH/bulk": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "PATCH/bulk",
              "path": "/bulk",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "PATCH"
            },
            "POST/": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/",
              "path": "/",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/:id/state": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/:id/state",
              "path": "/:id/state",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/bulk": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/bulk",
              "path": "/bulk",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/state": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/state",
              "path": "/state",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            },
            "POST/upsert-one": {
              "acl": {
                "inherited": false,
                "value": "\\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "POST/upsert-one",
              "path": "/upsert-one",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": false,
                "value": false
              },
              "verb": "POST"
            }
          },
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "backoffice"
          ],
          "type": "crud"
        },
        "/control_plane_fabric.RuntimeManagement": {
          "acl": "clientType == \\"control_plane_operator\\"",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/control_plane_fabric.RuntimeManagement",
          "defaultPathRewrite": "/control_plane_fabric.RuntimeManagement",
          "description": "Endpoint /control_plane_fabric.RuntimeManagement",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": false,
            "grpc": true
          },
          "port": "50051",
          "public": true,
          "secreted": true,
          "service": "control-plane",
          "showInDocumentation": true,
          "tags": [
            "control-plane"
          ],
          "type": "custom",
          "useDownstreamProtocol": true
        },
        "/control_plane_intercomm.ControlPlane": {
          "acl": "clientType == \\"control_plane_operator\\"",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/control_plane_intercomm.ControlPlane",
          "defaultPathRewrite": "/control_plane_intercomm.ControlPlane",
          "description": "Endpoint /control_plane_intercomm.ControlPlane",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": false,
            "grpc": true
          },
          "port": "50051",
          "public": true,
          "secreted": true,
          "service": "control-plane",
          "showInDocumentation": true,
          "tags": [
            "control-plane"
          ],
          "type": "custom",
          "useDownstreamProtocol": true
        },
        "/control-plane": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/control-plane",
          "defaultPathRewrite": "/control-plane",
          "description": "Endpoint /control-plane",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "secreted": false,
          "service": "control-plane-fe",
          "showInDocumentation": false,
          "tags": [
            "control-plane-fe"
          ],
          "type": "custom"
        },
        "/control-plane/.well-known/oidc-configuration": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/control-plane/.well-known/oidc-configuration",
          "defaultPathRewrite": "/control-plane/oidc-configuration.json",
          "description": "Endpoint /control-plane/.well-known/oidc-configuration",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "secreted": false,
          "service": "control-plane-fe",
          "showInDocumentation": true,
          "tags": [
            "control-plane-fe"
          ],
          "type": "custom"
        },
        "/control-plane/configuration": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/control-plane/configuration",
          "defaultPathRewrite": "/control-plane/configuration.json",
          "description": "Endpoint /control-plane/configuration",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "secreted": false,
          "service": "control-plane-fe",
          "showInDocumentation": true,
          "tags": [
            "control-plane-fe"
          ],
          "type": "custom"
        },
        "/grpc.reflection.v1.ServerReflection": {
          "acl": "clientType == \\"control_plane_operator\\"",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/grpc.reflection.v1.ServerReflection",
          "defaultPathRewrite": "/grpc.reflection.v1.ServerReflection",
          "description": "Endpoint /grpc.reflection.v1.ServerReflection",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": false,
            "grpc": true
          },
          "port": "50051",
          "public": true,
          "secreted": true,
          "service": "control-plane",
          "showInDocumentation": true,
          "tags": [
            "control-plane"
          ],
          "type": "custom",
          "useDownstreamProtocol": true
        },
        "/grpc.reflection.v1alpha.ServerReflection": {
          "acl": "clientType == \\"control_plane_operator\\"",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/grpc.reflection.v1alpha.ServerReflection",
          "defaultPathRewrite": "/grpc.reflection.v1alpha.ServerReflection",
          "description": "Endpoint /grpc.reflection.v1alpha.ServerReflection",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": false,
            "grpc": true
          },
          "port": "50051",
          "public": true,
          "secreted": true,
          "service": "control-plane",
          "showInDocumentation": true,
          "tags": [
            "control-plane"
          ],
          "type": "custom",
          "useDownstreamProtocol": true
        },
        "/logout": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/logout",
          "defaultPathRewrite": "/logout",
          "description": "Endpoint /logout",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        },
        "/mgmt": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/mgmt",
          "defaultPathRewrite": "/public",
          "description": "Endpoint /mgmt",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "routes": {
            "GET/users": {
              "acl": {
                "inherited": false,
                "value": "\\"read:users\\" in permissions || \\"update:users\\" in permissions"
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "id": "GET/users",
              "path": "/users",
              "postDecorators": [],
              "preDecorators": [],
              "public": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "verb": "GET"
            }
          },
          "secreted": false,
          "service": "micro-lc",
          "showInDocumentation": true,
          "tags": [
            "backoffice"
          ],
          "type": "custom"
        },
        "/micro-lc-configurations": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/micro-lc-configurations",
          "defaultPathRewrite": "/configurations",
          "description": "Endpoint /micro-lc-configurations",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": false,
          "secreted": false,
          "service": "micro-lc",
          "showInDocumentation": true,
          "tags": [
            "backoffice"
          ],
          "type": "custom"
        },
        "/oauth/token": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/oauth/token",
          "defaultPathRewrite": "/oauth/token",
          "description": "Endpoint /oauth/token",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": true,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "authentication-service"
          ],
          "type": "custom"
        },
        "/refreshtoken": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/refreshtoken",
          "defaultPathRewrite": "/refreshtoken",
          "description": "Endpoint /refreshtoken",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "authentication-service"
          ],
          "type": "custom"
        },
        "/userinfo": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/userinfo",
          "defaultPathRewrite": "/userinfo",
          "description": "Endpoint /userinfo",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "public": false,
          "secreted": false,
          "service": "authentication-service",
          "showInDocumentation": true,
          "tags": [
            "authentication-service"
          ],
          "type": "custom"
        },
        "/web-login": {
          "acl": "true",
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "backofficeAcl": {
            "inherited": true
          },
          "defaultBasePath": "/web-login",
          "defaultPathRewrite": "/web-login",
          "description": "Endpoint /web-login",
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true,
            "grpc": false
          },
          "options": {
            "iframePolicy": "all"
          },
          "public": true,
          "secreted": false,
          "service": "login-site",
          "showInDocumentation": true,
          "tags": [
            "auth"
          ],
          "type": "custom"
        }
      },
      "listeners": {
        "frontend": {
          "description": "Default listener for frontend API",
          "name": "frontend",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          },
          "port": "8080",
          "selectedByDefault": true
        },
        "grpc": {
          "description": "Listener for gRPC services",
          "name": "grpc",
          "port": "50051"
        }
      },
      "services": {
        "api-gateway": {
          "componentId": "api-gateway-envoy",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            },
            {
              "from": 9901,
              "name": "admin",
              "to": 9901
            },
            {
              "from": 50051,
              "name": "grpc",
              "to": 50051
            }
          ],
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/envoy",
              "name": "api-gateway-envoy-config",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend",
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend",
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "30Mi"
            }
          },
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "name": "api-gateway",
          "tags": [
            "custom"
          ],
          "type": "plugin"
        },
        "authentication-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/configs",
              "name": "authentication-service-config",
              "files": [
                {
                  "content": "{\\n  \\"apps\\": {\\n    \\"{{CP_APP_ID}}\\": {\\n      \\"providers\\": {\\n        \\"{{CP_PROVIDER_ID}}\\": {\\n          \\"order\\": 10,\\n          \\"type\\": \\"okta\\",\\n          \\"label\\": \\"Login with Okta\\",\\n          \\"clientId\\": \\"{{CP_OKTA_CLIENT_ID}}\\",\\n          \\"clientSecret\\": \\"{{CP_OKTA_CLIENT_SECRET}}\\",\\n          \\"baseUrl\\": \\"{{OKTA_BASE_URL}}\\",\\n          \\"authUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/authorize\\",\\n          \\"tokenUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/token\\",\\n          \\"userInfoUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/userinfo\\",\\n          \\"userSettingsURL\\": \\"{{OKTA_BASE_URL}}/enduser/settings\\",\\n          \\"logoutUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/logout\\",\\n          \\"scope\\": [\\n            \\"openid\\",\\n            \\"profile\\",\\n            \\"email\\",\\n            \\"offline_access\\",\\n            \\"groups\\"\\n          ]\\n        }\\n      },\\n      \\"redirectUrl\\": \\"{{CP_BASE_URL}}/web-login/oauth/callback\\",\\n      \\"defaultRedirectUrlOnSuccessfulLogin\\": \\"/\\",\\n      \\"authorizeStateRequired\\": true,\\n      \\"realm\\": \\"data-fabric\\",\\n      \\"isWebsiteApp\\": true,\\n      \\"issuer\\": \\"{{CP_APP_ID}}\\",\\n      \\"defaultGroups\\": []\\n    }\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "request-id,traceparent,tracestate",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "http://crud-service/users",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "{{AUTH_REDIS_HOSTS}}",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "{{CP_REDIS_PASSPHRASE}}",
              "valueType": "plain"
            },
            {
              "name": "EXPIRE_DELTA_PROVIDER_TOKEN_SEC",
              "value": "300",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "86400",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGNING_METHOD",
              "value": "RS256",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_PRIVATE_KEY_FILE_PATH",
              "value": "/run/secrets/keys/private-key.pem",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_PRIVATE_KEY_KID",
              "value": "{{CP_JWT_CLIENT_KID}}",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "604800",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "{{CP_REDIS_SCOPE}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 3
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 3
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "30Mi",
              "min": "15Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/run/secrets/keys",
              "name": "authentication-service-secrets"
            }
          ],
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.11.0",
          "name": "authentication-service",
          "tags": [
            "custom"
          ],
          "type": "plugin"
        },
        "authorization-service": {
          "componentId": "authorization-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/configs",
              "name": "authorization-service-config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"/control_plane_fabric.RuntimeManagement\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"clientType == \\\\\\"control_plane_operator\\\\\\"\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/control_plane_intercomm.ControlPlane\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"clientType == \\\\\\"control_plane_operator\\\\\\"\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/grpc.reflection.v1.ServerReflection\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"clientType == \\\\\\"control_plane_operator\\\\\\"\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/web-login\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/authorize\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/oauth/token\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/logout\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/refreshtoken\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/userinfo\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/apps\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/micro-lc-configurations\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/mgmt\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/mgmt/users\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions || \\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/export\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/:id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"read:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/bulk\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/:id/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/authz/users/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"\\\\\\"update:users\\\\\\" in permissions\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/grpc.reflection.v1alpha.ServerReflection\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"clientType == \\\\\\"control_plane_operator\\\\\\"\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"control:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data/control\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"control:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data/feedback\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data/runtimes/stats\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data/runtimes/items/:id/pipelines\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data/runtimes/items/:id\\": {\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:runtimes\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:runtimes\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/api/fast-data/runtimes/items\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"update:runtimes\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"permissions[\\\\\\"read:pipelines\\\\\\"]\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/control-plane\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/control-plane/configuration\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/control-plane/.well-known/oidc-configuration\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  }\\n}",
                  "name": "auth.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.4.3",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "http://authentication-service/userinfo",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "userId",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "connection,upgrade,sec-websocket-protocol,sec-webSocket-version,x-request-id,request-id,cookie,authorization,client-type,host,x-forwarded-host,traceparent,tracestate",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "provider,email,username,name,permissions,metadata",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 3
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 3
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.3",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "envName": "CONFIGURATION_PATH",
              "type": "folder"
            }
          },
          "name": "authorization-service",
          "tags": [
            "custom"
          ],
          "type": "plugin"
        },
        "control-plane": {
          "componentId": "data-fabric.company-control-plane",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            },
            {
              "from": 50051,
              "name": "grpc",
              "protocol": "TCP",
              "to": 50051
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/control_plane/.fd/control-plane",
              "name": "control-plane-config",
              "files": [
                {
                  "content": "{\\n  \\"cache\\": {\\n    \\"type\\": \\"redis\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"redis://fabric-cache:6379\\"\\n    }\\n  },\\n  \\"persistence\\": {\\n    \\"type\\": \\"mongodb\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"<CONFIGURE_ME>\\"\\n    }\\n  },\\n  \\"settings\\": {\\n    \\"apiPrefix\\": \\"/api\\"\\n  }\\n}",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "debug",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http"
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "150m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "15Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/data-fabric/control-plane:0.3.1",
          "name": "control-plane",
          "tags": [
            "control-plane"
          ],
          "type": "plugin"
        },
        "control-plane-fe": {
          "componentId": "data-fabric.control-plane-fe",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/usr/static",
              "name": "control-plane-fe-config",
              "subPaths": [
                "configuration.json",
                "oidc-configuration.json"
              ],
              "usePreserve": true,
              "files": [
                {
                  "content": "{\\n  \\"api\\": {\\n    \\"fast-data\\": \\"**CONTROL_PLANE_BASE_URL**\\"\\n  },\\n  \\"name\\": \\"**APPLICATION_NAME**\\",\\n  \\"version\\": \\"**VERSION**\\"\\n}",
                  "name": "configuration.json"
                },
                {
                  "content": "{\\n  \\"end_session_endpoint\\": \\"{{CP_BASE_URL}}/logout\\"\\n}",
                  "name": "oidc-configuration.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "BASE_PATH",
              "value": "/control-plane/",
              "valueType": "plain"
            },
            {
              "name": "CONTROL_PLANE_BASE_URL",
              "value": "/api",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "http"
            },
            "readiness": {
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "15Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/data-fabric/control-plane-frontend:0.4.3",
          "name": "control-plane-fe",
          "tags": [
            "control-plane"
          ],
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"id\\": \\"users\\",\\n  \\"description\\": \\"Collection of users\\",\\n  \\"name\\": \\"users\\",\\n  \\"fields\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"ObjectId\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"_id\\"\\n    },\\n    {\\n      \\"name\\": \\"creatorId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"creatorId\\"\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"createdAt\\"\\n    },\\n    {\\n      \\"name\\": \\"updaterId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"updaterId\\"\\n    },\\n    {\\n      \\"name\\": \\"updatedAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"updatedAt\\"\\n    },\\n    {\\n      \\"name\\": \\"__STATE__\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false,\\n      \\"description\\": \\"__STATE__\\"\\n    },\\n    {\\n      \\"name\\": \\"name\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"groups\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    {\\n      \\"name\\": \\"username\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"email\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerUserId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"realm\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"metadata\\",\\n      \\"type\\": \\"RawObject\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"schema\\": {\\n        \\"properties\\": {\\n          \\"permissions\\": {\\n            \\"type\\": \\"array\\",\\n            \\"items\\": {\\n              \\"type\\": \\"string\\",\\n              \\"enum\\": [\\n                \\"read:pipelines\\",\\n                \\"control:pipelines\\",\\n                \\"read:connections\\",\\n                \\"update:connections\\",\\n                \\"delete:connections\\",\\n                \\"read:runtimes\\",\\n                \\"update:runtimes\\",\\n                \\"read:data-assets\\",\\n                \\"update:metadata-assets\\",\\n                \\"read:users\\",\\n                \\"update:users\\"\\n              ]\\n            }\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\"name\\": \\"permissions\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  ],\\n  \\"endpointBasePath\\": \\"/users\\",\\n  \\"defaultState\\": \\"PUBLIC\\",\\n  \\"indexes\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": true,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"_id\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"creatdAt\\",\\n          \\"order\\": -1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"stateIndex\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"nameSearch\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"email\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"name\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"upsertSupport\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"providerId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"providerUserId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"realm\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    }\\n  ],\\n  \\"tags\\": [\\n    \\"collection\\"\\n  ]\\n}",
                  "name": "users-users.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "<CONFIGURE_ME>",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 3
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 3
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "fabric-bff": {
          "componentId": "data-fabric.bff",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/fabric_bff/.fd/data-fabric-bff",
              "name": "fabric-bff-config",
              "files": [
                {
                  "content": "{\\n  \\"console\\": {\\n    \\"rest\\": {\\n      \\"target\\": \\"<CONFIGURE_YOUR_CONSOLE_URL>\\",\\n      \\"auth\\": {\\n        \\"type\\": \\"oauth2\\",\\n        \\"flow\\": \\"client_credentials\\",\\n        \\"tokenEndpoint\\": \\"/api/m2m/oauth/token\\",\\n        \\"credentials\\": {\\n          \\"clientId\\": \\"<CONFIGURE_ME>\\",\\n          \\"clientKeyId\\": \\"<CONFIGURE_ME>\\",\\n          \\"privateKey\\": \\"<CONFIGURE_ME>\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"controlPlane\\": {\\n    \\"rest\\": {\\n      \\"target\\": \\"control-plane\\"\\n    },\\n    \\"grpc\\": {\\n      \\"target\\": \\"http://control-plane:50051\\"\\n    }\\n  },\\n  \\"persistence\\": {\\n    \\"type\\": \\"mongodb\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"<CONFIGURE_ME>\\"\\n    }\\n  },\\n  \\"settings\\": {\\n    \\"apiPrefix\\": \\"/\\",\\n    \\"auditUserHeader\\": \\"miauserid\\"\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http"
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "120m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "15Mi"
            }
          },
          "description": "Backend for frontend communication proxy for Control Plane services and other applications",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/fabric-bff:0.3.0",
          "name": "fabric-bff",
          "tags": [
            "data-fabric"
          ],
          "type": "plugin"
        },
        "fabric-cache": {
          "args": [
            "redis-server",
            "/etc/redis/redis.conf"
          ],
          "containerPorts": [
            {
              "from": 6379,
              "name": "redis",
              "protocol": "TCP",
              "to": 6379
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/etc/redis",
              "name": "redis-configuration",
              "subPaths": [
                "redis.conf"
              ],
              "files": [
                {
                  "content": "## GENERIC ##\\nport                      6379\\nbind                      0.0.0.0\\n\\n## MEMORY ##\\nsave                      \\"\\"\\nappendonly                no\\nmaxmemory                 31457280\\n\\n## REPLICAS ##\\nslave-serve-stale-data    yes\\nslave-read-only           yes\\n",
                  "name": "redis.conf"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "redis"
            },
            "readiness": {
              "port": "redis"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "150m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/cache/redis:7.2.5",
          "name": "fabric-cache",
          "tags": [
            "custom"
          ],
          "type": "plugin"
        },
        "login-site": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "port": "http"
            },
            "readiness": {
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "30Mi",
              "min": "15Mi"
            }
          },
          "description": "Frontend supporting authentication flow",
          "dockerImage": "nexus.mia-platform.eu/backoffice/login-site:8.1.2",
          "name": "login-site",
          "type": "plugin"
        },
        "micro-lc": {
          "componentId": "backoffice-backend",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/usr/static/public",
              "name": "micro-lc-static-files",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/mgmt/\\" target=\\"_blank\\" />\\n\\n  <title>Fabric Users Management</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script type=\\"module\\" nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js\\">\\n  </script>\\n\\n  <script type=\\"module\\" nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/micro-lc.production.js\\"></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#2cb47b\\">\\n    <micro-lc config-src=\\"/micro-lc-configurations/config.json\\" fallback-language=\\"en\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>",
                  "name": "index.html"
                }
              ]
            },
            {
              "mountPath": "/usr/static/configurations",
              "name": "micro-lc-configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"applications\\": {\\n    \\"users\\": {\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./users\\",\\n      \\"config\\": \\"/micro-lc-configurations/users.config.json\\"\\n    },\\n    \\"docs\\": {\\n      \\"integrationMode\\": \\"iframe\\",\\n      \\"route\\": \\"./documentation\\",\\n      \\"src\\": \\"https://docs.mia-platform.eu/docs/fast_data/runtime_management/overview\\"\\n    }\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"logo\\": {\\n            \\"altText\\": \\"Mia Platform Logo\\",\\n            \\"url\\": \\"https://raw.githubusercontent.com/mia-platform/.github/master/profile/img/mia-platform_logo_color.png\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"HomeOutlined\\"\\n              },\\n              \\"id\\": \\"docs\\",\\n              \\"label\\": \\"Documentation\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"type\\": \\"application\\",\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"UserOutlined\\"\\n              },\\n              \\"id\\": \\"users\\",\\n              \\"label\\": \\"Users\\"\\n            }\\n          ],\\n          \\"mode\\": \\"topBar\\",\\n          \\"showSearchBar\\": false,\\n          \\"userMenuTrigger\\": \\"hover\\",\\n          \\"userMenu\\": {\\n            \\"userInfoUrl\\": \\"/userinfo\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#1890ff\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./users\\"\\n  },\\n  \\"version\\": 2\\n}",
                  "name": "config.json"
                },
                {
                  "content": "{\\n  \\"content\\": {\\n    \\"attributes\\": {\\n      \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; position: relative;\\"\\n    },\\n    \\"content\\": [\\n      {\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; padding-top: 10px; background-color: white;\\"\\n        },\\n        \\"content\\": [\\n          {\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; gap: 10px; padding: 0 20px;\\"\\n            },\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"Users\\"\\n                },\\n                \\"tag\\": \\"bk-title\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-left: 14px; align-self: end;\\"\\n                },\\n                \\"tag\\": \\"bk-refresh-button\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                },\\n                \\"tag\\": \\"div\\"\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"placeholder\\": \\"Search...\\"\\n                },\\n                \\"tag\\": \\"bk-search-bar\\"\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"clickConfig\\": {\\n                    \\"actionConfig\\": {\\n                      \\"label\\": \\"filter\\",\\n                      \\"payload\\": {}\\n                    },\\n                    \\"type\\": \\"event\\"\\n                  },\\n                  \\"content\\": \\"\\",\\n                  \\"iconId\\": \\"FunnelPlotOutlined\\",\\n                  \\"type\\": \\"outlined\\"\\n                },\\n                \\"tag\\": \\"bk-button\\"\\n              }\\n            ],\\n            \\"tag\\": \\"div\\"\\n          },\\n          {\\n            \\"attributes\\": {\\n              \\"style\\": \\"width: 100%; display: flex; justify-content: space-between;\\"\\n            },\\n            \\"content\\": [\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                },\\n                \\"properties\\": {\\n                  \\"tabs\\": [\\n                    {\\n                      \\"filters\\": [\\n                        {\\n                          \\"operator\\": \\"equal\\",\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"value\\": \\"PUBLIC\\"\\n                        }\\n                      ],\\n                      \\"key\\": \\"public\\",\\n                      \\"order\\": 0,\\n                      \\"title\\": \\"Public\\"\\n                    },\\n                    {\\n                      \\"filters\\": [\\n                        {\\n                          \\"operator\\": \\"equal\\",\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"value\\": \\"DRAFT\\"\\n                        }\\n                      ],\\n                      \\"key\\": \\"draft\\",\\n                      \\"order\\": 2,\\n                      \\"title\\": \\"Draft\\"\\n                    },\\n                    {\\n                      \\"filters\\": [\\n                        {\\n                          \\"operator\\": \\"equal\\",\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"value\\": \\"TRASH\\"\\n                        }\\n                      ],\\n                      \\"key\\": \\"trash\\",\\n                      \\"order\\": 3,\\n                      \\"title\\": \\"Trash\\"\\n                    }\\n                  ]\\n                },\\n                \\"tag\\": \\"bk-tabs\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-right: 4px\\"\\n                },\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"filters\\": []\\n                },\\n                \\"tag\\": \\"bk-filters-manager\\"\\n              }\\n            ],\\n            \\"tag\\": \\"div\\"\\n          },\\n          {\\n            \\"attributes\\": {\\n              \\"style\\": \\"padding: 0 20px;\\"\\n            },\\n            \\"content\\": {\\n              \\"properties\\": {\\n                \\"dataSchema\\": {\\n                  \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                }\\n              },\\n              \\"tag\\": \\"bk-breadcrumbs\\"\\n            },\\n            \\"tag\\": \\"div\\"\\n          }\\n        ],\\n        \\"tag\\": \\"header\\"\\n      },\\n      {\\n        \\"attributes\\": {\\n          \\"style\\": \\"flex-grow: 1; background-color: #f0f2f5; padding: 20px; overflow-y: auto;\\"\\n        },\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"fitParentContainer\\": true,\\n              \\"rowActions\\": {\\n                \\"actions\\": [\\n                  {\\n                    \\"content\\": \\"delete-data\\",\\n                    \\"icon\\": \\"fas fa-trash\\",\\n                    \\"kind\\": \\"event\\",\\n                    \\"label\\": \\"Delete\\",\\n                    \\"meta\\": {\\n                      \\"actionId\\": \\"delete-data\\"\\n                    },\\n                    \\"requireConfirm\\": true\\n                  }\\n                ],\\n                \\"kind\\": \\"icons\\"\\n              }\\n            },\\n            \\"tag\\": \\"bk-table\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"allowNavigation\\": true,\\n              \\"allowObjectAsTable\\": false,\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"editorHeight\\": \\"30vh\\",\\n              \\"requireConfirm\\": {\\n                \\"onClose\\": true,\\n                \\"onSave\\": true\\n              },\\n              \\"width\\": \\"70vw\\"\\n            },\\n            \\"tag\\": \\"bk-form-modal\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-confirmation-modal\\"\\n          },\\n          {\\n            \\"attributes\\": {},\\n            \\"properties\\": {\\n              \\"errorEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"content\\": \\"An error occurred during order creation\\",\\n                  \\"title\\": \\"Error\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"content\\": \\"An error occurred during order deletion\\",\\n                  \\"title\\": \\"Error\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"content\\": \\"An error occurred during order updated\\",\\n                  \\"title\\": \\"Error\\",\\n                  \\"type\\": \\"error\\"\\n                }\\n              },\\n              \\"rootElementSelectors\\": \\"main.micro-lc-layout-content\\",\\n              \\"successEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"content\\": \\"Data successfully created\\",\\n                  \\"title\\": \\"Success\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"content\\": \\"Data successfully deleted\\",\\n                  \\"title\\": \\"Success\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"content\\": \\"Data successfully updated\\",\\n                  \\"title\\": \\"Success\\",\\n                  \\"type\\": \\"success\\"\\n                }\\n              }\\n            },\\n            \\"tag\\": \\"bk-notifications\\"\\n          }\\n        ],\\n        \\"tag\\": \\"main\\"\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"40vw\\"\\n            },\\n            \\"tag\\": \\"bk-filter-drawer\\"\\n          }\\n        ],\\n        \\"tag\\": \\"aside\\"\\n      },\\n      {\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; flex-wrap: wrap; padding: 10px 20px; background-color: white; gap: 10px; position: sticky; bottom: 0; z-index: 10\\"\\n        },\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-bulk-delete\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              }\\n            },\\n            \\"tag\\": \\"bk-bulk-actions\\"\\n          },\\n          {\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            },\\n            \\"tag\\": \\"div\\"\\n          },\\n          {\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; justify-content: end; align-items: center;\\"\\n            },\\n            \\"tag\\": \\"bk-footer\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"pageSize\\": 10\\n            },\\n            \\"tag\\": \\"bk-pagination\\"\\n          }\\n        ],\\n        \\"tag\\": \\"footer\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/authz/users\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-client\\"\\n      }\\n    ],\\n    \\"tag\\": \\"div\\"\\n  },\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"properties\\": {\\n        \\"__STATE__\\": {\\n          \\"enum\\": [\\n            \\"PUBLIC\\",\\n            \\"DRAFT\\",\\n            \\"TRASH\\",\\n            \\"DELETED\\"\\n          ],\\n          \\"formOptions\\": {\\n            \\"placeholder\\": \\"PUBLIC\\",\\n            \\"readOnly\\": false,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"_id\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"formOptions\\": {\\n            \\"disabled\\": false,\\n            \\"hidden\\": true,\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"formOptions\\": {\\n            \\"disabled\\": false,\\n            \\"hidden\\": true,\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"email\\": {\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"groups\\": {\\n          \\"items\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"type\\": \\"array\\"\\n        },\\n        \\"metadata\\": {\\n          \\"type\\": \\"object\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"name\\": {\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"permissions\\": {\\n          \\"dataSchema\\": {\\n            \\"items\\": {\\n              \\"enum\\": [\\n                \\"read:pipelines\\",\\n                \\"control:pipelines\\",\\n                \\"update:runtimes\\",\\n                \\"read:data-assets\\",\\n                \\"update:metadata-assets\\",\\n                \\"read:users\\",\\n                \\"update:users\\"\\n              ],\\n              \\"type\\": \\"string\\"\\n            },\\n            \\"type\\": \\"array\\"\\n          },\\n          \\"items\\": {\\n            \\"enum\\": [\\n              \\"read:pipelines\\",\\n              \\"control:pipelines\\",\\n              \\"update:runtimes\\",\\n              \\"read:data-assets\\",\\n              \\"update:metadata-assets\\",\\n              \\"read:users\\",\\n              \\"update:users\\"\\n            ],\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"type\\": \\"array\\"\\n        },\\n        \\"providerId\\": {\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"providerUserId\\": {\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"realm\\": {\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true,\\n            \\"readOnlyOnInsert\\": false\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"formOptions\\": {\\n            \\"hidden\\": true,\\n            \\"hiddenOnInsert\\": true,\\n            \\"hiddenOnUpdate\\": false,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"hiddenOnUpdate\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"username\\": {\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        }\\n      },\\n      \\"required\\": [\\n        \\"providerId\\",\\n        \\"providerUserId\\"\\n      ],\\n      \\"type\\": \\"object\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n  ]\\n}",
                  "name": "users.config.json"
                }
              ]
            },
            {
              "mountPath": "/usr/src/app/config",
              "name": "micro-lc-server-configuration",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</micro-lc-configurations/config.json>; rel=preload; as=fetch; crossorigin\\",\\n        \\"</mfe-application/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/assets/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            },
            {
              "mountPath": "/usr/static/public/assets",
              "name": "micro-lc-assets",
              "files": [
                {
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n",
                  "name": "style.css"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "timeoutSeconds": 5
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 5
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "description": "micro-lc config server",
          "dockerImage": "nexus.mia-platform.eu/microlc/middleware:{{MICRO_LC_MANAGER_VERSION}}",
          "name": "micro-lc",
          "tags": [
            "custom"
          ],
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "BACK_KIT_VERSION": {
          "noProductionEnv": "1.5.8",
          "productionEnv": "1.5.8"
        },
        "CP_APP_ID": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "CP_BASE_URL": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "CP_PROVIDER_ID": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "CP_REDIS_SCOPE": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        },
        "LOG_LEVEL": {
          "noProductionEnv": "debug",
          "productionEnv": "info"
        },
        "MICRO_LC_MANAGER_VERSION": {
          "noProductionEnv": "3.2.2",
          "productionEnv": "3.2.2"
        },
        "MICRO_LC_VERSION": {
          "noProductionEnv": "2.4.2",
          "productionEnv": "2.4.2"
        },
        "OKTA_BASE_URL": {
          "noProductionEnv": "<CONFIGURE_ME>",
          "productionEnv": "<CONFIGURE_ME>"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-01-18T17:32:50.569Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-control-plane.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/runtime_management/overview"
    },
    "itemId": "fast-data-control-plane-operator",
    "name": "Fast Data Control Plane Operator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/control-plane-operator-plugin",
    "resources": {
      "services": {
        "fast-data-control-plane-operator": {
          "type": "plugin",
          "name": "fast-data-control-plane-operator",
          "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/control-plane-operator:0.3.0",
          "componentId": "fd.control-plane",
          "defaultEnvironmentVariables": [
            {
              "name": "MIA_PLATFORM_EU_TENANT",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/tenant']"
            },
            {
              "name": "APP_KUBERNETES_IO_PART_OF",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['app.kubernetes.io/part-of']"
            },
            {
              "name": "MIA_PLATFORM_EU_STAGE",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/stage']"
            },
            {
              "name": "FD_CONTROL_PLANE_CONFIGURATION_FILEPATH",
              "valueType": "plain",
              "readOnly": true,
              "value": "/home/control_plane_operator/.fd/control-plane/configuration.json"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "5Mi",
              "max": "15Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "30m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "successThreshold": 1
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "operator-configuration",
              "mountPath": "/home/control_plane_operator/.fd/control-plane",
              "files": [
                {
                  "content": "{\\n  \\"upstream\\": {\\n    \\"url\\": \\"<CONFIGURE_ME>\\"\\n  }\\n}",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "grpc",
              "from": 50051,
              "to": 50051,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.3.0",
      "releaseNote": "## What's Changed\\n* Control Plane Operator now starts accepting connections incoming from Fast Data workloads only after it has connected itself to the main Control Plane instance.\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.022Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-control-plane-operator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/runtime_management/overview"
    },
    "itemId": "fast-data-control-plane-operator",
    "name": "Fast Data Control Plane Operator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/control-plane-operator-plugin",
    "resources": {
      "services": {
        "fast-data-control-plane-operator": {
          "type": "plugin",
          "name": "fast-data-control-plane-operator",
          "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/control-plane-operator:0.1.1",
          "componentId": "fd.control-plane",
          "defaultEnvironmentVariables": [
            {
              "name": "MIA_PLATFORM_EU_TENANT",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/tenant']"
            },
            {
              "name": "APP_KUBERNETES_IO_PART_OF",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['app.kubernetes.io/part-of']"
            },
            {
              "name": "MIA_PLATFORM_EU_STAGE",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/stage']"
            },
            {
              "name": "FD_CONTROL_PLANE_CONFIGURATION_FILEPATH",
              "valueType": "plain",
              "readOnly": true,
              "value": "/home/control_plane_operator/.fd/control-plane/configuration.json"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "5Mi",
              "max": "15Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "30m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "successThreshold": 1
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "operator-configuration",
              "mountPath": "/home/control_plane_operator/.fd/control-plane",
              "files": [
                {
                  "content": "{\\n  \\"upstream\\": {\\n    \\"url\\": \\"<CONFIGURE_ME>\\"\\n  }\\n}",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "grpc",
              "from": 50051,
              "to": 50051,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.1",
      "releaseNote": "## What's Changed\\n* Control Plane Operator is now able to read connections details from Fast Data configuration\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.875Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-control-plane-operator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/runtime_management/overview"
    },
    "itemId": "fast-data-control-plane-operator",
    "name": "Fast Data Control Plane Operator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/control-plane-operator-plugin",
    "resources": {
      "services": {
        "fast-data-control-plane-operator": {
          "type": "plugin",
          "name": "fast-data-control-plane-operator",
          "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/control-plane-operator:0.1.0",
          "componentId": "fd.control-plane",
          "defaultEnvironmentVariables": [
            {
              "name": "MIA_PLATFORM_EU_TENANT",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/tenant']"
            },
            {
              "name": "APP_KUBERNETES_IO_PART_OF",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['app.kubernetes.io/part-of']"
            },
            {
              "name": "MIA_PLATFORM_EU_STAGE",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/stage']"
            },
            {
              "name": "FD_CONTROL_PLANE_CONFIGURATION_FILEPATH",
              "valueType": "plain",
              "readOnly": true,
              "value": "/home/control_plane_operator/.fd/control-plane/configuration.json"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "5Mi",
              "max": "15Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "30m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "successThreshold": 1
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "operator-configuration",
              "mountPath": "/home/control_plane_operator/.fd/control-plane",
              "files": [
                {
                  "content": "{\\n  \\"upstream\\": {\\n    \\"url\\": \\"<CONFIGURE_ME>\\"\\n  }\\n}",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "grpc",
              "from": 50051,
              "to": 50051,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.0",
      "releaseNote": "## Initial Release\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.874Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-control-plane-operator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/runtime_management/overview"
    },
    "itemId": "fast-data-control-plane-operator",
    "name": "Fast Data Control Plane Operator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/control-plane-operator-plugin",
    "resources": {
      "services": {
        "fast-data-control-plane-operator": {
          "type": "plugin",
          "name": "fast-data-control-plane-operator",
          "description": "Use the Control Plane Operator to manage your Fast Data runtime. Deploying this service will enable the control of your Fast Data services within the namespace.",
          "dockerImage": "nexus.mia-platform.eu/data-fabric/control-plane-operator:0.1.0",
          "componentId": "fd.control-plane",
          "defaultEnvironmentVariables": [
            {
              "name": "MIA_PLATFORM_EU_TENANT",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/tenant']"
            },
            {
              "name": "APP_KUBERNETES_IO_PART_OF",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['app.kubernetes.io/part-of']"
            },
            {
              "name": "MIA_PLATFORM_EU_STAGE",
              "valueType": "downwardAPI",
              "fieldPath": "metadata.labels['mia-platform.eu/stage']"
            },
            {
              "name": "FD_CONTROL_PLANE_CONFIGURATION_FILEPATH",
              "valueType": "plain",
              "readOnly": true,
              "value": "/home/control_plane_operator/.fd/control-plane/configuration.json"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "5Mi",
              "max": "15Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "30m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "port": "grpc",
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "successThreshold": 1
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "operator-configuration",
              "mountPath": "/home/control_plane_operator/.fd/control-plane",
              "files": [
                {
                  "content": "{\\n  \\"upstream\\": {\\n    \\"url\\": \\"<CONFIGURE_ME>\\"\\n  }\\n}",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "grpc",
              "from": 50051,
              "to": 50051,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.834Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-control-plane-operator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Use this application to instantiate a Control Plane with identity access management to control your Fast Data Runtime with just a few clicks",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_applications/control-plane/overview"
    },
    "itemId": "fast-data-control-plane-with-access-control",
    "name": "Fast Data Control Plane With Access Control",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/control-plane-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "100Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "control-plane": {
          "type": "plugin",
          "name": "control-plane",
          "description": "Control Plane allows management of a Fast Data runtime deployment",
          "dockerImage": "nexus.mia-platform.eu/fast-data/control-plane:1.1.0",
          "componentId": "fd.control-plane",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "valueType": "plain",
              "value": "3000"
            },
            {
              "name": "LOG_LEVEL",
              "valueType": "plain",
              "value": "{{LOG_LEVEL}}"
            },
            {
              "name": "FD_CONTROL_PLANE_CONFIGURATION_FILEPATH",
              "valueType": "plain",
              "value": "/home/node/.fd/control-plane/configuration.json"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "control-plane-configuration",
              "mountPath": "/home/node/.fd/control-plane",
              "files": [
                {
                  "content": "{\\n  \\"runtime\\": {\\n    \\"feedback\\": {\\n      \\"type\\": \\"grpc\\"\\n    },\\n    \\"state\\": {\\n      \\"type\\": \\"grpc\\"\\n    }\\n  },\\n  \\"persistence\\": {\\n    \\"type\\": \\"mongodb\\",\\n    \\"configuration\\": {\\n      \\"url\\": \\"{{MONGODB_URL}}\\"\\n    },\\n    \\"collection\\": {\\n      \\"name\\": \\"{{MONGODB_COLLECTION}}\\"\\n    }\\n  }\\n}\\n",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http",
              "initialDelaySeconds": 20,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json"
        },
        "control-plane-fe": {
          "type": "plugin",
          "name": "control-plane-fe",
          "description": "Control Plane pipelines visualization tool",
          "dockerImage": "nexus.mia-platform.eu/fast-data/control-plane-frontend:0.2.1",
          "componentId": "fd.control-plane-fe",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "BASE_PATH",
              "value": "/control-plane/",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            },
            "cpuLimits": {
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend"
            },
            "readiness": {
              "port": "frontend"
            },
            "startup": {}
          },
          "defaultConfigMaps": [
            {
              "name": "control-plane-fe-configuration",
              "mountPath": "/usr/static",
              "usePreserve": true,
              "files": [
                {
                  "content": "{\\n  \\"api\\": {\\n    \\"fast-data\\": \\"**CONTROL_PLANE_BASE_URL**\\",\\n    \\"logout\\": {\\n      \\"method\\": \\"GET\\",\\n      \\"url\\": \\"/logout\\"\\n    }\\n  },\\n  \\"name\\": \\"**APPLICATION_NAME**\\",\\n  \\"version\\": \\"**VERSION**\\"\\n}",
                  "name": "configuration.json"
                }
              ]
            }
          ],
          "defaultDocumentationPath": ""
        },
        "redis-auth": {
          "type": "plugin",
          "name": "redis-auth",
          "description": "Control Plane Redis Database employed to support authentication flow",
          "dockerImage": "nexus.mia-platform.eu/cache/redis:7.2.5",
          "containerPorts": [
            {
              "name": "http",
              "from": 6379,
              "to": 6379
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "REDIS_PASSWORD",
              "value": "{{CP_REDIS_MASTER_PASSWORD}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "50Mi",
              "min": "15Mi"
            },
            "cpuLimits": {
              "min": "20m",
              "max": "80m"
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultProbes": {
            "liveness": {
              "port": "http"
            },
            "readiness": {
              "port": "http"
            },
            "startup": {}
          },
          "defaultConfigMaps": [
            {
              "name": "control-plane-redis-auth-configuration",
              "mountPath": "/opt/bitnami/redis/mounted-etc/",
              "files": [
                {
                  "content": "## GENERIC ##\\nport 6379\\n# listen on all the interfaces for incoming connections\\nbind 0.0.0.0\\n\\n## NO DISK PERSISTENCE ##\\nsave \\"\\"\\nappendonly no\\n\\n## SECURITY ##\\nprotected-mode yes\\n\\n# NOTE: +@connection is necessary to be placed after -@dangerous, otherwise the user won't have the permissions to connect to Redis\\nuser {{CP_REDIS_USERNAME}} on +@all -@dangerous +@connection allkeys allchannels >{{CP_REDIS_PASSWORD}}\\n\\n# disable default user\\nuser default off\\n",
                  "name": "redis.conf"
                }
              ]
            }
          ],
          "defaultDocumentationPath": ""
        },
        "control-plane-login-site": {
          "type": "plugin",
          "name": "control-plane-login-site",
          "description": "Control Plane Frontend employed to support authentication flow",
          "dockerImage": "nexus.mia-platform.eu/backoffice/login-site:8.1.2",
          "componentId": "oauth-login-site",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "min": "15Mi",
              "max": "30Mi"
            },
            "cpuLimits": {
              "min": "10m",
              "max": "80m"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend"
            },
            "readiness": {
              "port": "frontend"
            },
            "startup": {}
          },
          "defaultConfigMaps": [],
          "defaultDocumentationPath": ""
        },
        "authentication-service": {
          "type": "plugin",
          "name": "authentication-service",
          "description": "Use Mia-Platform core Authentication Service to provide OAuth2 compliant user authentication API.",
          "dockerImage": "nexus.mia-platform.eu/core/authentication-service:3.10.0",
          "componentId": "fd.control-plane",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DELAY_SHUTDOWN_SECONDS",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "X-Forwarded-Proto",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "request-id",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_BASE_URL",
              "value": "http://crud-service/cp-users",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "redis-auth:6379",
              "valueType": "plain"
            },
            {
              "name": "REDIS_USERNAME",
              "value": "{{CP_REDIS_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "REDIS_PASSWORD",
              "value": "{{CP_REDIS_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "PROVIDER_TOKEN_PASS_PHRASE",
              "value": "{{CP_REDIS_PASSPHRASE}}",
              "valueType": "plain"
            },
            {
              "name": "EXPIRE_DELTA_PROVIDER_TOKEN_SEC",
              "value": "300",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_VALID_DURATION_SEC",
              "value": "86400",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_SIGNING_METHOD",
              "value": "RS256",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_PRIVATE_KEY_FILE_PATH",
              "value": "/secrets/private-key.pem",
              "valueType": "plain"
            },
            {
              "name": "MIA_JWT_TOKEN_PRIVATE_KEY_KID",
              "value": "{{CP_JWT_CLIENT_KID}}",
              "valueType": "plain"
            },
            {
              "name": "MIA_REFRESH_TOKEN_VALID_DURATION_SEC",
              "value": "604800",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SESSION_SCOPE",
              "value": "{{CP_REDIS_SCOPE}}",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "authentication-service-configuration",
              "mountPath": "/configs",
              "files": [
                {
                  "content": "{\\n  \\"apps\\": {\\n    \\"{{CP_APP_ID}}\\": {\\n      \\"providers\\": {\\n        \\"{{CP_PROVIDER_ID}}\\": {\\n          \\"order\\": 10,\\n          \\"type\\": \\"okta\\",\\n          \\"label\\": \\"Login with Okta\\",\\n          \\"clientId\\": \\"{{CP_OKTA_CLIENT_ID}}\\",\\n          \\"clientSecret\\": \\"{{CP_OKTA_CLIENT_SECRET}}\\",\\n          \\"baseUrl\\": \\"{{OKTA_BASE_URL}}\\",\\n          \\"authUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/authorize\\",\\n          \\"tokenUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/token\\",\\n          \\"userInfoUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/userinfo\\",\\n          \\"userSettingsURL\\": \\"{{OKTA_BASE_URL}}/enduser/settings\\",\\n          \\"logoutUrl\\": \\"{{OKTA_BASE_URL}}/oauth2/v1/logout\\",\\n          \\"scope\\": [\\n            \\"openid\\",\\n            \\"profile\\",\\n            \\"email\\",\\n            \\"offline_access\\"\\n          ]\\n        }\\n      },\\n      \\"redirectUrl\\": \\"{{CP_BASE_URL}}/web-login/oauth/callback\\",\\n      \\"defaultRedirectUrlOnSuccessfulLogin\\": \\"/\\",\\n      \\"authorizeStateRequired\\": true,\\n      \\"realm\\": \\"console\\",\\n      \\"isWebsiteApp\\": true,\\n      \\"issuer\\": \\"{{CP_APP_ID}}\\",\\n      \\"defaultGroups\\": []\\n    }\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            }
          ],
          "defaultSecrets": [
            {
              "name": "authentication-service-secrets",
              "mountPath": "/secrets"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "30Mi",
              "min": "15Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": ""
        },
        "authorization-service": {
          "type": "plugin",
          "name": "authorization-service",
          "description": "Use this service to authorize routes to request certain resources, leveraging OpenID Connect and simple user-defined configurations",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.2",
          "componentId": "authorization-service",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.4.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "http://authentication-service/userinfo",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "userId",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "connection,upgrade,sec-websocket-protocol,sec-websocket-version,x-request-id,request-id,cookie,authorization,client-type,host,x-forwarded-host",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "provider,email,username,name",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_USERINFO_URL",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "defaultLogParser": "mia-json",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "type": "folder",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "authorization-service-config",
              "mountPath": "/configs",
              "files": [
                {
                  "content": "{\\n  \\"/fast-data\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/web-login\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/authorize\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/oauth/token\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/logout\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/refreshtoken\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/userinfo\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/apps\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": true\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/micro-lc-configurations\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/control-plane-manager\\": {\\n    \\"ALL\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"true\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PUT\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/export\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/:id\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/count\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/bulk\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/:id/state\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-bindings/state\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/export\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/:id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/bulk\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/:id/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-bindings/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PUT\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/export\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/:id\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/count\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/bulk\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/:id/state\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/rbac-roles/state\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/export\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/:id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/bulk\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/:id/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/rbac-roles/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PUT\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/export\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/:id\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/count\\": {\\n    \\"GET\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/bulk\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/:id/state\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/rond/cp-users/state\\": {\\n    \\"POST\\": {\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/export\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/:id\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"DELETE\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/count\\": {\\n    \\"GET\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/bulk\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    },\\n    \\"PATCH\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/upsert-one\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/:id/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  },\\n  \\"/v2/rond/cp-users/state\\": {\\n    \\"POST\\": {\\n      \\"authorization\\": {\\n        \\"expression\\": \\"groups.admin\\",\\n        \\"public\\": false\\n      },\\n      \\"backofficeAuthorization\\": {\\n        \\"expression\\": \\"isBackoffice && groups.admin\\",\\n        \\"public\\": false\\n      }\\n    }\\n  }\\n}",
                  "name": "auth.json"
                }
              ],
              "viewAsReadOnly": true
            }
          ]
        },
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.1.1",
          "componentId": "crud-service",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "500m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "350Mi",
              "min": "70Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http",
              "initialDelaySeconds": 30,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [
                {
                  "content": "{\\n  \\"id\\": \\"cp-users\\",\\n  \\"description\\": \\"Collection of cp-users\\",\\n  \\"name\\": \\"cp-users\\",\\n  \\"fields\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"description\\": \\"_id\\",\\n      \\"type\\": \\"ObjectId\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"creatorId\\",\\n      \\"description\\": \\"creatorId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"description\\": \\"createdAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"updaterId\\",\\n      \\"description\\": \\"updaterId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"updatedAt\\",\\n      \\"description\\": \\"updatedAt\\",\\n      \\"type\\": \\"Date\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"__STATE__\\",\\n      \\"description\\": \\"__STATE__\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"name\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"groups\\",\\n      \\"type\\": \\"Array\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false,\\n      \\"items\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    {\\n      \\"name\\": \\"username\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"email\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"providerUserId\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": true,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"realm\\",\\n      \\"type\\": \\"string\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    },\\n    {\\n      \\"name\\": \\"metadata\\",\\n      \\"type\\": \\"RawObject\\",\\n      \\"required\\": false,\\n      \\"nullable\\": false\\n    }\\n  ],\\n  \\"endpointBasePath\\": \\"/cp-users\\",\\n  \\"defaultState\\": \\"PUBLIC\\",\\n  \\"indexes\\": [\\n    {\\n      \\"name\\": \\"_id\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": true,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"_id\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"createdAt\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"createdAt\\",\\n          \\"order\\": -1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"stateIndex\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"nameSearch\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"email\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"name\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"__STATE__\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    },\\n    {\\n      \\"name\\": \\"upsertSupport\\",\\n      \\"type\\": \\"normal\\",\\n      \\"unique\\": false,\\n      \\"fields\\": [\\n        {\\n          \\"name\\": \\"providerId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"providerUserId\\",\\n          \\"order\\": 1\\n        },\\n        {\\n          \\"name\\": \\"realm\\",\\n          \\"order\\": 1\\n        }\\n      ]\\n    }\\n  ],\\n  \\"tags\\": [\\n    \\"collection\\"\\n  ]\\n}",
                  "name": "cp-users.json"
                }
              ],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ]
        },
        "micro-lc": {
          "type": "plugin",
          "defaultLogParser": "mia-json",
          "name": "micro-lc",
          "description": "micro-lc config server",
          "dockerImage": "nexus.mia-platform.eu/microlc/middleware:{{MICRO_LC_MANAGER_VERSION}}",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "120Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "startup": {}
          },
          "tags": [
            "custom"
          ],
          "defaultConfigMaps": [
            {
              "name": "micro-lc-static-files",
              "mountPath": "/usr/static/public",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/control-plane-manager/\\" target=\\"_blank\\" />\\n\\n  <title>Fast Data Runtime Management</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script type=\\"module\\" nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js\\">\\n  </script>\\n\\n  <script type=\\"module\\" nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/micro-lc.production.js\\"></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#2cb47b\\">\\n    <micro-lc config-src=\\"/micro-lc-configurations/config.json\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>",
                  "name": "index.html"
                }
              ]
            },
            {
              "name": "micro-lc-configurations",
              "mountPath": "/usr/static/configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"required\\": [\\n        \\"bindingId\\"\\n      ],\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"__STATE__\\": {\\n          \\"enum\\": [\\n            \\"PUBLIC\\",\\n            \\"DRAFT\\",\\n            \\"TRASH\\",\\n            \\"DELETED\\"\\n          ],\\n          \\"formOptions\\": {\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"label\\": \\"STATE\\",\\n          \\"visualizationOptions\\": {\\n            \\"iconMap\\": {\\n              \\"PUBLIC\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#52C41A\\"\\n              },\\n              \\"DRAFT\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#CDCDCE\\"\\n              },\\n              \\"TRASH\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#FF9933\\"\\n              }\\n            },\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"bindingId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"description\\": \\"binding unique identifier \\",\\n          \\"formOptions\\": {\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"label\\": \\"Binding ID\\"\\n        },\\n        \\"groups\\": {\\n          \\"type\\": \\"array\\",\\n          \\"description\\": \\"list of user groups subject to this binding\\",\\n          \\"label\\": \\"Groups\\"\\n        },\\n        \\"subjects\\": {\\n          \\"type\\": \\"array\\",\\n          \\"description\\": \\"list of subjects of the binding\\",\\n          \\"excludeFromSearch\\": false,\\n          \\"format\\": \\"multilookup\\",\\n          \\"lookupOptions\\": {\\n            \\"lookupValue\\": \\"_id\\",\\n            \\"lookupFields\\": [\\n              \\"name\\"\\n            ],\\n            \\"lookupDataSource\\": \\"rond/cp-users\\"\\n          },\\n          \\"label\\": \\"Subjects\\"\\n        },\\n        \\"roles\\": {\\n          \\"type\\": \\"array\\",\\n          \\"description\\": \\"list of roles identifiers that subjects will inherit from the binding\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": false\\n          },\\n          \\"excludeFromSearch\\": false,\\n          \\"format\\": \\"multilookup\\",\\n          \\"lookupOptions\\": {\\n            \\"lookupValue\\": \\"roleId\\",\\n            \\"lookupFields\\": [\\n              \\"name\\"\\n            ],\\n            \\"lookupDataSource\\": \\"rond/rbac-roles\\"\\n          },\\n          \\"label\\": \\"Roles\\"\\n        },\\n        \\"permissions\\": {\\n          \\"type\\": \\"array\\",\\n          \\"description\\": \\"list of specific permissions that will be inherited by the subjects of the bindings\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"label\\": \\"Permissions\\"\\n        },\\n        \\"resource\\": {\\n          \\"type\\": \\"object\\",\\n          \\"description\\": \\"resource on which the role permissions are evaluated from the binding\\",\\n          \\"required\\": [],\\n          \\"additionalProperties\\": true,\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"label\\": \\"Resource\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"Bindings\\"\\n                },\\n                \\"tag\\": \\"bk-title\\"\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-left: 14px; align-self: end;\\"\\n                }\\n              },\\n              {\\n                \\"tag\\": \\"div\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"placeholder\\": \\"Search...\\"\\n                },\\n                \\"tag\\": \\"bk-search-bar\\"\\n              },\\n              {\\n                \\"tag\\": \\"bk-add-new-button\\"\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"\\",\\n                  \\"clickConfig\\": {\\n                    \\"type\\": \\"event\\",\\n                    \\"actionConfig\\": {\\n                      \\"label\\": \\"filter\\",\\n                      \\"payload\\": {}\\n                    }\\n                  },\\n                  \\"type\\": \\"outlined\\",\\n                  \\"iconId\\": \\"FunnelPlotOutlined\\"\\n                },\\n                \\"tag\\": \\"bk-button\\"\\n              }\\n            ],\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; gap: 10px; padding: 0 20px;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"width: 100%; display: flex; justify-content: space-between;\\"\\n            },\\n            \\"content\\": [\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                },\\n                \\"properties\\": {\\n                  \\"tabs\\": [\\n                    {\\n                      \\"key\\": \\"public\\",\\n                      \\"title\\": \\"Public\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"PUBLIC\\"\\n                        }\\n                      ],\\n                      \\"order\\": 0\\n                    },\\n                    {\\n                      \\"title\\": \\"Draft\\",\\n                      \\"order\\": 2,\\n                      \\"key\\": \\"draft\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"DRAFT\\"\\n                        }\\n                      ]\\n                    },\\n                    {\\n                      \\"title\\": \\"Trash\\",\\n                      \\"order\\": 3,\\n                      \\"key\\": \\"trash\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"TRASH\\"\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                \\"tag\\": \\"bk-tabs\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-right: 4px\\"\\n                },\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"filters\\": []\\n                },\\n                \\"tag\\": \\"bk-filters-manager\\"\\n              }\\n            ]\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"padding: 0 20px;\\"\\n            },\\n            \\"content\\": {\\n              \\"tag\\": \\"bk-breadcrumbs\\",\\n              \\"properties\\": {\\n                \\"dataSchema\\": {\\n                  \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                }\\n              }\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"header\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; padding-top: 10px; background-color: white;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"maxLines\\": 10,\\n              \\"rowActions\\": {\\n                \\"kind\\": \\"icons\\",\\n                \\"actions\\": [\\n                  {\\n                    \\"label\\": \\"Delete\\",\\n                    \\"icon\\": \\"fas fa-trash\\",\\n                    \\"kind\\": \\"event\\",\\n                    \\"content\\": \\"delete-data\\",\\n                    \\"meta\\": {\\n                      \\"actionId\\": \\"delete-data\\"\\n                    },\\n                    \\"requireConfirm\\": true\\n                  }\\n                ]\\n              },\\n              \\"showArrayPopover\\": false\\n            },\\n            \\"tag\\": \\"bk-table\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"requireConfirm\\": {\\n                \\"onClose\\": true,\\n                \\"onSave\\": true\\n              },\\n              \\"width\\": \\"70vw\\",\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"editorHeight\\": \\"30vh\\"\\n            },\\n            \\"tag\\": \\"bk-form-modal\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-confirmation-modal\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"rootElementSelectors\\": \\"main.micro-lc-layout-content\\",\\n              \\"successEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully created\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully updated\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully deleted\\",\\n                  \\"type\\": \\"success\\"\\n                }\\n              },\\n              \\"errorEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order creation\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order updated\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order deletion\\",\\n                  \\"type\\": \\"error\\"\\n                }\\n              }\\n            },\\n            \\"tag\\": \\"bk-notifications\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"main\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"flex-grow: 1; background-color: #f0f2f5; padding: 20px; overflow-y: auto;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"40vw\\"\\n            },\\n            \\"tag\\": \\"bk-filter-drawer\\"\\n          }\\n        ],\\n        \\"tag\\": \\"aside\\"\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-bulk-delete\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-bulk-actions\\",\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              }\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; justify-content: end; align-items: center;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"properties\\": {\\n              \\"pageSize\\": 10\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"footer\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; flex-wrap: wrap; padding: 10px 20px; background-color: white; gap: 10px; position: sticky; bottom: 0; z-index: 10\\"\\n        }\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/rond/rbac-bindings\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-client\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-lookup-client\\"\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; position: relative;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n  ]\\n}",
                  "name": "bindings.config.json"
                },
                {
                  "content": "{\\n  \\"applications\\": {\\n    \\"users\\": {\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./users\\",\\n      \\"config\\": \\"/micro-lc-configurations/users.config.json\\"\\n    },\\n    \\"bindings\\": {\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./bindings\\",\\n      \\"config\\": \\"/micro-lc-configurations/bindings.config.json\\"\\n    },\\n    \\"roles\\": {\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./roles\\",\\n      \\"config\\": \\"/micro-lc-configurations/roles.config.json\\"\\n    },\\n    \\"home\\": {\\n      \\"integrationMode\\": \\"iframe\\",\\n      \\"route\\": \\"./home\\",\\n      \\"src\\": \\"https://docs.mia-platform.eu/docs/fast_data/runtime_management\\"\\n    }\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"logo\\": {\\n            \\"altText\\": \\"Mia Platform Logo\\",\\n            \\"url\\": \\"https://raw.githubusercontent.com/mia-platform/.github/master/profile/img/mia-platform_logo_color.png\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"HomeOutlined\\"\\n              },\\n              \\"id\\": \\"home\\",\\n              \\"label\\": \\"Home\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"UserOutlined\\"\\n              },\\n              \\"id\\": \\"users\\",\\n              \\"label\\": \\"Users\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"LinkOutlined\\"\\n              },\\n              \\"id\\": \\"bindings\\",\\n              \\"label\\": \\"Bindings\\",\\n              \\"type\\": \\"application\\"\\n            },\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"EyeOutlined\\"\\n              },\\n              \\"id\\": \\"roles\\",\\n              \\"label\\": \\"Roles\\",\\n              \\"type\\": \\"application\\"\\n            }\\n          ],\\n          \\"mode\\": \\"topBar\\",\\n          \\"userMenu\\": {\\n            \\"userInfoUrl\\": \\"/userinfo\\"\\n          },\\n          \\"userMenuTrigger\\": \\"hover\\"\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#2cb47b\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./home\\"\\n  },\\n  \\"version\\": 2\\n}",
                  "name": "config.json"
                },
                {
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"required\\": [\\n        \\"roleId\\",\\n        \\"name\\",\\n        \\"permissions\\"\\n      ],\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"creatorId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"createdAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updaterId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"updatedAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"__STATE__\\": {\\n          \\"enum\\": [\\n            \\"PUBLIC\\",\\n            \\"DRAFT\\",\\n            \\"TRASH\\",\\n            \\"DELETED\\"\\n          ],\\n          \\"formOptions\\": {\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"iconMap\\": {\\n              \\"PUBLIC\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#52C41A\\"\\n              },\\n              \\"DRAFT\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#CDCDCE\\"\\n              },\\n              \\"TRASH\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#FF9933\\"\\n              }\\n            },\\n            \\"hidden\\": true\\n          }\\n        },\\n        \\"roleId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"description\\": \\"unique role identifier\\",\\n          \\"formOptions\\": {\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"label\\": \\"Role ID\\"\\n        },\\n        \\"name\\": {\\n          \\"type\\": \\"string\\",\\n          \\"description\\": \\"human readable role name\\",\\n          \\"label\\": \\"Name\\"\\n        },\\n        \\"description\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": \\"Description\\"\\n        },\\n        \\"permissions\\": {\\n          \\"type\\": \\"array\\",\\n          \\"description\\": \\"list of permissions composing the role\\",\\n          \\"label\\": \\"Permissions\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"Roles\\"\\n                },\\n                \\"tag\\": \\"bk-title\\"\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-left: 14px; align-self: end;\\"\\n                }\\n              },\\n              {\\n                \\"tag\\": \\"div\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"placeholder\\": \\"Search...\\"\\n                },\\n                \\"tag\\": \\"bk-search-bar\\"\\n              },\\n              {\\n                \\"tag\\": \\"bk-add-new-button\\"\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"\\",\\n                  \\"clickConfig\\": {\\n                    \\"type\\": \\"event\\",\\n                    \\"actionConfig\\": {\\n                      \\"label\\": \\"filter\\",\\n                      \\"payload\\": {}\\n                    }\\n                  },\\n                  \\"type\\": \\"outlined\\",\\n                  \\"iconId\\": \\"FunnelPlotOutlined\\"\\n                },\\n                \\"tag\\": \\"bk-button\\"\\n              }\\n            ],\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; gap: 10px; padding: 0 20px;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"width: 100%; display: flex; justify-content: space-between;\\"\\n            },\\n            \\"content\\": [\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                },\\n                \\"properties\\": {\\n                  \\"tabs\\": [\\n                    {\\n                      \\"key\\": \\"public\\",\\n                      \\"title\\": \\"Public\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"PUBLIC\\"\\n                        }\\n                      ],\\n                      \\"order\\": 0\\n                    },\\n                    {\\n                      \\"title\\": \\"Draft\\",\\n                      \\"order\\": 2,\\n                      \\"key\\": \\"draft\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"DRAFT\\"\\n                        }\\n                      ]\\n                    },\\n                    {\\n                      \\"title\\": \\"Trash\\",\\n                      \\"order\\": 3,\\n                      \\"key\\": \\"trash\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"TRASH\\"\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                \\"tag\\": \\"bk-tabs\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-right: 4px\\"\\n                },\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"filters\\": []\\n                },\\n                \\"tag\\": \\"bk-filters-manager\\"\\n              }\\n            ]\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"padding: 0 20px;\\"\\n            },\\n            \\"content\\": {\\n              \\"tag\\": \\"bk-breadcrumbs\\",\\n              \\"properties\\": {\\n                \\"dataSchema\\": {\\n                  \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                }\\n              }\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"header\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; padding-top: 10px; background-color: white;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"maxLines\\": 10,\\n              \\"rowActions\\": {\\n                \\"kind\\": \\"icons\\",\\n                \\"actions\\": [\\n                  {\\n                    \\"label\\": \\"Delete\\",\\n                    \\"icon\\": \\"fas fa-trash\\",\\n                    \\"kind\\": \\"event\\",\\n                    \\"content\\": \\"delete-data\\",\\n                    \\"meta\\": {\\n                      \\"actionId\\": \\"delete-data\\"\\n                    },\\n                    \\"requireConfirm\\": true\\n                  }\\n                ]\\n              }\\n            },\\n            \\"tag\\": \\"bk-table\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"requireConfirm\\": {\\n                \\"onClose\\": true,\\n                \\"onSave\\": true\\n              },\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"70vw\\"\\n            },\\n            \\"tag\\": \\"bk-form-modal\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-confirmation-modal\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"rootElementSelectors\\": \\"main.micro-lc-layout-content\\",\\n              \\"successEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully created\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully updated\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully deleted\\",\\n                  \\"type\\": \\"success\\"\\n                }\\n              },\\n              \\"errorEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order creation\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order updated\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order deletion\\",\\n                  \\"type\\": \\"error\\"\\n                }\\n              }\\n            },\\n            \\"tag\\": \\"bk-notifications\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"main\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"flex-grow: 1; background-color: #f0f2f5; padding: 20px; overflow-y: auto;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"40vw\\"\\n            },\\n            \\"tag\\": \\"bk-filter-drawer\\"\\n          }\\n        ],\\n        \\"tag\\": \\"aside\\"\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-bulk-delete\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-bulk-actions\\",\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              }\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; justify-content: end; align-items: center;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"properties\\": {\\n              \\"pageSize\\": 10\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"footer\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; flex-wrap: wrap; padding: 10px 20px; background-color: white; gap: 10px; position: sticky; bottom: 0; z-index: 10\\"\\n        }\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/rond/rbac-roles\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-client\\"\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; position: relative;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n  ]\\n}",
                  "name": "roles.config.json"
                },
                {
                  "content": "{\\n  \\"definitions\\": {\\n    \\"dataSchema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"required\\": [\\n        \\"providerId\\",\\n        \\"providerUserId\\"\\n      ],\\n      \\"properties\\": {\\n        \\"_id\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"creatorId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"createdAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"updaterId\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"updatedAt\\": {\\n          \\"formOptions\\": {\\n            \\"hiddenOnInsert\\": true,\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"dateOptions\\": {\\n            \\"displayFormat\\": \\"YYYY-MM-DD hh:mm\\"\\n          },\\n          \\"format\\": \\"date-time\\",\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"__STATE__\\": {\\n          \\"enum\\": [\\n            \\"PUBLIC\\",\\n            \\"DRAFT\\",\\n            \\"TRASH\\",\\n            \\"DELETED\\"\\n          ],\\n          \\"label\\": \\"STATE\\",\\n          \\"formOptions\\": {\\n            \\"readOnlyOnUpdate\\": true\\n          },\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true,\\n            \\"iconMap\\": {\\n              \\"PUBLIC\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#52C41A\\"\\n              },\\n              \\"DRAFT\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#CDCDCE\\"\\n              },\\n              \\"TRASH\\": {\\n                \\"shape\\": \\"roundedSquare\\",\\n                \\"color\\": \\"#FF9933\\"\\n              }\\n            }\\n          },\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"name\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": \\"Name\\"\\n        },\\n        \\"groups\\": {\\n          \\"type\\": \\"array\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"label\\": \\"Groups\\"\\n        },\\n        \\"username\\": {\\n          \\"type\\": \\"string\\",\\n          \\"label\\": \\"Username\\"\\n        },\\n        \\"email\\": {\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true,\\n            \\"hidden\\": true\\n          },\\n          \\"label\\": \\"Email\\"\\n        },\\n        \\"providerId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"label\\": \\"Provider ID\\"\\n        },\\n        \\"providerUserId\\": {\\n          \\"type\\": \\"string\\",\\n          \\"visualizationOptions\\": {\\n            \\"hidden\\": true\\n          },\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"label\\": \\"Provider User ID\\"\\n        },\\n        \\"realm\\": {\\n          \\"type\\": \\"string\\",\\n          \\"formOptions\\": {\\n            \\"readOnly\\": true\\n          },\\n          \\"label\\": \\"Realm\\"\\n        },\\n        \\"metadata\\": {\\n          \\"type\\": \\"object\\",\\n          \\"required\\": [],\\n          \\"additionalProperties\\": true,\\n          \\"label\\": \\"Metadata\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"content\\": {\\n    \\"content\\": [\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"content\\": [\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"Users\\"\\n                },\\n                \\"tag\\": \\"bk-title\\"\\n              },\\n              {\\n                \\"tag\\": \\"bk-refresh-button\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-left: 14px; align-self: end;\\"\\n                }\\n              },\\n              {\\n                \\"tag\\": \\"div\\",\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                }\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"placeholder\\": \\"Search...\\"\\n                },\\n                \\"tag\\": \\"bk-search-bar\\"\\n              },\\n              {\\n                \\"properties\\": {\\n                  \\"content\\": \\"\\",\\n                  \\"clickConfig\\": {\\n                    \\"type\\": \\"event\\",\\n                    \\"actionConfig\\": {\\n                      \\"label\\": \\"filter\\",\\n                      \\"payload\\": {}\\n                    }\\n                  },\\n                  \\"type\\": \\"outlined\\",\\n                  \\"iconId\\": \\"FunnelPlotOutlined\\"\\n                },\\n                \\"tag\\": \\"bk-button\\"\\n              }\\n            ],\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; flex-direction: row; gap: 10px; padding: 0 20px;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"width: 100%; display: flex; justify-content: space-between;\\"\\n            },\\n            \\"content\\": [\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"flex-grow: 1;\\"\\n                },\\n                \\"properties\\": {\\n                  \\"tabs\\": [\\n                    {\\n                      \\"key\\": \\"public\\",\\n                      \\"title\\": \\"Public\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"PUBLIC\\"\\n                        }\\n                      ],\\n                      \\"order\\": 0\\n                    },\\n                    {\\n                      \\"title\\": \\"Draft\\",\\n                      \\"key\\": \\"draft\\",\\n                      \\"order\\": 2,\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"DRAFT\\"\\n                        }\\n                      ]\\n                    },\\n                    {\\n                      \\"title\\": \\"Trash\\",\\n                      \\"filters\\": [\\n                        {\\n                          \\"property\\": \\"__STATE__\\",\\n                          \\"operator\\": \\"equal\\",\\n                          \\"value\\": \\"TRASH\\"\\n                        }\\n                      ],\\n                      \\"order\\": 3,\\n                      \\"key\\": \\"trash\\"\\n                    }\\n                  ]\\n                },\\n                \\"tag\\": \\"bk-tabs\\"\\n              },\\n              {\\n                \\"attributes\\": {\\n                  \\"style\\": \\"margin-right: 4px\\"\\n                },\\n                \\"properties\\": {\\n                  \\"dataSchema\\": {\\n                    \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                  },\\n                  \\"filters\\": []\\n                },\\n                \\"tag\\": \\"bk-filters-manager\\"\\n              }\\n            ]\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"padding: 0 20px;\\"\\n            },\\n            \\"content\\": {\\n              \\"tag\\": \\"bk-breadcrumbs\\",\\n              \\"properties\\": {\\n                \\"dataSchema\\": {\\n                  \\"$ref\\": \\"#/definitions/dataSchema\\"\\n                }\\n              }\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"header\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: column; padding-top: 10px; background-color: white;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"maxLines\\": 10,\\n              \\"rowActions\\": {\\n                \\"kind\\": \\"icons\\",\\n                \\"actions\\": [\\n                  {\\n                    \\"label\\": \\"Delete\\",\\n                    \\"icon\\": \\"fas fa-trash\\",\\n                    \\"kind\\": \\"event\\",\\n                    \\"content\\": \\"delete-data\\",\\n                    \\"meta\\": {\\n                      \\"actionId\\": \\"delete-data\\"\\n                    },\\n                    \\"requireConfirm\\": true\\n                  }\\n                ]\\n              }\\n            },\\n            \\"tag\\": \\"bk-table\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"requireConfirm\\": {\\n                \\"onClose\\": true,\\n                \\"onSave\\": true\\n              },\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"70vw\\",\\n              \\"allowObjectAsTable\\": false,\\n              \\"editorHeight\\": \\"30vh\\"\\n            },\\n            \\"tag\\": \\"bk-form-modal\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-confirmation-modal\\"\\n          },\\n          {\\n            \\"properties\\": {\\n              \\"rootElementSelectors\\": \\"main.micro-lc-layout-content\\",\\n              \\"successEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully created\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully updated\\",\\n                  \\"type\\": \\"success\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Success\\",\\n                  \\"content\\": \\"Data successfully deleted\\",\\n                  \\"type\\": \\"success\\"\\n                }\\n              },\\n              \\"errorEventMap\\": {\\n                \\"create-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order creation\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"update-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order updated\\",\\n                  \\"type\\": \\"error\\"\\n                },\\n                \\"delete-data\\": {\\n                  \\"title\\": \\"Error\\",\\n                  \\"content\\": \\"An error occurred during order deletion\\",\\n                  \\"type\\": \\"error\\"\\n                }\\n              }\\n            },\\n            \\"tag\\": \\"bk-notifications\\",\\n            \\"attributes\\": {}\\n          }\\n        ],\\n        \\"tag\\": \\"main\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"flex-grow: 1; background-color: #f0f2f5; padding: 20px; overflow-y: auto;\\"\\n        }\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              },\\n              \\"width\\": \\"40vw\\"\\n            },\\n            \\"tag\\": \\"bk-filter-drawer\\"\\n          }\\n        ],\\n        \\"tag\\": \\"aside\\"\\n      },\\n      {\\n        \\"content\\": [\\n          {\\n            \\"tag\\": \\"bk-bulk-delete\\"\\n          },\\n          {\\n            \\"tag\\": \\"bk-bulk-actions\\",\\n            \\"properties\\": {\\n              \\"dataSchema\\": {\\n                \\"$ref\\": \\"#/definitions/dataSchema\\"\\n              }\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"div\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"flex-grow: 1;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-footer\\",\\n            \\"attributes\\": {\\n              \\"style\\": \\"display: flex; justify-content: end; align-items: center;\\"\\n            }\\n          },\\n          {\\n            \\"tag\\": \\"bk-pagination\\",\\n            \\"properties\\": {\\n              \\"pageSize\\": 10\\n            }\\n          }\\n        ],\\n        \\"tag\\": \\"footer\\",\\n        \\"attributes\\": {\\n          \\"style\\": \\"display: flex; flex-direction: row; flex-wrap: wrap; padding: 10px 20px; background-color: white; gap: 10px; position: sticky; bottom: 0; z-index: 10\\"\\n        }\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"basePath\\": \\"/v2/rond/cp-users\\",\\n          \\"dataSchema\\": {\\n            \\"$ref\\": \\"#/definitions/dataSchema\\"\\n          }\\n        },\\n        \\"tag\\": \\"bk-crud-client\\"\\n      }\\n    ],\\n    \\"tag\\": \\"div\\",\\n    \\"attributes\\": {\\n      \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; position: relative;\\"\\n    }\\n  },\\n  \\"sources\\": [\\n    \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n  ]\\n}",
                  "name": "users.config.json"
                }
              ]
            },
            {
              "name": "micro-lc-server-configuration",
              "mountPath": "/usr/src/app/config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</micro-lc-configurations/config.json>; rel=preload; as=fetch; crossorigin\\",\\n        \\"</mfe-application/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/{{MICRO_LC_VERSION}}/dist/assets/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}",
                  "name": "config.json"
                }
              ]
            },
            {
              "name": "micro-lc-assets",
              "mountPath": "/usr/static/public/assets",
              "files": [
                {
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n",
                  "name": "style.css"
                }
              ]
            }
          ],
          "componentId": "backoffice-backend",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/fast-data": {
          "defaultBasePath": "/fast-data",
          "defaultPathRewrite": "/fast-data",
          "description": "",
          "type": "custom",
          "tags": [
            "control-plane"
          ],
          "public": false,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "control-plane"
        },
        "/control-plane": {
          "defaultBasePath": "/control-plane",
          "defaultPathRewrite": "/control-plane",
          "description": "",
          "type": "custom",
          "tags": [
            "control-plane-fe"
          ],
          "public": false,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "control-plane-fe",
          "listeners": {
            "frontend": true
          }
        },
        "/web-login": {
          "defaultBasePath": "/web-login",
          "defaultPathRewrite": "/web-login",
          "description": "Endpoint /web-login",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "control-plane-login-site"
        },
        "/authorize": {
          "defaultBasePath": "/authorize",
          "defaultPathRewrite": "/authorize",
          "description": "Endpoint /authorize",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "authentication-service"
        },
        "/oauth/token": {
          "defaultBasePath": "/oauth/token",
          "defaultPathRewrite": "/oauth/token",
          "description": "Endpoint /oauth/token",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "authentication-service"
        },
        "/logout": {
          "defaultBasePath": "/logout",
          "defaultPathRewrite": "/logout",
          "description": "Endpoint /logout",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "authentication-service"
        },
        "/refreshtoken": {
          "defaultBasePath": "/refreshtoken",
          "defaultPathRewrite": "/refreshtoken",
          "description": "Endpoint /refreshtoken",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "authentication-service"
        },
        "/userinfo": {
          "defaultBasePath": "/userinfo",
          "defaultPathRewrite": "/userinfo",
          "description": "Endpoint /userinfo",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "authentication-service"
        },
        "/apps": {
          "defaultBasePath": "/apps",
          "defaultPathRewrite": "/apps",
          "description": "Endpoint /apps",
          "type": "custom",
          "tags": [
            "auth"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "authentication-service"
        },
        "/rond/cp-users": {
          "defaultBasePath": "/rond/cp-users",
          "defaultPathRewrite": "/cp-users",
          "description": "Endpoint /rond/cp-users",
          "routes": {
            "GET/": {
              "id": "GET/",
              "path": "/",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "GET",
              "preDecorators": [],
              "postDecorators": []
            },
            "POST/": {
              "id": "POST/",
              "path": "/",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "POST",
              "preDecorators": [],
              "postDecorators": []
            },
            "GET/export": {
              "id": "GET/export",
              "path": "/export",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": false,
                "value": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "GET",
              "preDecorators": [],
              "postDecorators": []
            },
            "GET/:id": {
              "id": "GET/:id",
              "path": "/:id",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "GET",
              "preDecorators": [],
              "postDecorators": []
            },
            "DELETE/:id": {
              "id": "DELETE/:id",
              "path": "/:id",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "DELETE",
              "preDecorators": [],
              "postDecorators": []
            },
            "DELETE/": {
              "id": "DELETE/",
              "path": "/",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "DELETE",
              "preDecorators": [],
              "postDecorators": []
            },
            "PATCH/:id": {
              "id": "PATCH/:id",
              "path": "/:id",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "PATCH",
              "preDecorators": [],
              "postDecorators": []
            },
            "PATCH/": {
              "id": "PATCH/",
              "path": "/",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "PATCH",
              "preDecorators": [],
              "postDecorators": []
            },
            "GET/count": {
              "id": "GET/count",
              "path": "/count",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "GET",
              "preDecorators": [],
              "postDecorators": []
            },
            "POST/bulk": {
              "id": "POST/bulk",
              "path": "/bulk",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "POST",
              "preDecorators": [],
              "postDecorators": []
            },
            "POST/upsert-one": {
              "id": "POST/upsert-one",
              "path": "/upsert-one",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "POST",
              "preDecorators": [],
              "postDecorators": []
            },
            "PATCH/bulk": {
              "id": "PATCH/bulk",
              "path": "/bulk",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "PATCH",
              "preDecorators": [],
              "postDecorators": []
            },
            "POST/:id/state": {
              "id": "POST/:id/state",
              "path": "/:id/state",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "POST",
              "preDecorators": [],
              "postDecorators": []
            },
            "POST/state": {
              "id": "POST/state",
              "path": "/state",
              "public": {
                "inherited": true
              },
              "showInDocumentation": {
                "inherited": true
              },
              "secreted": {
                "inherited": true
              },
              "allowUnknownRequestContentType": {
                "inherited": true
              },
              "allowUnknownResponseContentType": {
                "inherited": true
              },
              "acl": {
                "inherited": true
              },
              "backofficeAcl": {
                "inherited": true
              },
              "verb": "POST",
              "preDecorators": [],
              "postDecorators": []
            }
          },
          "type": "crud",
          "tags": [
            "crud"
          ],
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "groups.admin",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "pathName": "/",
          "collectionId": "cp-users"
        },
        "/micro-lc-configurations": {
          "defaultBasePath": "/micro-lc-configurations",
          "defaultPathRewrite": "/configurations",
          "description": "Endpoint /micro-lc-configurations",
          "type": "custom",
          "tags": [
            "backoffice"
          ],
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "micro-lc"
        },
        "/control-plane-manager": {
          "defaultBasePath": "/control-plane-manager",
          "defaultPathRewrite": "/public",
          "description": "Endpoint /control-plane-manager",
          "type": "custom",
          "tags": [
            "micro-lc"
          ],
          "public": false,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "listeners": {
            "frontend": true
          },
          "service": "micro-lc"
        }
      },
      "collections": {
        "cp-users": {
          "id": "cp-users",
          "description": "Collection of cp-users",
          "defaultName": "cp-users",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "groups",
              "type": "Array_string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "username",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "email",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "providerId",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "providerUserId",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "realm",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "metadata",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/cp-users",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            },
            {
              "name": "stateIndex",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ]
            },
            {
              "name": "nameSearch",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "email",
                  "order": 1
                },
                {
                  "name": "name",
                  "order": 1
                },
                {
                  "name": "__STATE__",
                  "order": 1
                }
              ]
            },
            {
              "name": "upsertSupport",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "providerId",
                  "order": 1
                },
                {
                  "name": "providerUserId",
                  "order": 1
                },
                {
                  "name": "realm",
                  "order": 1
                }
              ]
            }
          ]
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      },
      "unsecretedVariables": {
        "CP_REDIS_SCOPE": {
          "productionEnv": "",
          "noProductionEnv": ""
        },
        "OKTA_BASE_URL": {
          "productionEnv": "",
          "noProductionEnv": ""
        },
        "CP_APP_ID": {
          "productionEnv": "",
          "noProductionEnv": ""
        },
        "CP_PROVIDER_ID": {
          "productionEnv": "",
          "noProductionEnv": ""
        },
        "CP_BASE_URL": {
          "productionEnv": "",
          "noProductionEnv": ""
        },
        "MICRO_LC_VERSION": {
          "productionEnv": "2.4.0",
          "noProductionEnv": "2.4.0"
        },
        "MICRO_LC_MANAGER_VERSION": {
          "productionEnv": "3.1.1",
          "noProductionEnv": "3.1.1"
        },
        "BACK_KIT_VERSION": {
          "productionEnv": "1.5.0",
          "noProductionEnv": "1.5.0"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-05-30T16:08:43.656Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-control-plane-with-access-control-application.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "monitoring",
    "description": "This is the application that sets up the monitoring resources and cofigures them to monitor Fast Data operations",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/monitoring/overview"
    },
    "itemId": "fast-data-monitoring",
    "name": "Fast Data Monitoring",
    "publishOnMiaDocumentation": false,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/fast-data-monitoring-application",
    "resources": {
      "services": {
        "kafka-exporter": {
          "type": "plugin",
          "name": "kafka-exporter",
          "dockerImage": "nexus.mia-platform.eu/cache/danielqsj/kafka-exporter:v1.8.0",
          "description": "Use this service to export metrics from Kafka for Prometheus",
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "",
          "defaultResources": {
            "cpuLimits": {
              "min": "40m",
              "max": "200m"
            },
            "memoryLimits": {
              "min": "20Mi",
              "max": "80Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultArgs": [
            "--kafka.server={{KAFKA_BROKERS}}",
            "--sasl.enabled",
            "--sasl.username={{KAFKA_SASL_USERNAME}}",
            "--sasl.password={{KAFKA_SASL_PASSWORD}}",
            "--sasl.mechanism={{KAFKA_SASL_MECHANISM}}",
            "--tls.insecure-skip-tls-verify",
            "--tls.enabled",
            "--topic.filter={{KAFKA_EXPORTER_TOPIC_FILTER}}",
            "--group.filter={{KAFKA_EXPORTER_GROUP_FILTER}}",
            "--log.enable-sarama",
            "--web.telemetry-path=/-/metrics",
            "--web.listen-address=:3000"
          ],
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/-/metrics",
                "port": "http",
                "interval": "60s"
              }
            ]
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "mongodb-query-exporter": {
          "type": "plugin",
          "name": "mongodb-query-exporter",
          "dockerImage": "ghcr.io/raffis/mongodb-query-exporter:v5.1.0",
          "description": "Use this service to export metrics from MongoDB in the Prometheus format based on your queries",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MDBEXPORTER_CONFIG",
              "value": "/configurations/config.yml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "30m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "20Mi",
              "max": "80Mi"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "mongodb-exporter-config",
              "mountPath": "/configurations",
              "files": [
                {
                  "content": "version: 3.0\\nbind: 0.0.0.0:3000\\nmetricsPath: /-/metrics\\n\\nlog:\\n  encoding: json\\n  level: info\\n  development: false\\n  disableCaller: false\\n\\nglobal:\\n  queryTimeout: 10s\\n  maxConnection: 3\\n  defaultCache: 4m\\n\\nservers:\\n  - name: main\\n    uri: {{MONGODB_URL}}\\n\\naggregations:\\n  - metrics:\\n      - name: projection_changes_new_info\\n        type: counter\\n        help: \\"Count the number of NEW projection changes\\"\\n        value: total\\n        overrideEmpty: true\\n        emptyValue: 0\\n        labels: []\\n        constLabels:\\n          collection: d_projections_changes\\n    servers: [main]\\n    mode: pull\\n    cache: 0\\n    database: {{FAST_DATA_PROJECTIONS_DATABASE_NAME}}\\n    collection: d_projections_changes\\n    pipeline: |\\n      [\\n        {\\n          \\"$match\\": {\\n            \\"changes.state\\": \\"NEW\\"\\n          }\\n        },\\n        {\\n          \\"$count\\": \\"total\\"\\n        }\\n      ]\\n",
                  "name": "config.yml"
                }
              ]
            }
          ],
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/-/metrics",
                "port": "http",
                "interval": "60s"
              }
            ]
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "unsecretedVariables": {
        "KAFKA_BROKERS": {
          "productionEnv": "CHANGE_ME",
          "noProductionEnv": "CHANGE_ME"
        },
        "KAFKA_SASL_USERNAME": {
          "productionEnv": "CHANGE_ME",
          "noProductionEnv": "CHANGE_ME"
        },
        "KAFKA_SASL_PASSWORD": {
          "productionEnv": "CHANGE_ME",
          "noProductionEnv": "CHANGE_ME"
        },
        "KAFKA_SASL_MECHANISM": {
          "productionEnv": "scram-sha-256",
          "noProductionEnv": "scram-sha-256"
        },
        "KAFKA_EXPORTER_TOPIC_FILTER": {
          "productionEnv": ".*",
          "noProductionEnv": ".*"
        },
        "KAFKA_EXPORTER_GROUP_FILTER": {
          "productionEnv": ".*",
          "noProductionEnv": ".*"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-10-22T08:52:38.031Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fast-data-monitoring.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/fhir-adapter/overview"
    },
    "itemId": "fhir-adapter",
    "name": "FHIR Adapter",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-adapter",
    "resources": {
      "services": {
        "fhir-adapter": {
          "type": "plugin",
          "name": "fhir-adapter",
          "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/fhir-adapter:1.2.0",
          "componentId": "fhir-adapter",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "/home/config/mapping-config.json",
              "valueType": "plain"
            },
            {
              "name": "FHIR_SERVER_BASE_PATH",
              "value": "http://fhir-api-server/fhir/api",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_KEY",
              "value": "{{FHIR_ENCRYPTION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_IV",
              "value": "{{FHIR_ENCRYPTION_IV}}",
              "valueType": "plain"
            },
            {
              "name": "FILE_DOWNLOAD_BASE_PATH",
              "value": "/fhir-adapter",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "45Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/config",
              "files": [
                {
                  "name": "mapping-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.2.0",
      "releaseNote": "Added support for managing bundle transactions using endpoint \`POST /transaction/:transactionId\`"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-05-15T10:00:00.000Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-adapter.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/fhir-adapter/overview"
    },
    "itemId": "fhir-adapter",
    "name": "FHIR Adapter",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-adapter",
    "resources": {
      "services": {
        "fhir-adapter": {
          "type": "plugin",
          "name": "fhir-adapter",
          "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/fhir-adapter:1.1.0",
          "componentId": "fhir-adapter",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "/home/config/mapping-config.json",
              "valueType": "plain"
            },
            {
              "name": "FHIR_SERVER_BASE_PATH",
              "value": "http://fhir-api-server/fhir/api",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_KEY",
              "value": "{{FHIR_ENCRYPTION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_IV",
              "value": "{{FHIR_ENCRYPTION_IV}}",
              "valueType": "plain"
            },
            {
              "name": "FILE_DOWNLOAD_BASE_PATH",
              "value": "/fhir-adapter",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "45Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/config",
              "files": [
                {
                  "name": "mapping-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.1.0",
      "releaseNote": "Added POST /:resource/ endpoint to handle also trailing slash"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.531Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-adapter.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/fhir-adapter/overview"
    },
    "itemId": "fhir-adapter",
    "name": "FHIR Adapter",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-adapter",
    "resources": {
      "services": {
        "fhir-adapter": {
          "type": "plugin",
          "name": "fhir-adapter",
          "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/fhir-adapter:1.0.5",
          "componentId": "fhir-adapter",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "/home/config/mapping-config.json",
              "valueType": "plain"
            },
            {
              "name": "FHIR_SERVER_BASE_PATH",
              "value": "http://fhir-api-server/fhir/api",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_KEY",
              "value": "{{FHIR_ENCRYPTION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_IV",
              "value": "{{FHIR_ENCRYPTION_IV}}",
              "valueType": "plain"
            },
            {
              "name": "FILE_DOWNLOAD_BASE_PATH",
              "value": "/fhir-adapter",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "45Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/config",
              "files": [
                {
                  "name": "mapping-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.5",
      "releaseNote": "Upgrade base Docker image and project dependencies"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.531Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-adapter.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/fhir-adapter/overview"
    },
    "itemId": "fhir-adapter",
    "name": "FHIR Adapter",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-adapter",
    "resources": {
      "services": {
        "fhir-adapter": {
          "type": "plugin",
          "name": "fhir-adapter",
          "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/fhir-adapter:1.0.4",
          "componentId": "fhir-adapter",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "/home/config/mapping-config.json",
              "valueType": "plain"
            },
            {
              "name": "FHIR_SERVER_BASE_PATH",
              "value": "http://fhir-api-server/fhir/api",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_KEY",
              "value": "{{FHIR_ENCRYPTION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_IV",
              "value": "{{FHIR_ENCRYPTION_IV}}",
              "valueType": "plain"
            },
            {
              "name": "FILE_DOWNLOAD_BASE_PATH",
              "value": "/fhir-adapter",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "45Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/config",
              "files": [
                {
                  "name": "mapping-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.4",
      "releaseNote": "Update Node.js to v20 (LTS) and dependencies"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.530Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-adapter.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/fhir-adapter/overview"
    },
    "itemId": "fhir-adapter",
    "name": "FHIR Adapter",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-adapter",
    "resources": {
      "services": {
        "fhir-adapter": {
          "type": "plugin",
          "name": "fhir-adapter",
          "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/fhir-adapter:1.0.3",
          "componentId": "fhir-adapter",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "/home/config/mapping-config.json",
              "valueType": "plain"
            },
            {
              "name": "FHIR_SERVER_BASE_PATH",
              "value": "http://fhir-api-server/fhir/api",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_KEY",
              "value": "{{FHIR_ENCRYPTION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_IV",
              "value": "{{FHIR_ENCRYPTION_IV}}",
              "valueType": "plain"
            },
            {
              "name": "FILE_DOWNLOAD_BASE_PATH",
              "value": "/fhir-adapter",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "45Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/config",
              "files": [
                {
                  "name": "mapping-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.019Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-adapter.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/fhir-adapter/overview"
    },
    "itemId": "fhir-adapter",
    "name": "FHIR Adapter",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-adapter",
    "resources": {
      "services": {
        "fhir-adapter": {
          "type": "plugin",
          "name": "fhir-adapter",
          "description": "The FHIR Adapter provides a configurable interface to communicate systems which implement FHIR standard with systems which do not implement it.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/fhir-adapter:1.0.3",
          "componentId": "fhir-adapter",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_PATH",
              "value": "/home/config/mapping-config.json",
              "valueType": "plain"
            },
            {
              "name": "FHIR_SERVER_BASE_PATH",
              "value": "http://fhir-api-server/fhir/api",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_KEY",
              "value": "{{FHIR_ENCRYPTION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_ENCRYPTION_IV",
              "value": "{{FHIR_ENCRYPTION_IV}}",
              "valueType": "plain"
            },
            {
              "name": "FILE_DOWNLOAD_BASE_PATH",
              "value": "/fhir-adapter",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "60Mi",
              "min": "45Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/config",
              "files": [
                {
                  "name": "mapping-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-22T17:30:21.362Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-adapter.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Mia FHIR Server implements the FHIR standard and is based on HAPI FHIR, an open-source Java implementation of the FHIR standard",
    "documentation": {
      "type": "externalLink",
      "url": "https://hapifhir.io/hapi-fhir/docs/v/7.6.0/"
    },
    "itemId": "fhir-api-server",
    "name": "FHIR Server",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/fhir-api-server",
    "resources": {
      "services": {
        "fhir-server": {
          "type": "plugin",
          "name": "fhir-server",
          "description": "The Mia FHIR Server implements the FHIR standard and is based on HAPI FHIR, an open-source Java implementation of the FHIR standard",
          "dockerImage": "nexus.mia-platform.eu/cache/hapiproject/hapi:v7.6.0",
          "defaultEnvironmentVariables": [
            {
              "name": "SPRING_CONFIG_LOCATION",
              "value": "file:///etc/hapi/config.yaml",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "150m"
            },
            "memoryLimits": {
              "max": "2000Mi",
              "min": "1000Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "config",
              "mountPath": "/etc/hapi",
              "files": [
                {
                  "name": "config.yaml",
                  "content": "Fill with starter template available at https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/application.yaml"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.0",
      "releaseNote": "Switch to HAPI FHIR Docker image (v7.6.0)"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.531Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "fhir-api-server.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "files",
    "description": "Ready to use upload/download file service with supporting crud collections",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/files-service/configuration"
    },
    "itemId": "file-bucket",
    "name": "File Bucket",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/file-bucket-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "componentId": "api-gateway",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "tags": [
            "microgateway"
          ],
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            },
            "cpuLimits": {
              "min": "10m"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        },
        "crud-service": {
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "/",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "70Mi"
            }
          },
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.1.1",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin",
          "componentId": "crud-service",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.1",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/file-records/",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/config/config.json",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "/files-service/",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "mountPath": "/home/node/config",
              "name": "files-service-configuration",
              "files": [
                {
                  "content": "{\\n  \\"type\\": \\"mongodb\\",\\n  \\"options\\": {\\n    \\"url\\": \\"{{MONGODB_URL}}\\",\\n    \\"bucketName\\": \\"CHANGE_WITH_YOUR_BUCKET_NAME\\"\\n  }\\n}\\n",
                  "name": "config.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/files-service": {
          "defaultBasePath": "/files-service",
          "defaultPathRewrite": "/",
          "description": "Endpoint /files-service",
          "type": "custom",
          "tags": [
            "files"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "files-service"
        }
      },
      "collections": {
        "file_records": {
          "id": "file_records",
          "description": "Collection of file records implementing the JS File interface",
          "defaultName": "file_records",
          "type": "collection",
          "tags": [
            "files"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "file",
              "type": "string",
              "required": false,
              "nullable": false
            },
            {
              "name": "location",
              "type": "string",
              "required": false,
              "nullable": false
            },
            {
              "name": "size",
              "type": "number",
              "required": true,
              "nullable": false
            }
          ],
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/file-records",
              "defaultState": "PUBLIC"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-05-14T14:07:38.602Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "application_file-bucket.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "files",
    "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/files-service/configuration"
    },
    "itemId": "files-service",
    "name": "Files Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/files-service",
    "resources": {
      "services": {
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/CHANGE_WITH_YOUR_CRUD_URL",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            },
            {
              "name": "PROJECT_HOSTNAME",
              "value": "CHANGE_WITH_YOUR_PROJECT_HOSTNAME",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.10.2",
      "releaseNote": "### Added:\\n\\n- ci: sbom generation"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.876Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "files-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "files",
    "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/files-service/configuration"
    },
    "itemId": "files-service",
    "name": "Files Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/files-service",
    "resources": {
      "services": {
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/CHANGE_WITH_YOUR_CRUD_URL",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            },
            {
              "name": "PROJECT_HOSTNAME",
              "value": "CHANGE_WITH_YOUR_PROJECT_HOSTNAME",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.10.1",
      "releaseNote": "Added:\\n\\n- verified MongoDB 7 support"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.872Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "files-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "files",
    "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/files-service/configuration"
    },
    "itemId": "files-service",
    "name": "Files Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/files-service",
    "resources": {
      "services": {
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/CHANGE_WITH_YOUR_CRUD_URL",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            },
            {
              "name": "PROJECT_HOSTNAME",
              "value": "CHANGE_WITH_YOUR_PROJECT_HOSTNAME",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.10.0",
      "releaseNote": "Added:\\n\\n- Add \`PATCH /:filename/metadata\`, to allow modification of files metadata"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.891Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "files-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "files",
    "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/files-service/configuration"
    },
    "itemId": "files-service",
    "name": "Files Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/files-service",
    "resources": {
      "services": {
        "files-service": {
          "type": "plugin",
          "name": "files-service",
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/CHANGE_WITH_YOUR_CRUD_URL",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CUSTOM_CONFIGURATION_PATH",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            },
            {
              "name": "PROJECT_HOSTNAME",
              "value": "CHANGE_WITH_YOUR_PROJECT_HOSTNAME",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "files-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "This plugin helps to manage a set of flow manager services",
    "itemId": "flow-manager-router",
    "name": "Flow Manager Router",
    "resources": {
      "services": {
        "flow-manager-router": {
          "type": "plugin",
          "name": "flow-manager-router",
          "description": "This plugin helps to manage a set of flow manager services",
          "dockerImage": "nexus.mia-platform.eu/plugins/flow-manager-router:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "NONE",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_MANAGER_URL",
              "description": "URL of the flow manager service that manages the main flow",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "MAIN_SAGA_CRUD_URL",
              "description": "URL of the crud service collection containing the main saga data",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "EXTERNAL_SERVICE_URL",
              "description": "URL of a service you want to notify (optional)",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CONFIGURATION_FILE_PATH",
              "description": "Path of the file containing sub flows configurations",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "description": "Maximum number of retries in http calls",
              "value": "5",
              "valueType": "plain"
            },
            {
              "name": "RETRIES_DELAY_MS",
              "description": "Delay in milliseconds between retry calls",
              "value": "1500",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "description": "Comunication protocol ",
              "value": "REST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIGURATION_FILE_PATH",
              "description": "Path of the file containing kafka configurations",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_ID_KEY",
              "description": "Key used on sub flow to store main flow sagaId",
              "value": "mainFlowId",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_DATA_KEY",
              "description": "Key used on sub flow to retrieve main flow metadata",
              "value": "mainFlowData",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_ID_KEY",
              "description": "Key used on main flow to store sub flow sagaId",
              "value": "subFlowId",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CREATED_EVENT",
              "description": "Event's label sent after sub flow creation",
              "value": "subFlowCreated",
              "valueType": "plain"
            },
            {
              "name": "ARRAY_MERGE_MODE",
              "description": "Array merge strategy",
              "value": "SHA",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "flow-manager-router",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "rules.json",
                  "content": "[{\\"id\\":\\"default\\",\\"info\\":{\\"flowManagerUrl\\":\\"change-me\\",\\"crudServiceUrl\\":\\"change-me\\"},\\"rules\\":{}}]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.022Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "flow-manager-router.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "This plugin helps to manage a set of flow manager services",
    "itemId": "flow-manager-router",
    "name": "Flow Manager Router",
    "resources": {
      "services": {
        "flow-manager-router": {
          "type": "plugin",
          "name": "flow-manager-router",
          "description": "This plugin helps to manage a set of flow manager services",
          "dockerImage": "nexus.mia-platform.eu/plugins/flow-manager-router:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "NONE",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_MANAGER_URL",
              "description": "URL of the flow manager service that manages the main flow",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "MAIN_SAGA_CRUD_URL",
              "description": "URL of the crud service collection containing the main saga data",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "EXTERNAL_SERVICE_URL",
              "description": "URL of a service you want to notify (optional)",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CONFIGURATION_FILE_PATH",
              "description": "Path of the file containing sub flows configurations",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "description": "Maximum number of retries in http calls",
              "value": "5",
              "valueType": "plain"
            },
            {
              "name": "RETRIES_DELAY_MS",
              "description": "Delay in milliseconds between retry calls",
              "value": "1500",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "description": "Comunication protocol ",
              "value": "REST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIGURATION_FILE_PATH",
              "description": "Path of the file containing kafka configurations",
              "value": "CHANGE-ME",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_ID_KEY",
              "description": "Key used on sub flow to store main flow sagaId",
              "value": "mainFlowId",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_DATA_KEY",
              "description": "Key used on sub flow to retrieve main flow metadata",
              "value": "mainFlowData",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_ID_KEY",
              "description": "Key used on main flow to store sub flow sagaId",
              "value": "subFlowId",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CREATED_EVENT",
              "description": "Event's label sent after sub flow creation",
              "value": "subFlowCreated",
              "valueType": "plain"
            },
            {
              "name": "ARRAY_MERGE_MODE",
              "description": "Array merge strategy",
              "value": "SHA",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "flow-manager-router",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "rules.json",
                  "content": "[{\\"id\\":\\"default\\",\\"info\\":{\\"flowManagerUrl\\":\\"change-me\\",\\"crudServiceUrl\\":\\"change-me\\"},\\"rules\\":{}}]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-02-27T09:26:23.169Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "flow-manager-router.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/flow-manager-service/overview"
    },
    "itemId": "flow-manager-service",
    "name": "Flow Manager Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/flow-manager/flow-manager",
    "resources": {
      "services": {
        "flow-manager-service": {
          "type": "plugin",
          "name": "flow-manager-service",
          "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:2.7.0",
          "links": [
            {
              "label": "Flow Manager Configurator",
              "targetSection": "flow-manager",
              "hidePrefix": true
            }
          ],
          "componentId": "flow-manager",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "/configuration/saga.json",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "CHANGE_WITH_YOUR_SAGA_ID_PREFIX",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "flow-configuration",
              "mountPath": "/configuration",
              "files": [
                {
                  "content": "{\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"protocol\\": \\"http\\",\\n      \\"host\\": \\"crud-service\\",\\n      \\"port\\": 80,\\n      \\"collectionName\\": \\"change-with-your-collection\\"\\n    }\\n  },\\n  \\"communicationProtocols\\": [],\\n  \\"machineDefinition\\": {\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"Default business state\\"\\n      }\\n    ],\\n    \\"initialState\\": \\"State 1\\",\\n    \\"creationEvent\\": \\"creation-event\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"State 1\\",\\n        \\"businessStateId\\": 0,\\n        \\"isFinal\\": true\\n      }\\n    ]\\n  }\\n}\\n",
                  "name": "saga.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.7.0",
      "releaseNote": "### Added\\n\\n- Added support for secrets interpolation in service config\\n\\n### Fixed\\n\\n- Errors raised by deep merge hook are now correctly logged\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-06-10T12:00:00.000Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "flow-manager-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/flow-manager-service/overview"
    },
    "itemId": "flow-manager-service",
    "name": "Flow Manager Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/flow-manager/flow-manager",
    "resources": {
      "services": {
        "flow-manager-service": {
          "type": "plugin",
          "name": "flow-manager-service",
          "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:2.6.5",
          "links": [
            {
              "label": "Flow Manager Configurator",
              "targetSection": "flow-manager",
              "hidePrefix": true
            }
          ],
          "componentId": "flow-manager",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "/configuration/saga.json",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "CHANGE_WITH_YOUR_SAGA_ID_PREFIX",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "flow-configuration",
              "mountPath": "/configuration",
              "files": [
                {
                  "content": "{\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"protocol\\": \\"http\\",\\n      \\"host\\": \\"crud-service\\",\\n      \\"port\\": 80,\\n      \\"collectionName\\": \\"change-with-your-collection\\"\\n    }\\n  },\\n  \\"communicationProtocols\\": [],\\n  \\"machineDefinition\\": {\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"Default business state\\"\\n      }\\n    ],\\n    \\"initialState\\": \\"State 1\\",\\n    \\"creationEvent\\": \\"creation-event\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"State 1\\",\\n        \\"businessStateId\\": 0,\\n        \\"isFinal\\": true\\n      }\\n    ]\\n  }\\n}\\n",
                  "name": "saga.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.6.5",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.665Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "flow-manager-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/flow-manager-service/overview"
    },
    "itemId": "flow-manager-service",
    "name": "Flow Manager Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/flow-manager/flow-manager",
    "resources": {
      "services": {
        "flow-manager-service": {
          "type": "plugin",
          "name": "flow-manager-service",
          "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:2.6.5",
          "links": [
            {
              "label": "Flow Manager Configurator",
              "targetSection": "flow-manager",
              "hidePrefix": true
            }
          ],
          "componentId": "flow-manager",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "/configuration/saga.json",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "CHANGE_WITH_YOUR_SAGA_ID_PREFIX",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "flow-configuration",
              "mountPath": "/configuration",
              "files": [
                {
                  "content": "{\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"protocol\\": \\"http\\",\\n      \\"host\\": \\"crud-service\\",\\n      \\"port\\": 80,\\n      \\"collectionName\\": \\"change-with-your-collection\\"\\n    }\\n  },\\n  \\"communicationProtocols\\": [],\\n  \\"machineDefinition\\": {\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"Default business state\\"\\n      }\\n    ],\\n    \\"initialState\\": \\"State 1\\",\\n    \\"creationEvent\\": \\"creation-event\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"State 1\\",\\n        \\"businessStateId\\": 0,\\n        \\"isFinal\\": true\\n      }\\n    ]\\n  }\\n}\\n",
                  "name": "saga.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-09-11T13:21:38.380Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "flow-manager-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "This is a backend for frontend to be used for building and managing forms.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/form-service-backend/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "form-service-backend",
    "name": "Form Service Backend",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/form-service-backend",
    "resources": {
      "services": {
        "form-service-backend": {
          "type": "plugin",
          "name": "form-service-backend",
          "description": "This is a backend for frontend to be used for building and managing forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-backend:2.1.1",
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.1",
      "releaseNote": "Update Node.js (v20) and custom-plugin-lib (v6), form metadata can be edited after form is expired"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.532Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "form-service-backend_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "This is a backend for frontend to be used for building and managing forms.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/form-service-backend/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "form-service-backend",
    "name": "Form Service Backend",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/form-service-backend",
    "resources": {
      "services": {
        "form-service-backend": {
          "type": "plugin",
          "name": "form-service-backend",
          "description": "This is a backend for frontend to be used for building and managing forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-backend:2.0.2",
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.021Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "form-service-backend_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "This is a backend for frontend to be used for building and managing forms.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/form-service-backend/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "form-service-backend",
    "name": "Form Service Backend",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/form-service-backend",
    "resources": {
      "services": {
        "form-service-backend": {
          "type": "plugin",
          "name": "form-service-backend",
          "description": "This is a backend for frontend to be used for building and managing forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-backend:2.0.2",
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-06-30T09:02:33.583Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "form-service-backend_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Build and manage custom forms.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/form-service-backend/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "form-service-frontend",
    "name": "Form Service Frontend",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/form-service-frontend",
    "resources": {
      "services": {
        "form-service-frontend": {
          "type": "plugin",
          "name": "form-service-frontend",
          "description": "Build and manage custom forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-frontend:2.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.1",
      "releaseNote": "Upgrade dependencies, add custom title to expired modal, form metadata can be edited after form is expired"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.532Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "form-service-frontend_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Build and manage custom forms.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/form-service-backend/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "form-service-frontend",
    "name": "Form Service Frontend",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/form-service-frontend",
    "resources": {
      "services": {
        "form-service-frontend": {
          "type": "plugin",
          "name": "form-service-frontend",
          "description": "Build and manage custom forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-frontend:2.0.5",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.5",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.023Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "form-service-frontend_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "frontendbuilder",
    "description": "Build and manage custom forms.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/form-service-backend/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "form-service-frontend",
    "name": "Form Service Frontend",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/form-service-frontend",
    "resources": {
      "services": {
        "form-service-frontend": {
          "type": "plugin",
          "name": "form-service-frontend",
          "description": "Build and manage custom forms.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/form-service-frontend:2.0.5",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-06-30T09:02:33.582Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "form-service-frontend_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "serverless",
    "description": "This service allows to map functions to endpoints to be executed without creating a fully-fledged dedicated microservice.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/function-service/configuration"
    },
    "itemId": "function-service",
    "name": "Function Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/function-service",
    "resources": {
      "services": {
        "function-service": {
          "type": "plugin",
          "name": "function-service",
          "description": "This service allows to map functions to endpoints to be executed without creating a fully-fledged dedicated microservice.",
          "dockerImage": "nexus.mia-platform.eu/core/function-service:2.3.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "FUNCTIONS_FOLDER",
              "value": "/home/node/app/functions",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.3.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.061Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "function-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "serverless",
    "description": "This service allows to map functions to endpoints to be executed without creating a fully-fledged dedicated microservice.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/function-service/configuration"
    },
    "itemId": "function-service",
    "name": "Function Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/function-service",
    "resources": {
      "services": {
        "function-service": {
          "type": "plugin",
          "name": "function-service",
          "description": "This service allows to map functions to endpoints to be executed without creating a fully-fledged dedicated microservice.",
          "dockerImage": "nexus.mia-platform.eu/core/function-service:2.3.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "FUNCTIONS_FOLDER",
              "value": "/home/node/app/functions",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-09-11T13:10:35.508Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "function-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addgeo",
    "description": "The Geofences Service Plugin handles geofences and related resources and actions.",
    "itemId": "geofences-service",
    "name": "Geofences Service",
    "resources": {
      "services": {
        "geofences-service": {
          "type": "plugin",
          "name": "geofences-service",
          "description": "The Geofences Service Plugin handles geofences and related resources and actions.",
          "dockerImage": "nexus.mia-platform.eu/plugins/geofences-service:1.0.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "URL",
              "value": "http://crud-service/CHANGE_WITH_YOUR_CRUD_NAME",
              "valueType": "plain"
            },
            {
              "name": "SECRET",
              "value": "CHANGE_WITH_YOUR_SECRET",
              "valueType": "plain"
            },
            {
              "name": "RADIUS",
              "value": "300",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.023Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "geofences-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addgeo",
    "description": "The Geofences Service Plugin handles geofences and related resources and actions.",
    "itemId": "geofences-service",
    "name": "Geofences Service",
    "resources": {
      "services": {
        "geofences-service": {
          "type": "plugin",
          "name": "geofences-service",
          "description": "The Geofences Service Plugin handles geofences and related resources and actions.",
          "dockerImage": "nexus.mia-platform.eu/plugins/geofences-service:1.0.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "URL",
              "value": "http://crud-service/CHANGE_WITH_YOUR_CRUD_NAME",
              "valueType": "plain"
            },
            {
              "name": "SECRET",
              "value": "CHANGE_WITH_YOUR_SECRET",
              "valueType": "plain"
            },
            {
              "name": "RADIUS",
              "value": "300",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "geofences-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "This is the best template to start creating a service in Go integrated with CRUD",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Go-Call-CRUD-Template/master/README.md"
    },
    "itemId": "go-call-crud-example",
    "name": "Go Call CRUD Example",
    "resources": {
      "services": {
        "go-call-crud-example": {
          "type": "example",
          "name": "go-call-crud-example",
          "description": "This is the best template to start creating a service in Go integrated with CRUD",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Go-Call-CRUD-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_BASE_URL",
              "value": "http://crud-service/",
              "valueType": "plain"
            },
            {
              "name": "CRUD_BASE_PATH",
              "value": "/orders-crud",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.091Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-call-crud-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "This is the best template to start creating a service in Go integrated with CRUD",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Go-Call-CRUD-Template/master/README.md"
    },
    "itemId": "go-call-crud-example",
    "name": "Go Call CRUD Example",
    "resources": {
      "services": {
        "go-call-crud-example": {
          "type": "example",
          "name": "go-call-crud-example",
          "description": "This is the best template to start creating a service in Go integrated with CRUD",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Go-Call-CRUD-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_BASE_URL",
              "value": "http://crud-service/",
              "valueType": "plain"
            },
            {
              "name": "CRUD_BASE_PATH",
              "value": "/orders-crud",
              "valueType": "plain"
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-05-16T16:55:40.746Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-call-crud-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "This is the best template to start creating a service in Go with an Echo web framework integrated inside the Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/go-echo-template/master/README.md"
    },
    "itemId": "go-echo-template",
    "name": "Go Echo Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/go-echo-template",
    "resources": {
      "services": {
        "go-echo-template": {
          "type": "template",
          "name": "go-echo-template",
          "description": "This is the best template to start creating a service in Go with an Echo web framework integrated inside the Platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/go-echo-template/archive/main.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.874Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-echo-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "This is the best template to start creating a service in Go with an Echo web framework integrated inside the Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/go-echo-template/master/README.md"
    },
    "itemId": "go-echo-template",
    "name": "Go Echo Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/go-echo-template",
    "resources": {
      "services": {
        "go-echo-template": {
          "type": "template",
          "name": "go-echo-template",
          "description": "This is the best template to start creating a service in Go with an Echo web framework integrated inside the Platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/go-echo-template/archive/main.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-07-07T16:19:55.298Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-echo-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "Example of a simple Go 1.20 application.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Go-Hello-World-Microservice-Example/refs/heads/1.20/README.md"
    },
    "itemId": "go-hello-world-example",
    "name": "Go 1.20 Hello World Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Go-Hello-World-Microservice-Example/tree/1.20",
    "resources": {
      "services": {
        "go-120-hello-world-example": {
          "type": "example",
          "name": "go-120-hello-world-example",
          "description": "Example of a simple Go 1.20 application.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Go-Hello-World-Microservice-Example/archive/refs/heads/1.20.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.039Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "Example of a simple Go 1.20 application.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Go-Hello-World-Microservice-Example/refs/heads/1.20/README.md"
    },
    "itemId": "go-hello-world-example",
    "name": "Go 1.20 Hello World Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Go-Hello-World-Microservice-Example/tree/1.20",
    "resources": {
      "services": {
        "go-120-hello-world-example": {
          "type": "example",
          "name": "go-120-hello-world-example",
          "description": "Example of a simple Go 1.20 application.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Go-Hello-World-Microservice-Example/archive/refs/heads/1.20.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-06-24T13:13:06.440Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "This is the best template to start creating a service in Go 1.22 integrated inside the Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Go-Template/refs/heads/1.22/README.md"
    },
    "itemId": "go-template",
    "name": "Go 1.22 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Go-Template/tree/1.22",
    "resources": {
      "services": {
        "go-122-template": {
          "type": "template",
          "name": "go-122-template",
          "description": "This is the best template to start creating a service in Go 1.22 integrated inside the Platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Go-Template/archive/refs/heads/1.22.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.007Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "golang",
    "description": "This is the best template to start creating a service in Go 1.22 integrated inside the Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Go-Template/refs/heads/1.22/README.md"
    },
    "itemId": "go-template",
    "name": "Go 1.22 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Go-Template/tree/1.22",
    "resources": {
      "services": {
        "go-122-template": {
          "type": "template",
          "name": "go-122-template",
          "description": "This is the best template to start creating a service in Go 1.22 integrated inside the Platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Go-Template/archive/refs/heads/1.22.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgo-app.gitlab-ci.yml/raw"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:42:08.854Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "go-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Proxy service to interact with Google FHIR APIs through a service account authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/proxy-google-fhir/overview"
    },
    "itemId": "google-proxy-fhir-service",
    "name": "Google Proxy FHIR Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/proxy-google-fhir",
    "resources": {
      "services": {
        "google-proxy-fhir-service": {
          "type": "plugin",
          "name": "google-proxy-fhir-service",
          "description": "Proxy service to interact with Google FHIR APIs through a service account authentication",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/proxy-google-fhir:0.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "{{GOOGLE_APPLICATION_CREDENTIALS}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_STORE_URL",
              "value": "{{FHIR_STORE_URL}}",
              "valueType": "plain"
            },
            {
              "name": "ACTIVE_RESOURCES",
              "value": "Patient",
              "valueType": "plain"
            },
            {
              "name": "FHIR_PLATFORM_URL",
              "value": "{{FHIR_PLATFORM_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.989Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "google-proxy-fhir-service-plugin.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Proxy service to interact with Google FHIR APIs through a service account authentication",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/proxy-google-fhir/overview"
    },
    "itemId": "google-proxy-fhir-service",
    "name": "Google Proxy FHIR Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/proxy-google-fhir",
    "resources": {
      "services": {
        "google-proxy-fhir-service": {
          "type": "plugin",
          "name": "google-proxy-fhir-service",
          "description": "Proxy service to interact with Google FHIR APIs through a service account authentication",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/proxy-google-fhir:0.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "{{GOOGLE_APPLICATION_CREDENTIALS}}",
              "valueType": "plain"
            },
            {
              "name": "FHIR_STORE_URL",
              "value": "{{FHIR_STORE_URL}}",
              "valueType": "plain"
            },
            {
              "name": "ACTIVE_RESOURCES",
              "value": "Patient",
              "valueType": "plain"
            },
            {
              "name": "FHIR_PLATFORM_URL",
              "value": "{{FHIR_PLATFORM_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-01T17:26:43.753Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "google-proxy-fhir-service-plugin.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "With this template you can easily create a GraphQL service",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/GraphQL-Custom-Plugin-Example/master/README.md"
    },
    "itemId": "graphql-custom-plugin-example",
    "name": "GraphQL-Custom-Plugin-Example",
    "resources": {
      "services": {
        "graphql-custom-plugin-example": {
          "type": "example",
          "name": "graphql-custom-plugin-example",
          "description": "With this template you can easily create a GraphQL service",
          "archiveUrl": "https://github.com/mia-platform-marketplace/GraphQL-Custom-Plugin-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgraphql-custom-plugin.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.089Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "graphql-custom-plugin-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "With this template you can easily create a GraphQL service",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/GraphQL-Custom-Plugin-Example/master/README.md"
    },
    "itemId": "graphql-custom-plugin-example",
    "name": "GraphQL-Custom-Plugin-Example",
    "resources": {
      "services": {
        "graphql-custom-plugin-example": {
          "type": "example",
          "name": "graphql-custom-plugin-example",
          "description": "With this template you can easily create a GraphQL service",
          "archiveUrl": "https://github.com/mia-platform-marketplace/GraphQL-Custom-Plugin-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgraphql-custom-plugin.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:51:21.318Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "graphql-custom-plugin-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Simple hello world application based on Helidon framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/helidon-hello-world-example/main/README.md"
    },
    "itemId": "helidon-hello-world",
    "name": "Helidon Hello World",
    "resources": {
      "services": {
        "helidon-hello-world": {
          "type": "example",
          "name": "helidon-hello-world",
          "description": "Simple hello world application based on Helidon framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Helidon-Hello-World-Example/archive/main.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SERVER_HOST",
              "value": "0.0.0.0",
              "valueType": "plain"
            },
            {
              "name": "APP_NAME",
              "value": "World",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "100Mi"
            }
          },
          "defaultLogParser": "mia-plain",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.088Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "helidon-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Simple hello world application based on Helidon framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/helidon-hello-world-example/main/README.md"
    },
    "itemId": "helidon-hello-world",
    "name": "Helidon Hello World",
    "resources": {
      "services": {
        "helidon-hello-world": {
          "type": "example",
          "name": "helidon-hello-world",
          "description": "Simple hello world application based on Helidon framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Helidon-Hello-World-Example/archive/main.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SERVER_HOST",
              "value": "0.0.0.0",
              "valueType": "plain"
            },
            {
              "name": "APP_NAME",
              "value": "World",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "100Mi"
            }
          },
          "defaultLogParser": "mia-plain",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-08-31T15:00:42.788Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "helidon-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.5.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.5.0",
      "releaseNote": "### Fixed\\n\\n - exposed management routes under \`SERVICE_PREFIX\`\\n\\n### Added\\n\\n - added \`DISALLOWED_RESPONSE_CONTENT_TYPE_LIST\` env to prevent specified \`Content-Type\` headers in the response of the target service.\\n- added \`ALLOWED_PROXY_TARGET_URLS\` env to specify which target URLs are allowed as targetBaseUrl for a proxy."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-28T11:36:11.794Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.4.4",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.4",
      "releaseNote": "### Updated\\n\\n - \`GET /-/proxies\` management API supports filtering for multiple \`basePath\`. This can be either a string or a comma-separated list of strings"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.928Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.4.3",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.3",
      "releaseNote": "### Fixed\\n\\n - fixed optimized mode that was ignored on \`\\"authentication\\": \\"none\\"\`.\\n\\n - ensuring not following redirect on optimized mode."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.927Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.4.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.2",
      "releaseNote": "### Fixed\\n\\n - patch api failure if proxy authentication is set to invalid value.\\n\\n - return \`tokenIssuerUrl\` and \`tokenIssuerValidationUrl\` from GET management API"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.959Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.4.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.1",
      "releaseNote": "### Updated\\n\\n - better patch request payload validation."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-11T12:00:59.270Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.4.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.0",
      "releaseNote": "### Added\\n\\n - added \`HEADERS_TO_REMAP\` env to remap specified headers into other specified header key.\\n- added \`HEADER_BLOCK_LIST\` env to prevent specified headers from being forwarded to the target URL.\\n- ci: sbom generation."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.878Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.3.3",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.3",
      "releaseNote": "### Fixed\\n\\n - internal context management for crud dependency"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-02T11:23:45.727Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.3.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.2",
      "releaseNote": "### Fixed\\n\\n - fixed API responses preventing empty strings to be returned if fields are missing."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-27T14:35:10.700Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.3.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.1",
      "releaseNote": "### Fixed\\n\\n - \`DISABLE_PROXY_CACHE\`: correctly prevents cache to be written when disabled."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-27T14:35:10.700Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.0",
      "releaseNote": "### Added\\n- \`BASE_PATH_MATCHERS\`: to make it possible to fetch complex base paths when using dynamic configuration rather than taking the first segment only.\\n- \`DISABLE_PROXY_CACHE\`: to make it possible to disable the in-memory proxy cache when using dynamic configuration."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-27T11:05:39.571Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_MANAGEMENT_APIS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.2.0",
      "releaseNote": "### Added\\n* Optionally expose management API with the \`EXPOSE_MANAGEMENT_APIS\` environment variable\\n\\n### Fixed\\n* sanitize target base url trailing slash to prevent \`//\` token in final path"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-19T17:04:05.877Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.1.0",
      "releaseNote": "### Added\\n* Environment variable \`ADDITIONAL_HEADERS_TO_REDACT\`: comma separated value of headers name to redact in logs\\n### Security\\n* fix: redacted sensitive headers in log\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.871Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.022Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/http-proxy-manager/overview"
    },
    "itemId": "http-proxy-manager",
    "name": "HTTP Proxy Manager",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/proxy-manager",
    "resources": {
      "services": {
        "http-proxy-manager": {
          "type": "plugin",
          "name": "http-proxy-manager",
          "description": "A simple yet blazing fast proxy service that can be used to centralize request proxying.",
          "dockerImage": "nexus.mia-platform.eu/core/proxy-manager:3.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "description": "Path to the configuration directory (use a ConfigMap to mount a file in this position)",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "config",
              "description": "File name, without extension, where the configuration is located (use a ConfigMap file with the same name and .json extension)",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "80Mi",
              "min": "20Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "http-proxy-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"proxies\\": [\\n  ]\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-04-13T07:05:36.770Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "http-proxy-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "idm",
    "description": "The application allows you to quickly set up multiple identification processes",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/identification-manager/overview"
    },
    "itemId": "identification-manager",
    "name": "Identification Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/applications/identification-manager",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "crud-service": {
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.1.1",
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "/",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "70Mi"
            }
          },
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin",
          "componentId": "crud-service"
        },
        "flow-manager-main": {
          "defaultConfigMaps": [
            {
              "name": "flow-configuration-main",
              "mountPath": "/sagaConfiguration",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "rest.json",
                  "content": "{   \\"machineDefinition\\": {     \\"initialState\\": \\"PROCESS_CREATED\\",     \\"creationEvent\\": \\"processCreated\\",     \\"states\\": [       {         \\"id\\": \\"PROCESS_CREATED\\",         \\"description\\": \\"The new process was created\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"subFlowCreated\\",             \\"targetState\\": \\"IDENTIFICATION_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"IDENTIFICATION_PENDING\\",         \\"description\\": \\"The identification process is not completed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"updateData\\",             \\"targetState\\": \\"IDENTIFICATION_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"identificationCompleted\\",             \\"targetState\\": \\"CREDENTIAL_GENERATION\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"identificationError\\",             \\"targetState\\": \\"IDENTIFICATION_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"CREDENTIAL_GENERATION\\",         \\"description\\": \\"Create a credential document at the end of the process\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outputCommand\\": {           \\"channel\\": \\"generateCredential\\",           \\"label\\": \\"generateCredential\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"verifiableCredentialGenerated\\",             \\"targetState\\": \\"PROCESS_COMPLETED\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           },           {             \\"inputEvent\\": \\"verifiableCredentialGenerationFailed\\",             \\"targetState\\": \\"CREDENTIAL_GENERATION_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"CREDENTIAL_GENERATION_FAILED\\",         \\"description\\": \\"The credential generations step failed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"generateCredential\\",             \\"targetState\\": \\"CREDENTIAL_GENERATION\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"PROCESS_COMPLETED\\",         \\"description\\": \\"The process is closed\\",         \\"isFinal\\": true,         \\"businessStateId\\": 3,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       },       {         \\"id\\": \\"PROCESS_EXPIRED\\",         \\"description\\": \\"The process expire\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1000,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       },       {         \\"id\\": \\"IDENTIFICATION_FAILED\\",         \\"description\\": \\"An error occurs during identification process\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1000,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       }     ],     \\"businessStates\\": [       {         \\"id\\": 0,         \\"description\\": \\"PROCESS_CREATED\\"       },       {         \\"id\\": 1,         \\"description\\": \\"IDENTIFICATION_PENDING\\"       },       {         \\"id\\": 2,         \\"description\\": \\"IDENTIFICATION_COMPLETED\\"       },       {         \\"id\\": 3,         \\"description\\": \\"PROCESS_COMPLETED\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"PROCESS_FAILED\\"       }     ],     \\"businessEvents\\": [       {         \\"id\\": 0,         \\"description\\": \\"processCreated\\"       },       {         \\"id\\": 1,         \\"description\\": \\"startIdentification\\"       },       {         \\"id\\": 2,         \\"description\\": \\"identificationCompleted\\"       },       {         \\"id\\": 3,         \\"description\\": \\"processCompleted\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"identificationFailed\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"processExpired\\"       }     ]   },   \\"communicationProtocols\\": [     {       \\"id\\": \\"notify\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"external-service\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/notify\\"       }     },     {       \\"id\\": \\"generateCredential\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"vc-service\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/generate\\"       }     }   ],   \\"persistencyManagement\\": {     \\"type\\": \\"crud\\",     \\"configurations\\": {       \\"collectionName\\": \\"main-process\\"     }   } }"
                },
                {
                  "name": "kafka.json",
                  "content": "{   \\"machineDefinition\\": {     \\"initialState\\": \\"PROCESS_CREATED\\",     \\"creationEvent\\": \\"processCreated\\",     \\"states\\": [       {         \\"id\\": \\"PROCESS_CREATED\\",         \\"description\\": \\"The new process was created\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"subFlowCreated\\",             \\"targetState\\": \\"IDENTIFICATION_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"IDENTIFICATION_PENDING\\",         \\"description\\": \\"The identification process is not completed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"updateData\\",             \\"targetState\\": \\"IDENTIFICATION_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"identificationCompleted\\",             \\"targetState\\": \\"CREDENTIAL_GENERATION\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"identificationError\\",             \\"targetState\\": \\"IDENTIFICATION_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"CREDENTIAL_GENERATION\\",         \\"description\\": \\"Create a credential document at the end of the process\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outputCommand\\": {           \\"channel\\": \\"generateCredential\\",           \\"label\\": \\"generateCredential\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"verifiableCredentialGenerated\\",             \\"targetState\\": \\"PROCESS_COMPLETED\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           },           {             \\"inputEvent\\": \\"verifiableCredentialGenerationFailed\\",             \\"targetState\\": \\"CREDENTIAL_GENERATION_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"CREDENTIAL_GENERATION_FAILED\\",         \\"description\\": \\"The credential generations step failed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"generateCredential\\",             \\"targetState\\": \\"CREDENTIAL_GENERATION\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"PROCESS_COMPLETED\\",         \\"description\\": \\"The process is closed\\",         \\"isFinal\\": true,         \\"businessStateId\\": 3,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       },       {         \\"id\\": \\"PROCESS_EXPIRED\\",         \\"description\\": \\"The process expire\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1000,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       },       {         \\"id\\": \\"IDENTIFICATION_FAILED\\",         \\"description\\": \\"An error occurs during identification process\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1000,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       }     ],     \\"businessStates\\": [       {         \\"id\\": 0,         \\"description\\": \\"PROCESS_CREATED\\"       },       {         \\"id\\": 1,         \\"description\\": \\"IDENTIFICATION_PENDING\\"       },       {         \\"id\\": 2,         \\"description\\": \\"IDENTIFICATION_COMPLETED\\"       },       {         \\"id\\": 3,         \\"description\\": \\"PROCESS_COMPLETED\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"PROCESS_FAILED\\"       }     ],     \\"businessEvents\\": [       {         \\"id\\": 0,         \\"description\\": \\"processCreated\\"       },       {         \\"id\\": 1,         \\"description\\": \\"startIdentification\\"       },       {         \\"id\\": 2,         \\"description\\": \\"identificationCompleted\\"       },       {         \\"id\\": 3,         \\"description\\": \\"processCompleted\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"identificationFailed\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"processExpired\\"       }     ]   },   \\"communicationProtocols\\": [     {       \\"id\\": \\"notify\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"external-service\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/notify\\"       }     },     {       \\"id\\": \\"generateCredential\\",       \\"type\\": \\"kafka\\",       \\"configurations\\": {         \\"brokers\\": [\\"CHANGE ME\\"],         \\"inputTopics\\": [\\"main-flow\\"],         \\"outputTopics\\": [\\"verifiable-credentials\\"],         \\"consumerGroup\\": \\"main-flow-manager\\",         \\"authenticationProperties\\": {           \\"ssl\\": true,           \\"sasl\\": {             \\"mechanism\\": \\"PLAIN\\",             \\"username\\": \\"CHANGE ME\\",             \\"password\\": \\"CHANGE ME\\"           }         }       }     }   ],   \\"persistencyManagement\\": {     \\"type\\": \\"crud\\",     \\"configurations\\": {       \\"collectionName\\": \\"main-process\\"     }   } }"
                }
              ]
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "{{FLOW_MANAGER_CONFIG_PATH}}",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "main",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "tags": [
            "main"
          ],
          "description": "The Main Flow Manager of the Identification Manager Application",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:{{FLOW_MANAGER_VERSION}}",
          "name": "flow-manager-main",
          "type": "plugin",
          "componentId": "flow-manager",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "flow-manager-subflow": {
          "defaultConfigMaps": [
            {
              "name": "flow-configuration-sub-flow",
              "mountPath": "/sagaConfiguration",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "rest.json",
                  "content": "{   \\"machineDefinition\\": {     \\"initialState\\": \\"IDENTIFICATION_READY\\",     \\"creationEvent\\": \\"identificationReady\\",     \\"states\\": [       {         \\"id\\": \\"IDENTIFICATION_READY\\",         \\"description\\": \\"identification process ready and created on CRUD\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"requestEvent\\",             \\"targetState\\": \\"ACTION_REQUESTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"ACTION_REQUESTED\\",         \\"description\\": \\"request to service for identification\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"identification\\",           \\"label\\": \\"identification\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"waitingWebhookEvent\\",             \\"targetState\\": \\"IDENTIFICATION_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"nextEvent\\",             \\"targetState\\": \\"IDENTIFICATION_READY\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"identificationError\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 1001           },           {             \\"inputEvent\\": \\"identificationCompleted\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 3           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"IDENTIFICATION_PENDING\\",         \\"description\\": \\"waiting for the callback of the service\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"identificationCompleted\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 3           },           {             \\"inputEvent\\": \\"nextEvent\\",             \\"targetState\\": \\"IDENTIFICATION_READY\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"identificationError\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 1001           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"IDENTIFICATION_COMPLETED\\",         \\"description\\": \\"the identification process ended\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       },       {         \\"id\\": \\"PROCESS_EXPIRED\\",         \\"description\\": \\"the identification process expired\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1001,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       }     ],     \\"businessStates\\": [       {         \\"id\\": 0,         \\"description\\": \\"CUSTOM_BUSINESS_STATE\\"       },       {         \\"id\\": 1,         \\"description\\": \\"IDENTIFICATION_CLOSED\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"IDENTIFICATION_FAILED\\"       }     ],     \\"businessEvents\\": [       {         \\"id\\": 0,         \\"description\\": \\"subProcessCreated\\"       },       {         \\"id\\": 1,         \\"description\\": \\"recognitionServiceEvent\\"       },       {         \\"id\\": 2,         \\"description\\": \\"nextEvent\\"       },       {         \\"id\\": 3,         \\"description\\": \\"identificationCompleted\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"identificationError\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"identificationExpired\\"       }     ]   },   \\"communicationProtocols\\": [     {       \\"id\\": \\"notify\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"route\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/notify\\"       }     },     {       \\"id\\": \\"identification\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"external-service\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/identification\\"       }     }   ],   \\"persistencyManagement\\": {     \\"type\\": \\"crud\\",     \\"configurations\\": {       \\"collectionName\\": \\"subflow-process\\"     }   } }"
                },
                {
                  "name": "kafka.json",
                  "content": "{   \\"machineDefinition\\": {     \\"initialState\\": \\"IDENTIFICATION_READY\\",     \\"creationEvent\\": \\"identificationReady\\",     \\"states\\": [       {         \\"id\\": \\"IDENTIFICATION_READY\\",         \\"description\\": \\"identification process ready and created on CRUD\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"requestEvent\\",             \\"targetState\\": \\"ACTION_REQUESTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"ACTION_REQUESTED\\",         \\"description\\": \\"request to service for identification\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"identification\\",           \\"label\\": \\"identification\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"waitingWebhookEvent\\",             \\"targetState\\": \\"IDENTIFICATION_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"nextEvent\\",             \\"targetState\\": \\"IDENTIFICATION_READY\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"identificationError\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 1001           },           {             \\"inputEvent\\": \\"identificationCompleted\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 3           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"IDENTIFICATION_PENDING\\",         \\"description\\": \\"waiting for the callback of the service\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"identificationCompleted\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 3           },           {             \\"inputEvent\\": \\"nextEvent\\",             \\"targetState\\": \\"IDENTIFICATION_READY\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"identificationError\\",             \\"targetState\\": \\"IDENTIFICATION_COMPLETED\\",             \\"businessEventId\\": 1001           },           {             \\"inputEvent\\": \\"expireProcess\\",             \\"targetState\\": \\"PROCESS_EXPIRED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"IDENTIFICATION_COMPLETED\\",         \\"description\\": \\"the identification process ended\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       },       {         \\"id\\": \\"PROCESS_EXPIRED\\",         \\"description\\": \\"the identification process expired\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1001,         \\"outputCommand\\": {           \\"channel\\": \\"notify\\",           \\"label\\": \\"notify\\"         },         \\"outgoingTransitions\\": []       }     ],     \\"businessStates\\": [       {         \\"id\\": 0,         \\"description\\": \\"CUSTOM_BUSINESS_STATE\\"       },       {         \\"id\\": 1,         \\"description\\": \\"IDENTIFICATION_CLOSED\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"IDENTIFICATION_FAILED\\"       }     ],     \\"businessEvents\\": [       {         \\"id\\": 0,         \\"description\\": \\"subProcessCreated\\"       },       {         \\"id\\": 1,         \\"description\\": \\"recognitionServiceEvent\\"       },       {         \\"id\\": 2,         \\"description\\": \\"nextEvent\\"       },       {         \\"id\\": 3,         \\"description\\": \\"identificationCompleted\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"identificationError\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"identificationExpired\\"       }     ]   },   \\"communicationProtocols\\": [     {       \\"id\\": \\"notify\\",       \\"type\\": \\"kafka\\",       \\"configurations\\": {         \\"brokers\\": [\\"CHANGE ME\\"],         \\"inputTopics\\": [\\"sub-flow\\"],         \\"outputTopics\\": [\\"router-notification\\"],         \\"consumerGroup\\": \\"sub-flow-manager\\",         \\"authenticationProperties\\": {           \\"ssl\\": true,           \\"sasl\\": {             \\"mechanism\\": \\"PLAIN\\",             \\"username\\": \\"CHANGE ME\\",             \\"password\\": \\"CHANGE ME\\"           }         }       }     },     {       \\"id\\": \\"identification\\",       \\"type\\": \\"kafka\\",       \\"configurations\\": {         \\"brokers\\": [\\"CHANGE ME\\"],         \\"outputTopics\\": [\\"identification\\"],         \\"authenticationProperties\\": {           \\"ssl\\": true,           \\"sasl\\": {             \\"mechanism\\": \\"PLAIN\\",             \\"username\\": \\"CHANGE ME\\",             \\"password\\": \\"CHANGE ME\\"           }         }       }     }   ],   \\"persistencyManagement\\": {     \\"type\\": \\"crud\\",     \\"configurations\\": {       \\"collectionName\\": \\"subflow-process\\"     }   } }"
                }
              ]
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "{{FLOW_MANAGER_CONFIG_PATH}}",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "subflow",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "description": "The Flow Manager Sub Flow",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:{{FLOW_MANAGER_VERSION}}",
          "name": "flow-manager-subflow",
          "type": "plugin",
          "componentId": "flow-manager",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "idm-router-service": {
          "defaultConfigMaps": [
            {
              "name": "idm-router-config",
              "mountPath": "/config",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "rules.json",
                  "content": "[\\n   {\\n     \\"id\\": \\"default\\",\\n     \\"info\\": {\\n       \\"flowManagerUrl\\": \\"http://flow-manager-subflow/\\", \\n      \\"crudServiceUrl\\": \\"http://crud-service/subflow-process/\\" \\n    },\\n     \\"rules\\": {}\\n   }\\n]\\n"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "NONE",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_MANAGER_URL",
              "value": "http://flow-manager-main/",
              "valueType": "plain"
            },
            {
              "name": "MAIN_SAGA_CRUD_URL",
              "value": "http://crud-service/main-process/",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CONFIGURATION_FILE_PATH",
              "value": "/config/rules.json",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "value": "{{COMMUNICATION_MODE}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIGURATION_FILE_PATH",
              "value": "/path/to/file",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "value": "5",
              "valueType": "plain"
            },
            {
              "name": "RETRIES_DELAY_MS",
              "value": "1500",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_ID_KEY",
              "value": "mainFlowId",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_DATA_KEY",
              "value": "mainFlowData",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_ID_KEY",
              "value": "subFlowId",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CREATED_EVENT",
              "value": "{{CHANGE_ME}}",
              "valueType": "plain"
            },
            {
              "name": "ARRAY_MERGE_MODE",
              "value": "{{CHANGE_ME}}",
              "valueType": "plain"
            },
            {
              "name": "EXTERNAL_SERVICE_URL",
              "value": "http://external-service/",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "250m",
              "min": "25m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "200Mi"
            }
          },
          "description": "This service provides communication among flow managers of your IDM project",
          "dockerImage": "nexus.mia-platform.eu/plugins/flow-manager-router:{{ROUTER_VERSION}}",
          "name": "idm-router-service",
          "type": "plugin",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        },
        "identification-service": {
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ROUTER_URL",
              "value": "http://idm-router-service",
              "valueType": "plain"
            },
            {
              "name": "IDENTIFICATION_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "MAX_RETRIES",
              "value": "3",
              "valueType": "plain"
            },
            {
              "name": "RETRIES_DELAY_MS",
              "value": "1000",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "value": "{{COMMUNICATION_MODE}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIG_FILE_PATH",
              "value": "/path/to/file",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/62973/repository/archive.tar.gz",
          "description": "This is the best template to start creating an adapter service for your IDM project",
          "name": "identification-service",
          "type": "template",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        },
        "verifiable-credential-service": {
          "defaultConfigMaps": [
            {
              "name": "vc-config",
              "mountPath": "/config",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "vcMapping.json",
                  "content": "{\\n   \\"default\\": \\"/vc/default.json\\"\\n }"
                }
              ]
            },
            {
              "name": "vc",
              "mountPath": "/vc",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "default.json",
                  "content": "{\\n   \\"@context\\": [\\n     \\"https://www.w3.org/2018/credentials/v1\\"\\n   ],\\n   \\"type\\": [\\n     \\"VerifiableCredential\\"\\n   ],\\n   \\"issuer\\": \\"change-me\\"\\n }\\n"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "userid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "groups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "clienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "console-sid,cms-sid",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-main",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_JWK",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_JWA",
              "value": "RS256",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_CONFIG",
              "value": "/config/vcMapping.json",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "value": "{{COMMUNICATION_MODE}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIG_FILE_PATH",
              "value": "/path/to/file",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/64569/repository/archive.tar.gz",
          "description": "This is the best template to start creating a verifiable credentials service generator for your IDM project",
          "name": "verifiable-credential-service",
          "type": "template",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      },
      "endpoints": {
        "/identification/callback": {
          "defaultBasePath": "/identification/callback",
          "defaultPathRewrite": "/callback",
          "service": "identification-service",
          "description": "Endpoint /identification/callback",
          "type": "custom",
          "tags": [
            "identification-service"
          ],
          "public": true,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      },
      "collections": {
        "main_process": {
          "id": "main_process",
          "description": "This collection contains main process data and the identification data collected from different identification processes",
          "defaultName": "main_process",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "sagaId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "metadata",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "isFinal",
              "description": "",
              "type": "boolean",
              "required": true,
              "nullable": false
            },
            {
              "name": "currentState",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "latestEvent",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "associatedEntityId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "events",
              "description": "",
              "type": "Array_string",
              "required": false,
              "nullable": false
            },
            {
              "name": "history",
              "description": "",
              "type": "RawObject",
              "required": false,
              "nullable": false
            },
            {
              "name": "businessStateId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "businessStateDescription",
              "description": "",
              "type": "string",
              "required": false,
              "nullable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/main-process",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "subflow_process": {
          "id": "subflow_process",
          "description": "This collection contains identification process data",
          "defaultName": "subflow_process",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "sagaId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "metadata",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "isFinal",
              "description": "",
              "type": "boolean",
              "required": true,
              "nullable": false
            },
            {
              "name": "currentState",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "latestEvent",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "associatedEntityId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "events",
              "description": "",
              "type": "Array_string",
              "required": false,
              "nullable": false
            },
            {
              "name": "history",
              "description": "",
              "type": "RawObject",
              "required": false,
              "nullable": false
            },
            {
              "name": "businessStateId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "businessStateDescription",
              "description": "",
              "type": "string",
              "required": false,
              "nullable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/subflow-process",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "tenants": {
          "id": "tenants",
          "description": "Tenants data used by identification microservices",
          "defaultName": "tenants",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "tenant-id",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/tenants",
              "defaultState": "PUBLIC"
            }
          ]
        }
      },
      "unsecretedVariables": {
        "ROUTER_VERSION": {
          "productionEnv": "1.0.0",
          "noProductionEnv": "latest"
        },
        "FLOW_MANAGER_VERSION": {
          "productionEnv": "2.6.4",
          "noProductionEnv": "2.6.4"
        },
        "COMMUNICATION_MODE": {
          "productionEnv": "KAFKA",
          "noProductionEnv": "REST"
        },
        "FLOW_MANAGER_CONFIG_PATH": {
          "productionEnv": "/sagaConfiguration/kafka.json",
          "noProductionEnv": "/sagaConfiguration/rest.json"
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-21T15:00:45.631Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "identification-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This service expose a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/configuration/ingestion_reloader_configuration"
    },
    "itemId": "ingestion-reloader",
    "name": "Ingestion Reloader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/historical-data/ingestion-reloader",
    "resources": {
      "services": {
        "ingestion-reloader": {
          "type": "plugin",
          "name": "ingestion-reloader",
          "description": "This service expose a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-reloader:1.4.2",
          "componentId": "plugin_ingestion-reloader",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{JVM_LOG_LEVEL}}",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "List of comma-separated Kafka brokers addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-reloader",
              "valueType": "plain",
              "description": "Identifier employed by Kafka to recognize your application"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-reloader",
              "valueType": "plain",
              "description": "Kafka consumer group name assigned to the this service to read from configured topic - important for distributing topic partitions"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "Username needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "Password needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "BUCKET_NAME",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Name of your bucket where the Ingestion Reloader will write messages"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Type of bucket the Ingestion Reloader will connect with"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain",
              "description": "In case the selected bucket type is 'google', this variable points to the filepath where the Google Storage Service Account credentials are stored - usually mounted in the service from a secret. Remove in case BUCKET_TYPE is not set to 'google'"
            },
            {
              "name": "KEY_PARTITIONS_RELATIVE_PATH",
              "value": "bss-partition-by-key",
              "valueType": "plain",
              "description": "The prefix name to the files where messages organized by key can be found - no trailing slash needed"
            },
            {
              "name": "BUCKET_SPLITS",
              "value": "5000",
              "valueType": "plain",
              "description": "Number of possible groups onto which the Kafka messages' key are partitioned following an organization by key procedure"
            },
            {
              "name": "CONFIGURATIONS_PATH",
              "value": "/app/config",
              "valueType": "plain",
              "description": "Path where the selectors folder can be found"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "350Mi",
              "max": "500Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.4.2",
      "releaseNote": "### Build\\n\\n- added procedure to sign service image and generate its SBOM\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.928Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ingestion-reloader_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This service expose a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/configuration/ingestion_reloader_configuration"
    },
    "itemId": "ingestion-reloader",
    "name": "Ingestion Reloader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/historical-data/ingestion-reloader",
    "resources": {
      "services": {
        "ingestion-reloader": {
          "type": "plugin",
          "name": "ingestion-reloader",
          "description": "This service expose a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-reloader:1.4.1",
          "componentId": "plugin_ingestion-reloader",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{JVM_LOG_LEVEL}}",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "List of comma-separated Kafka brokers addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-reloader",
              "valueType": "plain",
              "description": "Identifier employed by Kafka to recognize your application"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-reloader",
              "valueType": "plain",
              "description": "Kafka consumer group name assigned to the this service to read from configured topic - important for distributing topic partitions"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "Username needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "Password needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "BUCKET_NAME",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Name of your bucket where the Ingestion Reloader will write messages"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Type of bucket the Ingestion Reloader will connect with"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain",
              "description": "In case the selected bucket type is 'google', this variable points to the filepath where the Google Storage Service Account credentials are stored - usually mounted in the service from a secret. Remove in case BUCKET_TYPE is not set to 'google'"
            },
            {
              "name": "KEY_PARTITIONS_RELATIVE_PATH",
              "value": "bss-partition-by-key",
              "valueType": "plain",
              "description": "The prefix name to the files where messages organized by key can be found - no trailing slash needed"
            },
            {
              "name": "BUCKET_SPLITS",
              "value": "5000",
              "valueType": "plain",
              "description": "Number of possible groups onto which the Kafka messages' key are partitioned following an organization by key procedure"
            },
            {
              "name": "CONFIGURATIONS_PATH",
              "value": "/app/config",
              "valueType": "plain",
              "description": "Path where the selectors folder can be found"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "350Mi",
              "max": "500Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.4.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.023Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ingestion-reloader_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This service expose a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/configuration/ingestion_reloader_configuration"
    },
    "itemId": "ingestion-reloader",
    "name": "Ingestion Reloader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/historical-data/ingestion-reloader",
    "resources": {
      "services": {
        "ingestion-reloader": {
          "type": "plugin",
          "name": "ingestion-reloader",
          "description": "This service expose a REST interface that allows reading messages from a Cloud Storage bucket, structured in the manner written by the Ingestion Storer, and publishing them onto target topics, specified at request-time",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-reloader:1.4.1",
          "componentId": "plugin_ingestion-reloader",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{JVM_LOG_LEVEL}}",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "List of comma-separated Kafka brokers addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-reloader",
              "valueType": "plain",
              "description": "Identifier employed by Kafka to recognize your application"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-reloader",
              "valueType": "plain",
              "description": "Kafka consumer group name assigned to the this service to read from configured topic - important for distributing topic partitions"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "Username needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "Password needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "BUCKET_NAME",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Name of your bucket where the Ingestion Reloader will write messages"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Type of bucket the Ingestion Reloader will connect with"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain",
              "description": "In case the selected bucket type is 'google', this variable points to the filepath where the Google Storage Service Account credentials are stored - usually mounted in the service from a secret. Remove in case BUCKET_TYPE is not set to 'google'"
            },
            {
              "name": "KEY_PARTITIONS_RELATIVE_PATH",
              "value": "bss-partition-by-key",
              "valueType": "plain",
              "description": "The prefix name to the files where messages organized by key can be found - no trailing slash needed"
            },
            {
              "name": "BUCKET_SPLITS",
              "value": "5000",
              "valueType": "plain",
              "description": "Number of possible groups onto which the Kafka messages' key are partitioned following an organization by key procedure"
            },
            {
              "name": "CONFIGURATIONS_PATH",
              "value": "/app/config",
              "valueType": "plain",
              "description": "Path where the selectors folder can be found"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "350Mi",
              "max": "500Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-07T17:30:55.965Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ingestion-reloader_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This service consume messages from Kafka Topics and store them into a Cloud Storage bucket",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/configuration/ingestion_storer_configuration"
    },
    "itemId": "ingestion-storer",
    "name": "Ingestion Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/historical-data/ingestion-storer",
    "resources": {
      "services": {
        "ingestion-storer": {
          "type": "plugin",
          "name": "ingestion-storer",
          "description": "This service consume messages from Kafka Topics and store them into a Cloud Storage bucket",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-storer:1.5.3",
          "componentId": "ingestion-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{JVM_LOG_LEVEL}}",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "List of comma-separated Kafka brokers addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-storer",
              "valueType": "plain",
              "description": "Identifier employed by Kafka to recognize your application"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-storer",
              "valueType": "plain",
              "description": "Kafka consumer group name assigned to the this service to read from configured topic - important for distributing topic partitions"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "Username needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "Password needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_MAX_POLL_MS",
              "value": "500",
              "valueType": "plain",
              "description": "Number of milliseconds the consumer waits before returning the batch messages in case the maximum batch size is not reached"
            },
            {
              "name": "KAFKA_MAX_POLL_RECORDS",
              "value": "1500",
              "valueType": "plain",
              "description": "Maximum number of messages that a single poll operation returns"
            },
            {
              "name": "BUCKET_NAME",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Name of your bucket where the Ingestion Storer will write messages"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Type of bucket the Ingestion Storer will connect with"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain",
              "description": "In case the selected bucket type is 'google', this variable points to the filepath where the Google Storage Service Account credentials are stored - usually mounted in the service from a secret. Remove in case BUCKET_TYPE is not set to 'google'"
            },
            {
              "name": "BSS_EVENTS_TOPIC",
              "value": "{{BATCH_STORED_EVENTS_TOPIC}}",
              "valueType": "plain",
              "description": "Kafka topic where Ingestion Store will publish the events batch written onto the bucket"
            },
            {
              "name": "BSS_ENABLE_POST_INGESTION",
              "value": "false",
              "valueType": "plain",
              "description": "Define whether consumed messages should be forwarded as is onto a further configured topic - useful to release the Ingestion Storer in a sequential manner with respect to the data flow"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "40Mi",
              "max": "160Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "bss-ingestion-storer-config",
              "mountPath": "/app/config",
              "files": [
                {
                  "name": "application.yaml",
                  "content": "bss:\\n  topics-config:\\n    data-topics-mapping:\\n      - ingestion: bss.{{ENVIRONMENT_TO_DEPLOY}}.<example-topic>.ingestion\\n        post-ingestion:\\n          - bss.{{ENVIRONMENT_TO_DEPLOY}}.<example-topic>.post-ingestion\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.3",
      "releaseNote": "### Build\\n\\n- added procedure to sign service image and generate its SBOM\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.930Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ingestion-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This service consume messages from Kafka Topics and store them into a Cloud Storage bucket",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/configuration/ingestion_storer_configuration"
    },
    "itemId": "ingestion-storer",
    "name": "Ingestion Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/historical-data/ingestion-storer",
    "resources": {
      "services": {
        "ingestion-storer": {
          "type": "plugin",
          "name": "ingestion-storer",
          "description": "This service consume messages from Kafka Topics and store them into a Cloud Storage bucket",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-storer:1.5.2",
          "componentId": "ingestion-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{JVM_LOG_LEVEL}}",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "List of comma-separated Kafka brokers addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-storer",
              "valueType": "plain",
              "description": "Identifier employed by Kafka to recognize your application"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-storer",
              "valueType": "plain",
              "description": "Kafka consumer group name assigned to the this service to read from configured topic - important for distributing topic partitions"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "Username needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "Password needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_MAX_POLL_MS",
              "value": "500",
              "valueType": "plain",
              "description": "Number of milliseconds the consumer waits before returning the batch messages in case the maximum batch size is not reached"
            },
            {
              "name": "KAFKA_MAX_POLL_RECORDS",
              "value": "1500",
              "valueType": "plain",
              "description": "Maximum number of messages that a single poll operation returns"
            },
            {
              "name": "BUCKET_NAME",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Name of your bucket where the Ingestion Storer will write messages"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Type of bucket the Ingestion Storer will connect with"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain",
              "description": "In case the selected bucket type is 'google', this variable points to the filepath where the Google Storage Service Account credentials are stored - usually mounted in the service from a secret. Remove in case BUCKET_TYPE is not set to 'google'"
            },
            {
              "name": "BSS_EVENTS_TOPIC",
              "value": "{{BATCH_STORED_EVENTS_TOPIC}}",
              "valueType": "plain",
              "description": "Kafka topic where Ingestion Store will publish the events batch written onto the bucket"
            },
            {
              "name": "BSS_ENABLE_POST_INGESTION",
              "value": "false",
              "valueType": "plain",
              "description": "Define whether consumed messages should be forwarded as is onto a further configured topic - useful to release the Ingestion Storer in a sequential manner with respect to the data flow"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "40Mi",
              "max": "160Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "bss-ingestion-storer-config",
              "mountPath": "/app/config",
              "files": [
                {
                  "name": "application.yaml",
                  "content": "bss:\\n  topics-config:\\n    data-topics-mapping:\\n      - ingestion: bss.{{ENVIRONMENT_TO_DEPLOY}}.<example-topic>.ingestion\\n        post-ingestion:\\n          - bss.{{ENVIRONMENT_TO_DEPLOY}}.<example-topic>.post-ingestion\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.024Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ingestion-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This service consume messages from Kafka Topics and store them into a Cloud Storage bucket",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/bucket_storage_support/configuration/ingestion_storer_configuration"
    },
    "itemId": "ingestion-storer",
    "name": "Ingestion Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/historical-data/ingestion-storer",
    "resources": {
      "services": {
        "ingestion-storer": {
          "type": "plugin",
          "name": "ingestion-storer",
          "description": "This service consume messages from Kafka Topics and store them into a Cloud Storage bucket",
          "dockerImage": "nexus.mia-platform.eu/fast-data/history/ingestion-storer:1.5.2",
          "componentId": "ingestion-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{JVM_LOG_LEVEL}}",
              "valueType": "plain",
              "description": "JVM Level to use for logging - e.g. INFO"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "List of comma-separated Kafka brokers addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-storer",
              "valueType": "plain",
              "description": "Identifier employed by Kafka to recognize your application"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "<change-with-your-project>.{{STAGE_TO_DEPLOY}}.bss.ingestion-storer",
              "valueType": "plain",
              "description": "Kafka consumer group name assigned to the this service to read from configured topic - important for distributing topic partitions"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "Username needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "Password needed to authenticate with SASL auth mechanism"
            },
            {
              "name": "KAFKA_MAX_POLL_MS",
              "value": "500",
              "valueType": "plain",
              "description": "Number of milliseconds the consumer waits before returning the batch messages in case the maximum batch size is not reached"
            },
            {
              "name": "KAFKA_MAX_POLL_RECORDS",
              "value": "1500",
              "valueType": "plain",
              "description": "Maximum number of messages that a single poll operation returns"
            },
            {
              "name": "BUCKET_NAME",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Name of your bucket where the Ingestion Storer will write messages"
            },
            {
              "name": "BUCKET_TYPE",
              "value": "<change-me>",
              "valueType": "plain",
              "description": "Type of bucket the Ingestion Storer will connect with"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "/app/keys/credentials.json",
              "valueType": "plain",
              "description": "In case the selected bucket type is 'google', this variable points to the filepath where the Google Storage Service Account credentials are stored - usually mounted in the service from a secret. Remove in case BUCKET_TYPE is not set to 'google'"
            },
            {
              "name": "BSS_EVENTS_TOPIC",
              "value": "{{BATCH_STORED_EVENTS_TOPIC}}",
              "valueType": "plain",
              "description": "Kafka topic where Ingestion Store will publish the events batch written onto the bucket"
            },
            {
              "name": "BSS_ENABLE_POST_INGESTION",
              "value": "false",
              "valueType": "plain",
              "description": "Define whether consumed messages should be forwarded as is onto a further configured topic - useful to release the Ingestion Storer in a sequential manner with respect to the data flow"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "40Mi",
              "max": "160Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/health/live",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 2
            },
            "readiness": {
              "path": "/-/health/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "bss-ingestion-storer-config",
              "mountPath": "/app/config",
              "files": [
                {
                  "name": "application.yaml",
                  "content": "bss:\\n  topics-config:\\n    data-topics-mapping:\\n      - ingestion: bss.{{ENVIRONMENT_TO_DEPLOY}}.<example-topic>.ingestion\\n        post-ingestion:\\n          - bss.{{ENVIRONMENT_TO_DEPLOY}}.<example-topic>.post-ingestion\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-07T17:30:55.965Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ingestion-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "insurance",
    "description": "This application has already configured data models for the insurance industry. The data models are for the Subject, Policy, Vehicle, FNOL, and Claim entities.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/csv-connector/configuration"
    },
    "itemId": "insurance-crud-data-model",
    "name": "Insurance CRUD Data Model",
    "publishOnMiaDocumentation": false,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/insurance-crud-data-model-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "crud-service": {
          "type": "plugin",
          "name": "crud-service",
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.2.2",
          "componentId": "crud-service",
          "mapEnvVarToMountPath": {
            "collections": {
              "type": "folder",
              "envName": "COLLECTION_DEFINITION_FOLDER"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "70Mi"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "crud-service-collections",
              "mountPath": "/home/node/app/collections",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "collections"
              }
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/vehicle": {
          "defaultBasePath": "/vehicle",
          "defaultPathRewrite": "/vehicle",
          "description": "Endpoint /vehicle",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "collectionId": "Vehicle"
        },
        "/subject": {
          "defaultBasePath": "/subject",
          "defaultPathRewrite": "/subject",
          "description": "Endpoint /subject",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "collectionId": "Subject"
        },
        "/policy": {
          "defaultBasePath": "/policy",
          "defaultPathRewrite": "/policy",
          "description": "Endpoint /policy",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "public": true,
          "showInDocumentation": true,
          "secreted": false,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "collectionId": "Policy"
        },
        "/fnol": {
          "defaultBasePath": "/fnol",
          "pathName": "/",
          "defaultPathRewrite": "/fnol",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "description": "Endpoint /fnol",
          "collectionId": "FNOL",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        },
        "/claim": {
          "defaultBasePath": "/claim",
          "pathName": "/",
          "defaultPathRewrite": "/claim",
          "type": "crud",
          "tags": [
            "crud"
          ],
          "description": "Endpoint /claim",
          "collectionId": "Claim",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "acl": "true",
          "backofficeAcl": {
            "inherited": true
          },
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false
        }
      },
      "collections": {
        "FNOL": {
          "id": "FNOL",
          "description": "Collection of FNOL",
          "defaultName": "FNOL",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "fnolCode",
              "description": "Codice della Richiesta Fnol",
              "type": "string",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "companyCode",
              "description": "Codice della compagnia",
              "type": "string",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "claimType",
              "description": "Codice tipo Sinistro Richiesta Fnol",
              "type": "string",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyNumber",
              "description": "Codice polizza colpita.",
              "type": "string",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "complaintDate",
              "description": "Data Denuncia",
              "type": "string",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fnolOpeningRequestDate",
              "description": "Data apertura della Richiesta Fnol",
              "type": "string",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "event",
              "type": "RawObject",
              "required": true,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "date": {
                    "title": "Data Evento",
                    "type": "string"
                  },
                  "zipCode": {
                    "title": "CAP",
                    "type": "string"
                  },
                  "city": {
                    "title": "Comune",
                    "type": "string"
                  },
                  "province": {
                    "title": "Provincia",
                    "type": "string"
                  },
                  "country": {
                    "title": "Nazione",
                    "type": "string"
                  },
                  "address": {
                    "title": "Indirizzo",
                    "type": "string"
                  }
                },
                "required": [
                  "date"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "fnolType",
              "description": "Tipo richiesta Fnol",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fnolSourceChannelCode",
              "description": "Codice canale di provenienza Richiesta Fnol",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fnolSourceChannelId",
              "description": "Identificativo canale di provenienza Richiesta Fnol",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "insuredSubject",
              "description": "Soggetto Assicurato",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "name": {
                    "title": "Nome Assicurato",
                    "type": "string"
                  },
                  "surname": {
                    "title": "Cognome Assicurato",
                    "type": "string"
                  },
                  "fiscalCode": {
                    "title": "Codice Fiscale Assicurato",
                    "type": "string"
                  },
                  "residenceAddress": {
                    "title": "Residenza del soggetto assicurato",
                    "type": "object",
                    "properties": {
                      "city": {
                        "title": "Comune",
                        "type": "string"
                      },
                      "province": {
                        "title": "Provincia",
                        "type": "string"
                      },
                      "country": {
                        "title": "Nazione",
                        "type": "string"
                      },
                      "address": {
                        "title": "Indirizzo",
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "intervenedAuthority",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "name": {
                    "title": "Nome Autorità intervenuta",
                    "type": "string"
                  },
                  "description": {
                    "title": "Descrizione libera autorità intervenuta",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "vehicle",
              "description": "Veicolo Azienda condotto",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "licensePlate": {
                    "title": "Targa Veicolo Azienda",
                    "type": "string"
                  },
                  "vehicleDynamics": {
                    "title": "Dinamica Veicolo Azienda",
                    "type": "string"
                  },
                  "driver": {
                    "title": "Conducente veicolo quando diverso da assicurato",
                    "type": "object",
                    "properties": {
                      "questionaryQuestion": {
                        "title": "Riferimento al questionario",
                        "type": "string"
                      },
                      "name": {
                        "title": "Nome soggetto",
                        "type": "string"
                      },
                      "surname": {
                        "title": "Cognome soggetto",
                        "type": "string"
                      },
                      "fiscalCode": {
                        "title": "Codice Fiscale soggetto",
                        "type": "string"
                      },
                      "residenceAddress": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "title": "Comune",
                            "type": "string"
                          },
                          "province": {
                            "title": "Provincia",
                            "type": "string"
                          },
                          "country": {
                            "title": "Nazione",
                            "type": "string"
                          },
                          "address": {
                            "title": "Indirizzo",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "insuredWitness",
              "description": "Testimone dell assicurato",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "questionaryQuestion": {
                    "title": "Riferimento al questionario",
                    "type": "string"
                  },
                  "name": {
                    "title": "Nome soggetto",
                    "type": "string"
                  },
                  "surname": {
                    "title": "Cognome soggetto",
                    "type": "string"
                  },
                  "fiscalCode": {
                    "title": "Codice Fiscale soggetto",
                    "type": "string"
                  },
                  "city": {
                    "title": "Comune",
                    "type": "string"
                  },
                  "province": {
                    "title": "Provincia",
                    "type": "string"
                  },
                  "country": {
                    "title": "Nazione",
                    "type": "string"
                  },
                  "address": {
                    "title": "Indirizzo",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "injuredSubjects",
              "description": "Soggetti trasportati dal Veicolo Azienda con lesioni",
              "type": "Array_RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "questionaryQuestion": {
                    "title": "Riferimento al questionario",
                    "type": "string"
                  },
                  "name": {
                    "title": "Nome soggetto",
                    "type": "string"
                  },
                  "surname": {
                    "title": "Cognome soggetto",
                    "type": "string"
                  },
                  "fiscalCode": {
                    "title": "Codice Fiscale soggetto",
                    "type": "string"
                  },
                  "city": {
                    "title": "Comune",
                    "type": "string"
                  },
                  "province": {
                    "title": "Provincia",
                    "type": "string"
                  },
                  "country": {
                    "title": "Nazione",
                    "type": "string"
                  },
                  "address": {
                    "title": "Indirizzo",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "injuredPedestrian",
              "description": "Pedone con ferite causate da Veicolo Azienda ",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "questionaryQuestion": {
                    "title": "Riferimento al questionario",
                    "type": "string"
                  },
                  "name": {
                    "title": "Nome soggetto",
                    "type": "string"
                  },
                  "surname": {
                    "title": "Cognome soggetto",
                    "type": "string"
                  },
                  "fiscalCode": {
                    "title": "Codice Fiscale soggetto",
                    "type": "string"
                  },
                  "city": {
                    "title": "Comune",
                    "type": "string"
                  },
                  "province": {
                    "title": "Provincia",
                    "type": "string"
                  },
                  "country": {
                    "title": "Nazione",
                    "type": "string"
                  },
                  "address": {
                    "title": "Indirizzo",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "damagedOtherThirdPartiesAssets",
              "description": "Danni a cose (diverse da veicoli e persone) di proprietà di terzi ?",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "questionaryQuestion": {
                    "title": "Riferimento al questionario",
                    "type": "string"
                  },
                  "damageDescription": {
                    "title": "Descrizione del danno procurato",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "injuredSubjectsOnCounterpartsVehicles",
              "description": "Lesioni a trasportati veicoli di controparte ?",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "injuredPedestrianByCounterpartVehicle",
              "description": "Lesioni a pedoni da veicolo di controparte ?",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "counterpartWitnessesAvailable",
              "description": "Presenza testimoni di controparte ?",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "damageType",
              "description": "Tipo Danno",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "factsDescription",
              "description": "Descrizione dettagliata dei fatti",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "insuredSubjectNotes",
              "description": "Note assicurato",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "vehiclesCollision",
              "description": "Dati di collisione veicoli",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "existsCollision": {
                    "title": "Esiste collisione?",
                    "type": "string"
                  },
                  "involvedOtherVehicles": {
                    "title": "Oltre al veicolo assicurato sono coinvolti altri veicoli?",
                    "type": "string"
                  },
                  "existsFriendlyAccidentStatement": {
                    "title": "Esiste modulo blu firmato da entrambi le parti?",
                    "type": "string"
                  },
                  "firstCounterpartVehicle": {
                    "title": "1mo veicolo di controparte",
                    "type": "object",
                    "properties": {
                      "licensePlate": {
                        "title": "Targa",
                        "type": "string"
                      },
                      "vehicleDynamics": {
                        "title": "Dinamica veicolo controparte",
                        "type": "string"
                      },
                      "insuranceCompany": {
                        "title": "Compagnia di controparte",
                        "type": "string"
                      },
                      "driver": {
                        "type": "object",
                        "properties": {
                          "questionaryQuestion": {
                            "title": "Riferimento al questionario",
                            "type": "string"
                          },
                          "name": {
                            "title": "Nome soggetto",
                            "type": "string"
                          },
                          "surname": {
                            "title": "Cognome soggetto",
                            "type": "string"
                          },
                          "fiscalCode": {
                            "title": "Codice Fiscale soggetto",
                            "type": "string"
                          },
                          "residenceAddress": {
                            "type": "object",
                            "properties": {
                              "city": {
                                "title": "Comune",
                                "type": "string"
                              },
                              "province": {
                                "title": "Provincia",
                                "type": "string"
                              },
                              "country": {
                                "title": "Nazione",
                                "type": "string"
                              },
                              "address": {
                                "title": "Indirizzo",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "otherCounterpartsVehicles": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "questionaryQuestion": {
                          "title": "Riferimento al questionario",
                          "type": "string"
                        },
                        "licensePlate": {
                          "title": "Targa",
                          "type": "string"
                        },
                        "driver": {
                          "type": "object",
                          "properties": {
                            "questionaryQuestion": {
                              "title": "Riferimento al questionario",
                              "type": "string"
                            },
                            "name": {
                              "title": "Nome soggetto",
                              "type": "string"
                            },
                            "surname": {
                              "title": "Cognome soggetto",
                              "type": "string"
                            },
                            "fiscalCode": {
                              "title": "Codice Fiscale soggetto",
                              "type": "string"
                            },
                            "residenceAddress": {
                              "type": "object",
                              "properties": {
                                "city": {
                                  "title": "Comune",
                                  "type": "string"
                                },
                                "province": {
                                  "title": "Provincia",
                                  "type": "string"
                                },
                                "country": {
                                  "title": "Nazione",
                                  "type": "string"
                                },
                                "address": {
                                  "title": "Indirizzo",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/fnol",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ]
        },
        "Claim": {
          "id": "Claim",
          "description": "Collection of Claim",
          "defaultName": "Claim",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "dateOfEvent",
              "type": "Date",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "openingDate",
              "type": "Date",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "closingDate",
              "type": "Date",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "reopeningDate",
              "type": "Date",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "rejectionDate",
              "type": "Date",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "aniaProcessingMovementDate",
              "type": "Date",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "openedBy",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "category",
              "type": "string",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "portfolioOrigin",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "type",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "head",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "responsabilityDivision",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "responsibilityDivisionAccordingToOurDeclaration",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "replyDeadlineDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "address",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "zipCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "province",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "country",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "city",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "cai",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "responsibilityPercentage",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "ourDeclaration",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "companyVehicle": {
                    "type": "string"
                  },
                  "counterpartVehicle": {
                    "type": "string"
                  },
                  "aniaClassification": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "counterpartDeclaration",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "companyVehicle": {
                    "type": "string"
                  },
                  "counterpartVehicle": {
                    "type": "string"
                  },
                  "aniaClassification": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "witnesses",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "authority",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "state",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "raw": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "policy",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "number": {
                    "type": "string"
                  },
                  "realtimeNumber": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "company",
              "type": "RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "companyInCharge",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "complaint",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "documentDate": {
                    "type": "string"
                  },
                  "receiptDate": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "outcomeSICRequest",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "responseCode": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "supervisor",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "warranties",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "processCode": {
                    "type": "string"
                  },
                  "userPinsCode": {
                    "type": "string"
                  },
                  "userUmodCode": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "maximumCoverage": {
                    "type": "number"
                  },
                  "liabilityType": {
                    "type": "string"
                  },
                  "liabilityAmount": {
                    "type": "object",
                    "properties": {
                      "deductible": {
                        "type": "number"
                      },
                      "variablePercentage": {
                        "type": "number"
                      },
                      "variableMinimum": {
                        "type": "number"
                      },
                      "variableMaximum": {
                        "type": "number"
                      }
                    }
                  },
                  "riskCode": {
                    "type": "string"
                  },
                  "riskLocation": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "positions",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "isInsuredSubject": {
                    "type": "string"
                  },
                  "causal": {
                    "type": "string"
                  },
                  "rejectionDate": {
                    "type": "string"
                  },
                  "injuredSubject": {
                    "type": "object",
                    "properties": {
                      "fiscalCode": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      }
                    }
                  },
                  "openingType": {
                    "type": "string"
                  },
                  "lawyer": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "fiscalCode": {
                        "type": "string"
                      }
                    }
                  },
                  "statusCode": {
                    "type": "string"
                  },
                  "positionTypeCode": {
                    "type": "string"
                  },
                  "assignments": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "assignmentType": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "fiscalCode": {
                        "type": "string"
                      },
                      "expertiseStatus": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "province": {
                        "type": "string"
                      },
                      "zipCode": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      },
                      "returnDate": {
                        "type": "string"
                      },
                      "telephone": {
                        "type": "string"
                      },
                      "vatNumber": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  },
                  "adjuster": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "fiscalCode": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "zipCode": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "province": {
                        "type": "string"
                      },
                      "telephone": {
                        "type": "string"
                      },
                      "verbalRecovery": {
                        "type": "string"
                      },
                      "settlementDate": {
                        "type": "string"
                      }
                    }
                  },
                  "cardcounterpart": {
                    "type": "object",
                    "properties": {
                      "licensePlate": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "fiscalCode": {
                        "type": "string"
                      }
                    }
                  },
                  "inspectorate": {
                    "type": "object",
                    "properties": {
                      "companyCode": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "telephone": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  },
                  "injuredPerson": {
                    "type": "object",
                    "properties": {
                      "injuries": {
                        "type": "string"
                      },
                      "emergencyRoom": {
                        "type": "string"
                      },
                      "firstAidLocation": {
                        "type": "string"
                      }
                    }
                  },
                  "lawsuits": {
                    "type": "object",
                    "properties": {
                      "validity": {
                        "type": "object",
                        "properties": {
                          "startDate": {
                            "type": "string"
                          },
                          "endDate": {
                            "type": "string"
                          }
                        }
                      },
                      "firstHearingDate": {
                        "type": "string"
                      },
                      "court": {
                        "type": "string"
                      },
                      "judgmentNumber": {
                        "type": "string"
                      }
                    }
                  },
                  "objects": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          }
                        }
                      },
                      "vehicle": {
                        "type": "object",
                        "properties": {
                          "licensePlate": {
                            "type": "string"
                          },
                          "plateChassis": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          }
                        }
                      },
                      "damageRequestReceiptDate": {
                        "type": "string"
                      }
                    }
                  },
                  "operations": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "effectiveDate": {
                        "type": "string"
                      },
                      "paymentDate": {
                        "type": "string"
                      },
                      "paymentType": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      },
                      "amount": {
                        "type": "string"
                      },
                      "recipient": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "surname": {
                            "type": "string"
                          },
                          "fiscalCode": {
                            "type": "string"
                          },
                          "vatCode": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "contractors",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "type": {
                    "type": "object"
                  }
                }
              }
            },
            {
              "name": "fnols",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "adjuster",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "surname": {
                    "type": "string"
                  },
                  "fiscalCode": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "zipCode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "province": {
                    "type": "string"
                  },
                  "telephone": {
                    "type": "string"
                  },
                  "verbalRecovery": {
                    "type": "string"
                  },
                  "settlementDate": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "inspectorate",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "companyCode": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "telephone": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "deductible",
              "type": "number",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/claim",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ]
        },
        "Vehicle": {
          "id": "Vehicle",
          "description": "Collection of Vehicle",
          "defaultName": "Vehicle",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "type",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "productCardBandCode",
              "type": "Array_string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "plateChassis",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "firstRegistrationDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "brand",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "brandCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "model",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "modelCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "version",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "licensePlate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "vehicleType",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "sector": {
                    "type": "string"
                  },
                  "sectorId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "class": {
                    "type": "string"
                  },
                  "usage": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "watercraftName",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "owner",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "fiscalCode": {
                    "type": "string"
                  },
                  "vatCode": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "attachment",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "type": "string"
                  },
                  "expirationDate": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "risks",
              "type": "RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "netto": {
                    "type": "string"
                  },
                  "ssn": {
                    "type": "string"
                  },
                  "acc": {
                    "type": "string"
                  },
                  "taxes": {
                    "type": "string"
                  },
                  "intfrazacc": {
                    "type": "string"
                  },
                  "intfraznetto": {
                    "type": "string"
                  },
                  "units": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "fatUnits": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "factorCode": {
                            "type": "string"
                          },
                          "factorDescription": {
                            "type": "string"
                          },
                          "factorType": {
                            "type": "string"
                          },
                          "visible": {
                            "type": "string"
                          },
                          "extDescription": {
                            "type": "string"
                          },
                          "tras1Code": {
                            "type": "string"
                          },
                          "visibleInConsult": {
                            "type": "string"
                          },
                          "factorValueDescription": {
                            "type": "string"
                          },
                          "stringValue": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "warranty": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "ministerialBranch": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "furtherCoverageSubject": {
                        "type": "string"
                      },
                      "wellValue": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "premium": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "productCode": {
                        "type": "string"
                      },
                      "maximums": {
                        "type": "string"
                      },
                      "coverageSubject": {
                        "type": "string"
                      },
                      "riskInsured": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      },
                      "riskValues": {
                        "type": "object",
                        "properties": {
                          "coverageSubject": {
                            "type": "string"
                          },
                          "maximumCoverage": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "lifeInsured",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/vehicle",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ]
        },
        "Subject": {
          "id": "Subject",
          "description": "Collection of Subject",
          "defaultName": "Subject",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "dataVersion",
              "type": "RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "major": {
                    "type": "number"
                  },
                  "minor": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "subject",
              "type": "RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "fiscalCode": {
                    "type": "string"
                  },
                  "vatCode": {
                    "type": "string"
                  },
                  "idSubject": {
                    "type": "string"
                  },
                  "isLegalEntity": {
                    "type": "string"
                  },
                  "typeSubject": {
                    "type": "object",
                    "properties": {
                      "raw": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  "ana": {
                    "type": "object",
                    "properties": {
                      "gender": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "birthDay": {
                        "type": "string"
                      },
                      "birthPlace": {
                        "type": "string"
                      },
                      "birthProvince": {
                        "type": "string"
                      }
                    }
                  },
                  "contacts": {
                    "type": "object",
                    "properties": {
                      "portfolioOrigin": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "emails": {
                        "type": "string"
                      },
                      "numbers": {
                        "type": "string"
                      },
                      "visibility": {
                        "type": "object",
                        "properties": {
                          "companyCode": {
                            "type": "string"
                          },
                          "pointOfSaleCode": {
                            "type": "string"
                          },
                          "subPointOfSaleCode": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "insurances",
              "type": "Array_RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "company": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "type": "string"
                  },
                  "portfolioOrigin": {
                    "type": "string"
                  },
                  "number": {
                    "type": "string"
                  },
                  "technicalBranchCode": {
                    "type": "string"
                  },
                  "currentExpirationDate": {
                    "type": "string"
                  },
                  "originalExpirationDate": {
                    "type": "string"
                  },
                  "proposalNumber": {
                    "type": "string"
                  },
                  "currentEffectDate": {
                    "type": "string"
                  },
                  "originalEffectDate": {
                    "type": "string"
                  },
                  "migrated": {
                    "type": "string"
                  },
                  "masterNumber": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "object",
                    "properties": {
                      "idRole": {
                        "type": "string"
                      },
                      "idLock": {
                        "type": "string"
                      },
                      "idLegalForm": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      },
                      "idUserData": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "businessName": {
                        "type": "string"
                      },
                      "visible": {
                        "type": "string"
                      },
                      "typeRole": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "residence": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "zipCode": {
                            "type": "string"
                          },
                          "addressType": {
                            "type": "string"
                          },
                          "houseNumber": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "atCorrespondence": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "fraction": {
                            "type": "string"
                          }
                        }
                      },
                      "correspondence": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "zipCode": {
                            "type": "string"
                          },
                          "addressType": {
                            "type": "string"
                          },
                          "houseNumber": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "atCorrespondence": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "fraction": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/subject",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ]
        },
        "Policy": {
          "id": "Policy",
          "description": "Collection of Policy",
          "defaultName": "Policy",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "dataVersion",
              "type": "RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "major": {
                    "type": "number"
                  },
                  "minor": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "number",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "channel",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "specificChannel",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "raw": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "paymentTypeCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyStatusCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "installmentDivisionStatusCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "installmentDivisionTypeCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "saleDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyTags",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "insuranceTag",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "masterNumber",
              "type": "string",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "childNumber",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "company",
              "type": "RawObject",
              "required": true,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "portfolioOrigin",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "effectiveDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "expirationDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "suspendable",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "proposalNumber",
              "type": "string",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "lobCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "constraint",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "silentRenewal",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "nextDeadline",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fraction",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "agreement",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "product",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "businessLine": {
                    "type": "object",
                    "properties": {
                      "raw": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  "type": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "pointOfSale",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "subPointOfSale",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "address",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "zipCode": {
                    "type": "string"
                  },
                  "addressType": {
                    "type": "string"
                  },
                  "houseNumber": {
                    "type": "string"
                  },
                  "province": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "atCorrespondence": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "fraction": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "operations",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "operationDate": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "type": "string"
                  },
                  "effectiveDateProgressive": {
                    "type": "string"
                  },
                  "operationType": {
                    "type": "string"
                  },
                  "statusCode": {
                    "type": "object",
                    "properties": {
                      "raw": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  "causal": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  },
                  "titles": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "completionDate": {
                        "type": "string"
                      },
                      "operationAmount": {
                        "type": "string"
                      },
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "cashable": {
                        "type": "string"
                      },
                      "receipts": {
                        "type": "object",
                        "properties": {
                          "paymentTypeCode": {
                            "type": "string"
                          }
                        }
                      },
                      "paymentType": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "subtypeLoad": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "emissionDate": {
                        "type": "string"
                      },
                      "effectiveDate": {
                        "type": "string"
                      },
                      "expirationDate": {
                        "type": "string"
                      },
                      "coInsuredType": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "claimStatus": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "canceled": {
                    "type": "string"
                  },
                  "expirationDate": {
                    "type": "string"
                  },
                  "installmentDivisionStatusCode": {
                    "type": "string"
                  },
                  "installmentDivisionStatusDescription": {
                    "type": "string"
                  },
                  "reducedDataVariationReceipt": {
                    "type": "string"
                  },
                  "progressive": {
                    "type": "string"
                  },
                  "installment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "roles",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "roleOrigin": {
                    "type": "string"
                  },
                  "type": {
                    "type": "object",
                    "properties": {
                      "raw": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  "version": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "fiscalCode": {
                        "type": "string"
                      },
                      "vatCode": {
                        "type": "string"
                      },
                      "gender": {
                        "type": "object",
                        "properties": {
                          "raw": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "visible": {
                        "type": "string"
                      },
                      "isLegalEntity": {
                        "type": "string"
                      },
                      "registryType": {
                        "type": "string"
                      },
                      "birthday": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "businessName": {
                        "type": "string"
                      },
                      "residence": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "zipCode": {
                            "type": "string"
                          },
                          "addressType": {
                            "type": "string"
                          },
                          "houseNumber": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "atCorrespondence": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "fraction": {
                            "type": "string"
                          }
                        }
                      },
                      "correspondence": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "zipCode": {
                            "type": "string"
                          },
                          "addressType": {
                            "type": "string"
                          },
                          "houseNumber": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "atCorrespondence": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "fraction": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "values",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "valueStr": {
                        "type": "string"
                      },
                      "factors": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "maximumCoverage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "valuesFactors",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "riskFactors",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "sales",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "saleDate": {
                    "type": "string"
                  },
                  "fundCode": {
                    "type": "string"
                  },
                  "navValue": {
                    "type": "string"
                  },
                  "fundTechnicalName": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "string"
                  },
                  "paymentShare": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "originalEffectiveDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "originalExpirationDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "numberDaysArrear",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "migrated",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "netAmount",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "grossAmount",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "technicalSource",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "netGrantedYieldRate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "grossGrantedYieldRate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "totalInvestedPremiums",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "theoreticalReleaseValue",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "theoreticalReleaseDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "deathCaseInsuredAmount",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "lifeCaseInsuredAmount",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyStartHour",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyExpireHour",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyType",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "finalBalancePaymentDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fundValue",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "balanceTypeCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "balanceTypeDescription",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "complementaryWarrantyinsuredAmount",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "retrocessionRate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "retrocessionPercentage",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fundCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fundDescription",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "annuity",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "insuredAmount",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "insuredCapital",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "NAVValue",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "shareBalance",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyTypeDescription",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "lobDescription",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "policyStatus",
              "type": "RawObject",
              "required": false,
              "nullable": true,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "premiumType",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "installmentDivisionType",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "warrantyEffectiveDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "warrantyEffectiveHour",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "warrantyExpirationDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "warrantyExpirationHour",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "deathCaseBeneficiaries",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "lifeCaseBeneficiaries",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "recipients",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "heading": {
                    "type": "string"
                  },
                  "warrantyDescription": {
                    "type": "string"
                  },
                  "warrantyIdentifier": {
                    "type": "object",
                    "properties": {
                      "warrantyType": {
                        "type": "string"
                      },
                      "warrantyNumber": {
                        "type": "string"
                      }
                    }
                  },
                  "designationType": {
                    "type": "string"
                  },
                  "recipientType": {
                    "type": "object",
                    "properties": {
                      "raw": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  "benefitPercentage": {
                    "type": "string"
                  },
                  "connectionWithContractor": {
                    "type": "string"
                  },
                  "legalStatus": {
                    "type": "string"
                  },
                  "fiscalCode": {
                    "type": "string"
                  },
                  "vatCode": {
                    "type": "string"
                  },
                  "surname": {
                    "type": "string"
                  },
                  "businessName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "birthDay": {
                    "type": "string"
                  },
                  "birthplace": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "province": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "zipCode": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "mobileNumber": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "notifyRecipientOnExpiration": {
                    "type": "string"
                  },
                  "isStructured": {
                    "type": "string"
                  },
                  "rawData": {
                    "type": "string"
                  },
                  "secondLevelRecipient": {
                    "type": "object",
                    "properties": {
                      "heading": {
                        "type": "string"
                      },
                      "warrantyDescription": {
                        "type": "string"
                      },
                      "designationType": {
                        "type": "string"
                      },
                      "recipientType": {
                        "type": "string"
                      },
                      "benefitPercentage": {
                        "type": "string"
                      },
                      "connectionWithContractor": {
                        "type": "string"
                      },
                      "legalStatus": {
                        "type": "string"
                      },
                      "fiscalCode": {
                        "type": "string"
                      },
                      "vatCode": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "birthDay": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "province": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "zipCode": {
                        "type": "string"
                      },
                      "phoneNumber": {
                        "type": "string"
                      },
                      "mobileNumber": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "systemCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fileCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "storicRoles",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "items": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "bank",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "abi": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "branch",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "cab": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "emissionTitle",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "operationId": {
                    "type": "string"
                  },
                  "groupTitlesId": {
                    "type": "string"
                  },
                  "effectiveHour": {
                    "type": "string"
                  },
                  "title": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "effectiveDate": {
                        "type": "string"
                      },
                      "expirationDate": {
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "name": "backwardEmissionTitles",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "operationId": {
                    "type": "string"
                  },
                  "groupTitlesId": {
                    "type": "string"
                  },
                  "effectiveHour": {
                    "type": "string"
                  },
                  "title": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "effectiveDate": {
                        "type": "string"
                      },
                      "expirationDate": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "name": "lastCashedEmissionTitleAll",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "effectiveHour": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "type": "string"
                  },
                  "expirationDate": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "lastCashedEmissionTitleEsqra",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "effectiveHour": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "type": "string"
                  },
                  "expirationDate": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "lastCashedEmissionTitleEsra",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "effectiveHour": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "type": "string"
                  },
                  "expirationDate": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "operationsEffect",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "operationId": {
                    "type": "string"
                  },
                  "effectiveHour": {
                    "type": "string"
                  },
                  "effectiveDate": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "startCoverageDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "endCoverageDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "cancellationDate",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "productCardBandCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "fiscalCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "vatCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "mdmRegistryCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "investments",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "mdmRegistryCode": {
                    "type": "string"
                  },
                  "fiscalCode": {
                    "type": "string"
                  },
                  "VATNumber": {
                    "type": "string"
                  },
                  "productCode": {
                    "type": "string"
                  },
                  "policyNumber": {
                    "type": "string"
                  },
                  "fundCode": {
                    "type": "string"
                  },
                  "fundDescription": {
                    "type": "string"
                  },
                  "NAVDate": {
                    "type": "string"
                  },
                  "sign": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "NAVValue": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "balance",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "lifeCaseInsuredAmount": {
                    "type": "string"
                  },
                  "theoreticalReleaseValue": {
                    "type": "string"
                  },
                  "theoreticalReleaseDate": {
                    "type": "string"
                  },
                  "totalInvestedPremiums": {
                    "type": "string"
                  },
                  "mdmRegistryCode": {
                    "type": "string"
                  },
                  "fiscalCode": {
                    "type": "string"
                  },
                  "VATNumber": {
                    "type": "string"
                  },
                  "policyNumber": {
                    "type": "string"
                  },
                  "productCode": {
                    "type": "string"
                  },
                  "finalBalancePaymentDate": {
                    "type": "string"
                  },
                  "netGrantedYieldRate": {
                    "type": "string"
                  },
                  "grossGrantedYieldRate": {
                    "type": "string"
                  },
                  "deathCaseInsuredAmount": {
                    "type": "string"
                  },
                  "fundValue": {
                    "type": "string"
                  },
                  "balanceTypeCode": {
                    "type": "string"
                  },
                  "balanceTypeDescription": {
                    "type": "string"
                  },
                  "complementaryWarrantyinsuredAmount": {
                    "type": "string"
                  },
                  "retrocessionRate": {
                    "type": "string"
                  },
                  "retrocessionPercentage": {
                    "type": "string"
                  },
                  "fundCode": {
                    "type": "string"
                  },
                  "fundDescription": {
                    "type": "string"
                  },
                  "annuity": {
                    "type": "string"
                  },
                  "insuredAmount": {
                    "type": "string"
                  },
                  "insuredCapital": {
                    "type": "string"
                  },
                  "NAVValue": {
                    "type": "string"
                  },
                  "shareBalance": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "policyValue",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "dossierCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "dipCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "dipAddedCode",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "contractType",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "schema": {
                "properties": {
                  "raw": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "enum": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/policy",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection",
          "indexes": [
            {
              "name": "_id",
              "type": "normal",
              "unique": true,
              "fields": [
                {
                  "name": "_id",
                  "order": 1
                }
              ]
            },
            {
              "name": "createdAt",
              "type": "normal",
              "unique": false,
              "fields": [
                {
                  "name": "createdAt",
                  "order": -1
                }
              ]
            }
          ]
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-09-28T17:03:32.894Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "insurance-crud-data-model-application-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "type": "plugin",
    "categoryId": "integrations",
    "tenantId": "mia-platform",
    "supportedBy": "Mia-Platform",
    "resources": {
      "services": {
        "integration-connector-agent": {
          "type": "plugin",
          "name": "integration-connector-agent",
          "componentId": "integration-connector-agent",
          "dockerImage": "nexus.mia-platform.eu/plugins/integration-connector-agent:0.2.0",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs/config.json",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "integration-connector-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"integrations\\": []\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "port": "http"
            },
            "readiness": {
              "path": "/-/ready",
              "port": "http"
            }
          }
        }
      }
    },
    "description": "The Integration Connector Agent connects to external sources and keeps changes synchronized between the source and one or more sinks.",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/integration-connector-agent",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/integration-connector-agent/overview"
    },
    "name": "Integration Connector Agent",
    "itemId": "integration-connector-agent",
    "version": {
      "name": "0.2.0",
      "releaseNote": "Add support to Console Events"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.976Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "integration-connector-agent_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Perform integration tests via Newman in a dedicated microservice",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/integration-tests-service/overview"
    },
    "itemId": "integration-tests-service",
    "name": "Integration Tests Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/integration-tests-service",
    "resources": {
      "services": {
        "integration-tests-service": {
          "type": "plugin",
          "name": "integration-tests-service",
          "description": "Perform integration tests via Newman in a dedicated microservice",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/integration-tests-service:0.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "max": "250m",
              "min": "100m"
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.975Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "integration-test-service-plugin.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Perform integration tests via Newman in a dedicated microservice",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/integration-tests-service/overview"
    },
    "itemId": "integration-tests-service",
    "name": "Integration Tests Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/integration-tests-service",
    "resources": {
      "services": {
        "integration-tests-service": {
          "type": "plugin",
          "name": "integration-tests-service",
          "description": "Perform integration tests via Newman in a dedicated microservice",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/integration-tests-service:0.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "500Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "max": "250m",
              "min": "100m"
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-11-24T14:49:22.611Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "integration-test-service-plugin.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "payments",
    "description": "This service provides a configurable interface to create and download a PDF payment invoice",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/invoice-service/overview"
    },
    "itemId": "invoice-service",
    "name": "Invoice Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/plugins/invoice-service",
    "resources": {
      "services": {
        "invoice-service": {
          "type": "plugin",
          "name": "invoice-service",
          "description": "This service provides a configurable interface to create and download a PDF payment invoice",
          "dockerImage": "nexus.mia-platform.eu/plugins/invoice-service:1.0.3",
          "defaultEnvironmentVariables": [
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client_type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isBackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "COMPANY_DATA_PATH",
              "value": "/config/company-data.json",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "company-data.json",
                  "content": "{\\n\\"companyName\\":\\"Company Name Srl\\",\\n\\"address\\":\\"Via Name, 1, City\\",\\n\\"telephoneNumber\\":\\"Tel. +39 1234567890\\",\\n\\"logo\\":\\"base64 of your logo\\"\\n}"
                }
              ],
              "link": {}
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.024Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "invoice-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "payments",
    "description": "This service provides a configurable interface to create and download a PDF payment invoice",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/invoice-service/overview"
    },
    "itemId": "invoice-service",
    "name": "Invoice Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/plugins/invoice-service",
    "resources": {
      "services": {
        "invoice-service": {
          "type": "plugin",
          "name": "invoice-service",
          "description": "This service provides a configurable interface to create and download a PDF payment invoice",
          "dockerImage": "nexus.mia-platform.eu/plugins/invoice-service:1.0.3",
          "defaultEnvironmentVariables": [
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client_type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isBackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "COMPANY_DATA_PATH",
              "value": "/config/company-data.json",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "company-data.json",
                  "content": "{\\n\\"companyName\\":\\"Company Name Srl\\",\\n\\"address\\":\\"Via Name, 1, City\\",\\n\\"telephoneNumber\\":\\"Tel. +39 1234567890\\",\\n\\"logo\\":\\"base64 of your logo\\"\\n}"
                }
              ],
              "link": {}
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-11-09T14:27:48.512Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "invoice-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addgeo",
    "description": "Reverse geocoding service to obtain geolocation information based on request IP relying on ipgeolocation.io",
    "itemId": "ip-geolocation-service",
    "name": "IP Geolocation Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/ip-geolocation-service",
    "resources": {
      "services": {
        "ip-geolocation-service": {
          "type": "plugin",
          "name": "ip-geolocation-service",
          "description": "Reverse geocoding service to obtain geolocation information based on request IP relying on ipgeolocation.io",
          "dockerImage": "nexus.mia-platform.eu/plugins/ip-geolocation-service:2.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "IPGEOLOCATION_PRIVATE_KEY",
              "value": "CHANGE_WITH_YOUR_SECRET_IPGEOLOCATION_KEY",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.973Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ip-geolocation-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addgeo",
    "description": "Reverse geocoding service to obtain geolocation information based on request IP relying on ipgeolocation.io",
    "itemId": "ip-geolocation-service",
    "name": "IP Geolocation Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/ip-geolocation-service",
    "resources": {
      "services": {
        "ip-geolocation-service": {
          "type": "plugin",
          "name": "ip-geolocation-service",
          "description": "Reverse geocoding service to obtain geolocation information based on request IP relying on ipgeolocation.io",
          "dockerImage": "nexus.mia-platform.eu/plugins/ip-geolocation-service:2.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "IPGEOLOCATION_PRIVATE_KEY",
              "value": "CHANGE_WITH_YOUR_SECRET_IPGEOLOCATION_KEY",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ip-geolocation-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Example of Java Microservice based on Springboot 2 with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/springboot-hello-world-example/refs/heads/2.x_jdk-11/README.md"
    },
    "itemId": "java-hello-world",
    "name": "Springboot 2 Java 11 Hello World",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/springboot-hello-world-example/tree/2.x_jdk-11",
    "resources": {
      "services": {
        "springboot-2-java-11-hello-world": {
          "type": "example",
          "name": "springboot-2-java-11-hello-world",
          "description": "Example of Java Microservice based on Springboot 2 with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/springboot-hello-world-example/archive/refs/heads/2.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.039Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "java-hello-world.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Example of Java Microservice based on Springboot 2 with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/springboot-hello-world-example/refs/heads/2.x_jdk-11/README.md"
    },
    "itemId": "java-hello-world",
    "name": "Springboot 2 Java 11 Hello World",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/springboot-hello-world-example/tree/2.x_jdk-11",
    "resources": {
      "services": {
        "springboot-2-java-11-hello-world": {
          "type": "example",
          "name": "springboot-2-java-11-hello-world",
          "description": "Example of Java Microservice based on Springboot 2 with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/springboot-hello-world-example/archive/refs/heads/2.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-05-16T15:02:06.328Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "java-hello-world.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "The JWT Token Validator service allows verifying if a given JWT token is valid.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/jwt-token-validator/overview_and_usage"
    },
    "itemId": "jwt-token-validator",
    "name": "JWT Token Validator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/jwt-token-validator",
    "resources": {
      "services": {
        "jwt-token-validator": {
          "type": "plugin",
          "name": "jwt-token-validator",
          "description": "The JWT Token Validator service allows verifying if a given JWT token is valid.",
          "dockerImage": "nexus.mia-platform.eu/core/jwt-token-validator:1.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "ISSUER_CONFIGURATION_PATH",
              "value": "/configurations",
              "valueType": "plain"
            },
            {
              "name": "ISSUER_CONFIGURATION_FILENAME",
              "value": "issuer-config",
              "valueType": "plain"
            },
            {
              "name": "JWKS_ENCRYPTION_KEYS_PATH",
              "value": "/configurations/jwks-config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "jwt-token-validator-config",
              "mountPath": "/configurations",
              "files": [
                {
                  "name": "issuer-config.json",
                  "content": "{}"
                },
                {
                  "name": "jwks-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.2.0",
      "releaseNote": "### Changed\\n\\n- /verify handler looks in \`sid\` cookie for the token if not present in \`authorization\` header\\n\\n### Security\\n\\n- Added SBOM and docker image sign"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.665Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "jwt-token-validator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "The JWT Token Validator service allows verifying if a given JWT token is valid.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/jwt-token-validator/overview_and_usage"
    },
    "itemId": "jwt-token-validator",
    "name": "JWT Token Validator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/jwt-token-validator",
    "resources": {
      "services": {
        "jwt-token-validator": {
          "type": "plugin",
          "name": "jwt-token-validator",
          "description": "The JWT Token Validator service allows verifying if a given JWT token is valid.",
          "dockerImage": "nexus.mia-platform.eu/core/jwt-token-validator:1.1.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "ISSUER_CONFIGURATION_PATH",
              "value": "/configurations",
              "valueType": "plain"
            },
            {
              "name": "ISSUER_CONFIGURATION_FILENAME",
              "value": "issuer-config",
              "valueType": "plain"
            },
            {
              "name": "JWKS_ENCRYPTION_KEYS_PATH",
              "value": "/configurations/jwks-config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "jwt-token-validator-config",
              "mountPath": "/configurations",
              "files": [
                {
                  "name": "issuer-config.json",
                  "content": "{}"
                },
                {
                  "name": "jwks-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.1.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.024Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "jwt-token-validator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "The JWT Token Validator service allows verifying if a given JWT token is valid.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/jwt-token-validator/overview_and_usage"
    },
    "itemId": "jwt-token-validator",
    "name": "JWT Token Validator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/jwt-token-validator",
    "resources": {
      "services": {
        "jwt-token-validator": {
          "type": "plugin",
          "name": "jwt-token-validator",
          "description": "The JWT Token Validator service allows verifying if a given JWT token is valid.",
          "dockerImage": "nexus.mia-platform.eu/core/jwt-token-validator:1.1.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "ISSUER_CONFIGURATION_PATH",
              "value": "/configurations",
              "valueType": "plain"
            },
            {
              "name": "ISSUER_CONFIGURATION_FILENAME",
              "value": "issuer-config",
              "valueType": "plain"
            },
            {
              "name": "JWKS_ENCRYPTION_KEYS_PATH",
              "value": "/configurations/jwks-config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "jwt-token-validator-config",
              "mountPath": "/configurations",
              "files": [
                {
                  "name": "issuer-config.json",
                  "content": "{}"
                },
                {
                  "name": "jwks-config.json",
                  "content": "{}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-09-09T08:38:47.213Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "jwt-token-validator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "Use this is plugin to convert kafka messages into Firebase push notification.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/kafka2firebase/overview"
    },
    "itemId": "kafka2firebase",
    "name": "Kafka2Firebase",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/kafka2firebase",
    "resources": {
      "services": {
        "kafka2firebase": {
          "type": "plugin",
          "name": "kafka2firebase",
          "description": "Use this is plugin to convert kafka messages into Firebase push notification.",
          "dockerImage": "nexus.mia-platform.eu/plugins/kafka2firebase:1.2.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_TOPICS",
              "value": "CHANGE_WITH_YOUR_KAFKA_TOPICS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONSUMER_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_CONSUMER_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "AUTO_OFFSET_RESET",
              "value": "CHANGE_WITH_YOUR_AUTO_OFFSET_RESET",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "OK_URL",
              "value": "CHANGE_WITH_YOUR_OK_URL",
              "valueType": "plain"
            },
            {
              "name": "KO_URL",
              "value": "CHANGE_WITH_YOUR_KO_URL",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.2.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.024Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2firebase_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "Use this is plugin to convert kafka messages into Firebase push notification.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/kafka2firebase/overview"
    },
    "itemId": "kafka2firebase",
    "name": "Kafka2Firebase",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/kafka2firebase",
    "resources": {
      "services": {
        "kafka2firebase": {
          "type": "plugin",
          "name": "kafka2firebase",
          "description": "Use this is plugin to convert kafka messages into Firebase push notification.",
          "dockerImage": "nexus.mia-platform.eu/plugins/kafka2firebase:1.2.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_TOPICS",
              "value": "CHANGE_WITH_YOUR_KAFKA_TOPICS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONSUMER_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_CONSUMER_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "AUTO_OFFSET_RESET",
              "value": "CHANGE_WITH_YOUR_AUTO_OFFSET_RESET",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            },
            {
              "name": "OK_URL",
              "value": "CHANGE_WITH_YOUR_OK_URL",
              "valueType": "plain"
            },
            {
              "name": "KO_URL",
              "value": "CHANGE_WITH_YOUR_KO_URL",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2firebase_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "This is an example of using our library Kafka2Rest. It takes messages from Kafka broker and sends POST request after filter and process the messages.",
    "itemId": "kafka2rest-example",
    "name": "Kafka2Rest Example",
    "resources": {
      "services": {
        "kafka2rest-example": {
          "type": "example",
          "name": "kafka2rest-example",
          "description": "This is an example of using our library Kafka2Rest. It takes messages from Kafka broker and sends POST request after filter and process the messages.",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/943/repository/archive.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "CHANGE_WITH_YOUR_KAFKA_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_TOPICS",
              "value": "CHANGE_WITH_YOUR_KAFKA_TOPICS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONSUMER_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_CONSUMER_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "AUTO_OFFSET_RESET",
              "value": "CHANGE_WITH_YOUR_AUTO_OFFSET_RESET",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_SERVICE_URL",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.086Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2rest-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "This is an example of using our library Kafka2Rest. It takes messages from Kafka broker and sends POST request after filter and process the messages.",
    "itemId": "kafka2rest-example",
    "name": "Kafka2Rest Example",
    "resources": {
      "services": {
        "kafka2rest-example": {
          "type": "example",
          "name": "kafka2rest-example",
          "description": "This is an example of using our library Kafka2Rest. It takes messages from Kafka broker and sends POST request after filter and process the messages.",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/943/repository/archive.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_USERNAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PASSWORD",
              "value": "CHANGE_WITH_YOUR_KAFKA_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_TOPICS",
              "value": "CHANGE_WITH_YOUR_KAFKA_TOPICS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONSUMER_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_CONSUMER_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "AUTO_OFFSET_RESET",
              "value": "CHANGE_WITH_YOUR_AUTO_OFFSET_RESET",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "CHANGE_WITH_YOUR_CRUD_SERVICE_URL",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-18T11:16:10.970Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2rest-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "A service that enables the conversion of Kafka messages into REST HTTP requests that are executed towards configured targets.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/kafka2rest/overview"
    },
    "itemId": "kafka2rest-service",
    "name": "Kafka2Rest service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/kafka2rest",
    "resources": {
      "services": {
        "kafka2rest-service": {
          "type": "plugin",
          "name": "kafka2rest-service",
          "description": "A service that enables the conversion of Kafka messages into REST HTTP requests that are executed towards configured targets.",
          "dockerImage": "nexus.mia-platform.eu/plugins/kafka2rest:1.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TOPICS_REST_CONFIG_PATH",
              "value": "/configs/kafka2rest-config.json",
              "valueType": "plain"
            },
            {
              "name": "PATH_PROCESSORS_PATH",
              "value": "/configs/pathGenerators.js",
              "valueType": "plain"
            },
            {
              "name": "BODY_PROCESSORS_PATH",
              "value": "/configs/bodyGenerators.js",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH THE ID OF THE CONSUMER GROUP",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH THE COMMA SEPARATED LIST OF BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "plain",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH THE USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH THE PASSWORD",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "50Mi",
              "min": "100Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "50m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "kafka2rest-configs",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "kafka2rest-config.json",
                  "content": "{}"
                },
                {
                  "name": "pathGenerators.js",
                  "content": "'use strict'\\n\\nmodule.exports={}"
                },
                {
                  "name": "bodyGenerators.js",
                  "content": "'use strict'\\n\\nmodule.exports={}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.2.0",
      "releaseNote": "### Added\\n\\n- Added header processor file support to generate custom headers\\n\\n### Changed:\\n\\n- support query parameters returned from path processors\\n- messageSchema is now optional for those situation when body generator returns a non-json response."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.024Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2rest-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "A service that enables the conversion of Kafka messages into REST HTTP requests that are executed towards configured targets.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/kafka2rest/overview"
    },
    "itemId": "kafka2rest-service",
    "name": "Kafka2Rest service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/kafka2rest",
    "resources": {
      "services": {
        "kafka2rest-service": {
          "type": "plugin",
          "name": "kafka2rest-service",
          "description": "A service that enables the conversion of Kafka messages into REST HTTP requests that are executed towards configured targets.",
          "dockerImage": "nexus.mia-platform.eu/plugins/kafka2rest:1.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TOPICS_REST_CONFIG_PATH",
              "value": "/configs/kafka2rest-config.json",
              "valueType": "plain"
            },
            {
              "name": "PATH_PROCESSORS_PATH",
              "value": "/configs/pathGenerators.js",
              "valueType": "plain"
            },
            {
              "name": "BODY_PROCESSORS_PATH",
              "value": "/configs/bodyGenerators.js",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH THE ID OF THE CONSUMER GROUP",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH THE COMMA SEPARATED LIST OF BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "plain",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH THE USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH THE PASSWORD",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "50Mi",
              "min": "100Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "50m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "kafka2rest-configs",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "kafka2rest-config.json",
                  "content": "{}"
                },
                {
                  "name": "pathGenerators.js",
                  "content": "'use strict'\\n\\nmodule.exports={}"
                },
                {
                  "name": "bodyGenerators.js",
                  "content": "'use strict'\\n\\nmodule.exports={}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.1.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.024Z",
    "lifecycleStatus": "draft",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2rest-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "A service that enables the conversion of Kafka messages into REST HTTP requests that are executed towards configured targets.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/kafka2rest/overview"
    },
    "itemId": "kafka2rest-service",
    "name": "Kafka2Rest service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/kafka2rest",
    "resources": {
      "services": {
        "kafka2rest-service": {
          "type": "plugin",
          "name": "kafka2rest-service",
          "description": "A service that enables the conversion of Kafka messages into REST HTTP requests that are executed towards configured targets.",
          "dockerImage": "nexus.mia-platform.eu/plugins/kafka2rest:1.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TOPICS_REST_CONFIG_PATH",
              "value": "/configs/kafka2rest-config.json",
              "valueType": "plain"
            },
            {
              "name": "PATH_PROCESSORS_PATH",
              "value": "/configs/pathGenerators.js",
              "valueType": "plain"
            },
            {
              "name": "BODY_PROCESSORS_PATH",
              "value": "/configs/bodyGenerators.js",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH THE ID OF THE CONSUMER GROUP",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH THE COMMA SEPARATED LIST OF BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "plain",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH THE USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH THE PASSWORD",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "50Mi",
              "min": "100Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "50m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "kafka2rest-configs",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "kafka2rest-config.json",
                  "content": "{}"
                },
                {
                  "name": "pathGenerators.js",
                  "content": "'use strict'\\n\\nmodule.exports={}"
                },
                {
                  "name": "bodyGenerators.js",
                  "content": "'use strict'\\n\\nmodule.exports={}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-10-27T12:40:30.891Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "kafka2rest-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "A simple Hello World example Kotlin Application using Ktor 1.6 framework with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Hello-World-Example/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-hello-world-example",
    "name": "Ktor 1.6 Java 11 Hello World Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Hello-World-Example/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-hello-world-example": {
          "type": "example",
          "name": "ktor-16-java-11-hello-world-example",
          "description": "A simple Hello World example Kotlin Application using Ktor 1.6 framework with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Hello-World-Example/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.038Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "A simple Hello World example Kotlin Application using Ktor 1.6 framework with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Hello-World-Example/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-hello-world-example",
    "name": "Ktor 1.6 Java 11 Hello World Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Hello-World-Example/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-hello-world-example": {
          "type": "example",
          "name": "ktor-16-java-11-hello-world-example",
          "description": "A simple Hello World example Kotlin Application using Ktor 1.6 framework with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Hello-World-Example/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-02-02T16:26:32.584Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "A simple Hello World example application using Mia-Platform Kotlin Multi Module template based on Ktor 1.6 with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Multi-Module-Hello-World-Example/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-multi-module-hello-world-example",
    "name": "Ktor 1.6 Java 11 Multi Module Hello World Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Hello-World-Example/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-multi-module-hello-world-example": {
          "type": "example",
          "name": "ktor-16-java-11-multi-module-hello-world-example",
          "description": "A simple Hello World example application using Mia-Platform Kotlin Multi Module template based on Ktor 1.6 with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Hello-World-Example/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-multi-project-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "service/logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.039Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-multi-module-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "A simple Hello World example application using Mia-Platform Kotlin Multi Module template based on Ktor 1.6 with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Multi-Module-Hello-World-Example/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-multi-module-hello-world-example",
    "name": "Ktor 1.6 Java 11 Multi Module Hello World Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Hello-World-Example/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-multi-module-hello-world-example": {
          "type": "example",
          "name": "ktor-16-java-11-multi-module-hello-world-example",
          "description": "A simple Hello World example application using Mia-Platform Kotlin Multi Module template based on Ktor 1.6 with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Hello-World-Example/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-multi-project-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "service/logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-02-02T16:26:32.594Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-multi-module-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Kotlin Multi Module Template for monorepo service implementation based on Ktor 1.6 framework and Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Multi-Module-Template/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-multi-module-template",
    "name": "Ktor 1.6 Java 11 Multi Module Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Template/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-multi-module-template": {
          "type": "template",
          "name": "ktor-16-java-11-multi-module-template",
          "description": "Kotlin Multi Module Template for monorepo service implementation based on Ktor 1.6 framework and Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Template/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-multi-project-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "service/logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.008Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-multi-module-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Kotlin Multi Module Template for monorepo service implementation based on Ktor 1.6 framework with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Multi-Module-Template/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-multi-module-template",
    "name": "Ktor 1.6 Java 11 Multi Module Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Template/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-multi-module-template": {
          "type": "template",
          "name": "ktor-16-java-11-multi-module-template",
          "description": "Kotlin Multi Module Template for monorepo service implementation based on Ktor 1.6 framework with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Multi-Module-Template/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-multi-project-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "service/logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-02-02T16:26:32.592Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-multi-module-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "A complete Kotlin template using Ktor 1.6 framework with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Template/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-template",
    "name": "Ktor 1.6 Java 11 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Template/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-template": {
          "type": "template",
          "name": "ktor-16-java-11-template",
          "description": "A complete Kotlin template using Ktor 1.6 framework with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Template/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.008Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "A complete Kotlin template using Ktor 1.6 framework with Java 11",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Ktor-Template/refs/heads/1.6.x_jdk-11/README.md"
    },
    "itemId": "ktor-template",
    "name": "Ktor 1.6 Java 11 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Ktor-Template/tree/1.6.x_jdk-11",
    "resources": {
      "services": {
        "ktor-16-java-11-template": {
          "type": "template",
          "name": "ktor-16-java-11-template",
          "description": "A complete Kotlin template using Ktor 1.6 framework with Java 11",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Ktor-Template/archive/refs/heads/1.6.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fgradle6-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "body",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "logback.xml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "1000m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/openapi.json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-02-02T16:26:32.575Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ktor-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Frontend supporting authentication flow.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/oauth-login-site/overview"
    },
    "itemId": "login-site",
    "name": "Oauth Login Site",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/backoffice/login-site",
    "resources": {
      "services": {
        "login-site": {
          "type": "plugin",
          "name": "login-site",
          "description": "Frontend supporting authentication flow.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/login-site:8.1.3",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "http"
            },
            "readiness": {
              "port": "http"
            },
            "startup": {}
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "80m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "30Mi",
              "min": "15Mi"
            }
          },
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "8.1.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-06-18T12:00:00.000Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "login-site_logo_20250619.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Manage newsletters subscriptions and send transactional emails with Mailchimp/Mandrill",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mailchimp-mandrill-mail-notification-service/overview"
    },
    "itemId": "mailchimp-notification-service",
    "name": "Mailchimp Notification Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/mailchimp-plugin",
    "resources": {
      "services": {
        "mailchimp-notification-service": {
          "type": "plugin",
          "name": "mailchimp-notification-service",
          "description": "Manage newsletters subscriptions and send transactional emails with Mailchimp/Mandrill",
          "dockerImage": "nexus.mia-platform.eu/plugins/mailchimp:2.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "BODY",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "service/logback.xml",
              "valueType": "plain"
            },
            {
              "name": "MANDRILL_API_KEY",
              "value": "{{MANDRILL_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "MAILCHIMP_URL",
              "value": "{{MAILCHIMP_URL}}",
              "valueType": "plain"
            },
            {
              "name": "MAILCHIMP_API_KEY",
              "value": "{{MAILCHIMP_API_KEY}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "500Mi",
              "min": "200Mi"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.025Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mailchimp-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Manage newsletters subscriptions and send transactional emails with Mailchimp/Mandrill",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mailchimp-mandrill-mail-notification-service/overview"
    },
    "itemId": "mailchimp-notification-service",
    "name": "Mailchimp Notification Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/mailchimp-plugin",
    "resources": {
      "services": {
        "mailchimp-notification-service": {
          "type": "plugin",
          "name": "mailchimp-notification-service",
          "description": "Manage newsletters subscriptions and send transactional emails with Mailchimp/Mandrill",
          "dockerImage": "nexus.mia-platform.eu/plugins/mailchimp:2.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "BODY",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "service/logback.xml",
              "valueType": "plain"
            },
            {
              "name": "MANDRILL_API_KEY",
              "value": "{{MANDRILL_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "MAILCHIMP_URL",
              "value": "{{MAILCHIMP_URL}}",
              "valueType": "plain"
            },
            {
              "name": "MAILCHIMP_API_KEY",
              "value": "{{MAILCHIMP_API_KEY}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "500Mi",
              "min": "200Mi"
            }
          },
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/metrics",
                "port": "metrics",
                "interval": "60s"
              }
            ]
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mailchimp-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send messages to your users through various channels",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/messaging-service/overview"
    },
    "itemId": "messaging-service",
    "name": "Messaging Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/messaging-service",
    "resources": {
      "services": {
        "messaging-service": {
          "type": "plugin",
          "name": "messaging-service",
          "description": "Send messages to your users through various channels",
          "dockerImage": "nexus.mia-platform.eu/plugins/messaging-service:1.7.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "SMS_SERVICE_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/messaging-service/config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.7.1",
      "releaseNote": "Replace newline escape sequences with HTML line break element in HTML email messages"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.533Z",
    "lifecycleStatus": "maintenance",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "messaging-service_logo_20250507.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send messages to your users through various channels",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/messaging-service/overview"
    },
    "itemId": "messaging-service",
    "name": "Messaging Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/messaging-service",
    "resources": {
      "services": {
        "messaging-service": {
          "type": "plugin",
          "name": "messaging-service",
          "description": "Send messages to your users through various channels",
          "dockerImage": "nexus.mia-platform.eu/plugins/messaging-service:1.7.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "SMS_SERVICE_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/messaging-service/config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.7.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.025Z",
    "lifecycleStatus": "maintenance",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "messaging-service_logo_20250507.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send messages to your users through various channels",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/messaging-service/overview"
    },
    "itemId": "messaging-service",
    "name": "Messaging Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/messaging-service",
    "resources": {
      "services": {
        "messaging-service": {
          "type": "plugin",
          "name": "messaging-service",
          "description": "Send messages to your users through various channels",
          "dockerImage": "nexus.mia-platform.eu/plugins/messaging-service:1.7.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "SMS_SERVICE_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/messaging-service/config.json",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-10-14T12:21:35.727Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "messaging-service_logo_20250507.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "micro-lc enables you to create applications composed by micro-frontends integrated at runtime.",
    "documentation": {
      "type": "externalLink",
      "url": "https://micro-lc.io"
    },
    "itemId": "micro-lc",
    "name": "micro-lc",
    "repositoryUrl": "https://github.com/micro-lc/micro-lc",
    "resources": {
      "services": {
        "micro-lc": {
          "type": "plugin",
          "name": "micro-lc",
          "description": "micro-lc enables you to create applications composed by micro-frontends integrated at runtime.",
          "dockerImage": "nexus.mia-platform.eu/microlc/micro-lc:2.4.3",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.3",
      "releaseNote": "Added opt-in support for re-fetching compose applications' configuration on each mount."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.874Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "micro-lc enables you to create applications composed by micro-frontends integrated at runtime.",
    "documentation": {
      "type": "externalLink",
      "url": "https://micro-lc.io"
    },
    "itemId": "micro-lc",
    "name": "micro-lc",
    "repositoryUrl": "https://github.com/micro-lc/micro-lc",
    "resources": {
      "services": {
        "micro-lc": {
          "type": "plugin",
          "name": "micro-lc",
          "description": "micro-lc enables you to create applications composed by micro-frontends integrated at runtime.",
          "dockerImage": "nexus.mia-platform.eu/microlc/micro-lc:2.4.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.038Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "micro-lc enables you to create applications composed by micro-frontends integrated at runtime.",
    "documentation": {
      "type": "externalLink",
      "url": "https://micro-lc.io"
    },
    "itemId": "micro-lc",
    "name": "micro-lc",
    "repositoryUrl": "https://github.com/micro-lc/micro-lc",
    "resources": {
      "services": {
        "micro-lc": {
          "type": "plugin",
          "name": "micro-lc",
          "description": "micro-lc enables you to create applications composed by micro-frontends integrated at runtime.",
          "dockerImage": "nexus.mia-platform.eu/microlc/micro-lc:2.4.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-02-16T17:10:25.261Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Angular 12 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/angular12-template/refs/tags/v2.0.4/README.md"
    },
    "itemId": "micro-lc-angular-12-template",
    "name": "micro-lc Angular 12 Template",
    "repositoryUrl": "https://github.com/micro-lc/angular12-template",
    "resources": {
      "services": {
        "micro-lc-angular-12-template": {
          "type": "template",
          "name": "micro-lc-angular-12-template",
          "description": "Use this template to set up a micro-lc Angular 12 plugin project",
          "archiveUrl": "https://github.com/micro-lc/angular12-template/archive/v2.0.4.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.870Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-angular-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Angular 12 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/angular12-template/refs/tags/v2.0.4/README.md"
    },
    "itemId": "micro-lc-angular-12-template",
    "name": "micro-lc Angular 12 Template",
    "repositoryUrl": "https://github.com/micro-lc/angular12-template",
    "resources": {
      "services": {
        "micro-lc-angular-12-template": {
          "type": "template",
          "name": "micro-lc-angular-12-template",
          "description": "Use this template to set up a micro-lc Angular 12 plugin project",
          "archiveUrl": "https://github.com/micro-lc/angular12-template/archive/v2.0.4.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-06-01T11:04:24.489Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-angular-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Angular 13 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/angular13-template/refs/tags/v1.0.1/README.md"
    },
    "itemId": "micro-lc-angular-13-template",
    "name": "micro-lc Angular 13 Template",
    "repositoryUrl": "https://github.com/micro-lc/angular13-template",
    "resources": {
      "services": {
        "micro-lc-angular-13-template": {
          "type": "template",
          "name": "micro-lc-angular-13-template",
          "description": "Use this template to set up a micro-lc Angular 13 plugin project",
          "archiveUrl": "https://github.com/micro-lc/angular13-template/archive/v1.0.1.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.868Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-angular-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Angular 13 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/angular13-template/refs/tags/v1.0.1/README.md"
    },
    "itemId": "micro-lc-angular-13-template",
    "name": "micro-lc Angular 13 Template",
    "repositoryUrl": "https://github.com/micro-lc/angular13-template",
    "resources": {
      "services": {
        "micro-lc-angular-13-template": {
          "type": "template",
          "name": "micro-lc-angular-13-template",
          "description": "Use this template to set up a micro-lc Angular 13 plugin project",
          "archiveUrl": "https://github.com/micro-lc/angular13-template/archive/v1.0.1.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-06-01T11:04:24.489Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-angular-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Angular 14 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/angular14-template/refs/tags/v1.0.1/README.md"
    },
    "itemId": "micro-lc-angular-14-template",
    "name": "micro-lc Angular 14 Template",
    "repositoryUrl": "https://github.com/micro-lc/angular14-template",
    "resources": {
      "services": {
        "micro-lc-angular-14-template": {
          "type": "template",
          "name": "micro-lc-angular-14-template",
          "description": "Use this template to set up a micro-lc Angular 14 plugin project",
          "archiveUrl": "https://github.com/micro-lc/angular14-template/archive/v1.0.1.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.011Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-angular-14-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Angular 14 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/angular14-template/refs/tags/v1.0.1/README.md"
    },
    "itemId": "micro-lc-angular-14-template",
    "name": "micro-lc Angular 14 Template",
    "repositoryUrl": "https://github.com/micro-lc/angular14-template",
    "resources": {
      "services": {
        "micro-lc-angular-14-template": {
          "type": "template",
          "name": "micro-lc-angular-14-template",
          "description": "Use this template to set up a micro-lc Angular 14 plugin project",
          "archiveUrl": "https://github.com/micro-lc/angular14-template/archive/v1.0.1.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fangular-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-06-01T11:04:24.454Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-angular-14-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Backend service responsible for serving micro-lc configuration files, applying some useful parsing logic before returning their content.",
    "documentation": {
      "type": "externalLink",
      "url": "https://micro-lc.io/add-ons/backend/middleware"
    },
    "itemId": "micro-lc-middleware",
    "name": "micro-lc Middleware",
    "repositoryUrl": "https://github.com/micro-lc/middleware",
    "resources": {
      "services": {
        "micro-lc-middleware": {
          "type": "plugin",
          "name": "micro-lc-middleware",
          "description": "Backend service responsible for serving micro-lc configuration files, applying some useful parsing logic before returning their content.",
          "dockerImage": "nexus.mia-platform.eu/microlc/middleware:3.4.0",
          "componentId": "backoffice-backend",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "micro-lc-static-files",
              "mountPath": "/usr/static/public",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/mfe-application/\\" target=\\"_blank\\" />\\n\\n  <title>Microfrontend composer</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/latest/dist/bk-loading-animation.esm.js\\"\\n  ></script>\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/micro-lc.production.js\\"\\n  ></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#1890ff\\">\\n    <micro-lc config-src=\\"/micro-lc-configurations/config.json\\" fallback-language=\\"en\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>\\n",
                  "name": "index.html"
                }
              ]
            },
            {
              "name": "micro-lc-configurations",
              "mountPath": "/usr/static/configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"applications\\": {\\n    \\"home\\": {\\n      \\"config\\": {\\n        \\"content\\": {\\n          \\"attributes\\": {\\n            \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; row-gap: 24px\\"\\n          },\\n          \\"content\\": [\\n            {\\n              \\"content\\": \\"Welcome to your new frontend! 👋\\",\\n              \\"tag\\": \\"span\\"\\n            },\\n            {\\n              \\"attributes\\": {\\n                \\"href\\": \\"https://docs.mia-platform.eu/docs/microfrontend-composer/overview\\",\\n                \\"target\\": \\"_blank\\"\\n              },\\n              \\"content\\": \\"Get started with the official documentation!\\",\\n              \\"tag\\": \\"a\\"\\n            }\\n          ],\\n          \\"tag\\": \\"div\\"\\n        }\\n      },\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./home\\"\\n    }\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"logo\\": {\\n            \\"altText\\": \\"Change me\\",\\n            \\"url\\": \\"https://www.mia-platform.eu/static/img/logo.svg\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"HomeOutlined\\"\\n              },\\n              \\"id\\": \\"home\\",\\n              \\"label\\": \\"Home\\",\\n              \\"type\\": \\"application\\"\\n            }\\n          ],\\n          \\"mode\\": \\"fixedSideBar\\"\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#1890ff\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/latest/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./home\\"\\n  },\\n  \\"version\\": 2\\n}\\n",
                  "name": "config.json"
                }
              ]
            },
            {
              "name": "micro-lc-server-configuration",
              "mountPath": "/usr/src/app/config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</mfe-application/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.2/dist/assets/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/latest/dist/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/latest/dist/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}\\n",
                  "name": "config.json"
                }
              ]
            },
            {
              "name": "micro-lc-assets",
              "mountPath": "/usr/static/public/assets",
              "files": [
                {
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n",
                  "name": "style.css"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.0",
      "releaseNote": "### Added\\n\\n- Added env variable ENABLE_CACHE to toggle internal cache of config and public files."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.670Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-middleware.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc React 18 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/react-template/refs/heads/18.x/README.md"
    },
    "itemId": "micro-lc-react-template",
    "name": "micro-lc React 18 Template",
    "repositoryUrl": "https://github.com/micro-lc/react-template/tree/18.x",
    "resources": {
      "services": {
        "micro-lc-react-18-template": {
          "type": "template",
          "name": "micro-lc-react-18-template",
          "description": "Use this template to set up a micro-lc React 18 plugin project",
          "archiveUrl": "https://github.com/micro-lc/react-template/archive/refs/heads/18.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.011Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-react-template-new.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc React 18 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/react-template/refs/heads/18.x/README.md"
    },
    "itemId": "micro-lc-react-template",
    "name": "micro-lc React 18 Template",
    "repositoryUrl": "https://github.com/micro-lc/react-template/tree/18.x",
    "resources": {
      "services": {
        "micro-lc-react-18-template": {
          "type": "template",
          "name": "micro-lc-react-18-template",
          "description": "Use this template to set up a micro-lc React 18 plugin project",
          "archiveUrl": "https://github.com/micro-lc/react-template/archive/refs/heads/18.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-06-01T11:04:24.452Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-react-template-new.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Vue 3 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/vue3-template/refs/tags/v1.0.0/README.md"
    },
    "itemId": "micro-lc-vue-3-template",
    "name": "micro-lc Vue 3 Template",
    "repositoryUrl": "https://github.com/micro-lc/vue3-template",
    "resources": {
      "services": {
        "micro-lc-vue-3-template": {
          "type": "template",
          "name": "micro-lc-vue-3-template",
          "description": "Use this template to set up a micro-lc Vue 3 plugin project",
          "archiveUrl": "https://github.com/micro-lc/vue3-template/archive/v1.0.0.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.011Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-vue-3-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to set up a micro-lc Vue 3 plugin project",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/vue3-template/refs/tags/v1.0.0/README.md"
    },
    "itemId": "micro-lc-vue-3-template",
    "name": "micro-lc Vue 3 Template",
    "repositoryUrl": "https://github.com/micro-lc/vue3-template",
    "resources": {
      "services": {
        "micro-lc-vue-3-template": {
          "type": "template",
          "name": "micro-lc-vue-3-template",
          "description": "Use this template to set up a micro-lc Vue 3 plugin project",
          "archiveUrl": "https://github.com/micro-lc/vue3-template/archive/v1.0.0.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-11-30T17:52:19.189Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "micro-lc-vue-3-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this application to set up Microfrontend Composer to build your frontend without using external resources in a few clicks.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_applications/microfrontend-composer-on-prem-toolkit-application/overview"
    },
    "itemId": "microfrontend-composer-on-prem-toolkit",
    "name": "Microfrontend Composer On Prem Toolkit",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/microfrontend-composer-on-prem-toolkit-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "micro-lc": {
          "type": "plugin",
          "name": "micro-lc",
          "description": "micro-lc config server.",
          "dockerImage": "nexus.mia-platform.eu/back-kit/mfe-toolkit-on-prem:{{MFE_TOOLKIT_VERSION}}",
          "componentId": "backoffice-backend",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "micro-lc-static-files",
              "mountPath": "/usr/static/public",
              "viewAsReadOnly": true,
              "usePreserve": true,
              "files": [
                {
                  "name": "index.html",
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/mfe-application/\\" target=\\"_blank\\" />\\n\\n  <title>Microfrontend composer</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"./assets/favicon.svg\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"{{BACK_KIT_SOURCE}}/bk-loading-animation.esm.js\\"\\n  ></script>\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"{{MICRO_LC_SOURCE}}/micro-lc.production.js\\"\\n  ></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#1890ff\\">\\n    <micro-lc config-src=\\"/micro-lc-configurations/config.json\\" fallback-language=\\"en\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>\\n"
                }
              ]
            },
            {
              "name": "micro-lc-configurations",
              "mountPath": "/usr/static/configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"applications\\": {\\n    \\"home\\": {\\n      \\"config\\": {\\n        \\"content\\": {\\n          \\"attributes\\": {\\n            \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; row-gap: 24px\\"\\n          },\\n          \\"content\\": [\\n            {\\n              \\"content\\": \\"Welcome to your new frontend! 👋\\",\\n              \\"tag\\": \\"span\\"\\n            },\\n            {\\n              \\"attributes\\": {\\n                \\"href\\": \\"https://docs.mia-platform.eu/docs/microfrontend-composer/overview\\",\\n                \\"target\\": \\"_blank\\"\\n              },\\n              \\"content\\": \\"Get started with the official documentation!\\",\\n              \\"tag\\": \\"a\\"\\n            }\\n          ],\\n          \\"tag\\": \\"div\\"\\n        }\\n      },\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./home\\"\\n    }\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"logo\\": {\\n            \\"altText\\": \\"Change me\\",\\n            \\"url\\": \\"/mfe-application/assets/logo.svg\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"HomeOutlined\\"\\n              },\\n              \\"id\\": \\"home\\",\\n              \\"label\\": \\"Home\\",\\n              \\"type\\": \\"application\\"\\n            }\\n          ],\\n          \\"mode\\": \\"fixedSideBar\\"\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#1890ff\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"{{BACK_KIT_SOURCE}}/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./home\\"\\n  },\\n  \\"version\\": 2\\n}\\n"
                }
              ]
            },
            {
              "name": "micro-lc-server-configuration",
              "mountPath": "/usr/src/app/config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n  \\"contentTypeMap\\": {\\n    \\".svg\\": \\"image/svg+xml\\",\\n    \\".png\\": \\"image/png\\"\\n  },\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</mfe-application/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<{{MICRO_LC_SOURCE}}/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<{{MICRO_LC_SOURCE}}/assets/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<{{BACK_KIT_SOURCE}}/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<{{BACK_KIT_SOURCE}}/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}\\n"
                }
              ]
            },
            {
              "name": "micro-lc-assets",
              "mountPath": "/usr/static/public/assets",
              "files": [
                {
                  "name": "favicon.svg",
                  "content": "<svg width=\\"240\\" height=\\"277\\" viewBox=\\"0 0 240 277\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n<path d=\\"M123.564 120.955V155.993L95.0113 173.242L66.5345 155.804V120.955L95.0113 103.518L123.564 120.955ZM49.9009 112.475V164.207L95.0374 190.085L140.198 164.207V112.475L95.0374 86.6208L49.9009 112.475Z\\" fill=\\"#EA515A\\"/>\\n<path d=\\"M144.963 190.085L173.465 207.509V242.465L144.963 259.863L116.436 242.304V207.509L144.963 190.112V190.085ZM99.802 199.12V250.852L144.963 276.706L190.099 250.852V199.12L144.963 173.242L99.802 199.12Z\\" fill=\\"#28B7E0\\"/>\\n<path d=\\"M45.1485 190.085L73.6634 207.509V242.465L45.1485 259.863L16.6337 242.304V207.509L45.1485 190.112V190.085ZM0 199.12V250.852L45.1485 276.706L90.297 250.852V199.12L45.1485 173.242L0 199.12Z\\" fill=\\"#26A56F\\"/>\\n<path d=\\"M194.839 103.464L223.366 120.955V155.993L194.839 173.242L166.337 155.804V120.955L194.839 103.518V103.464ZM149.703 112.475V164.207L194.851 190.085L240 164.207V112.475L194.851 86.6208L149.703 112.475Z\\" fill=\\"#664389\\"/>\\n<path d=\\"M45.1612 16.843L73.6634 34.3548V69.3785L45.1612 86.621L16.6337 69.163V34.3548L45.1612 16.843ZM45.1605 0L0 25.854V77.586L45.1605 103.464L90.297 77.586V25.854L45.1605 0Z\\" fill=\\"#F1883F\\"/>\\n</svg>\\n"
                },
                {
                  "name": "logo.svg",
                  "content": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?> <svg xmlns:dc=\\"http://purl.org/dc/elements/1.1/\\" xmlns:cc=\\"http://creativecommons.org/ns#\\" xmlns:rdf=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\" xmlns:svg=\\"http://www.w3.org/2000/svg\\" xmlns=\\"http://www.w3.org/2000/svg\\" version=\\"1.1\\" id=\\"svg6364\\" viewBox=\\"0 0 123.48676 28.988379\\" height=\\"8.1811647mm\\" width=\\"34.850708mm\\"><defs id=\\"defs6366\\"></defs><metadata id=\\"metadata6369\\"></metadata><rect width=\\"123.48676\\" height=\\"28.988379\\" fill=\\"#fff\\"></rect><path id=\\"path1102\\" d=\\"M 41.328125 0 L 41.328125 1.1601562 L 42.476562 1.1601562 L 42.476562 0 L 41.328125 0 z M 34.005859 2.2011719 C 33.079609 2.2011719 32.246797 2.8692969 31.966797 3.5605469 L 31.945312 3.5605469 C 31.945313 3.5605469 31.966797 3.3619531 31.966797 3.1269531 L 31.966797 2.3417969 L 30.865234 2.3417969 L 30.867188 8.2695312 L 32.003906 8.2695312 L 32.003906 5.5644531 C 32.003906 5.2944531 32.016719 5.0260156 32.074219 4.7910156 C 32.297969 3.9485156 32.905938 3.2324219 33.773438 3.2324219 C 34.685937 3.2324219 34.802734 3.9482031 34.802734 4.7207031 L 34.802734 8.2734375 L 35.939453 8.2734375 L 35.939453 5.5644531 C 35.939453 5.2594531 35.964638 4.9923437 36.023438 4.7460938 C 36.233438 3.9373437 36.855 3.234375 37.6875 3.234375 C 38.5775 3.234375 38.740234 3.8901562 38.740234 4.7226562 L 38.740234 8.2695312 L 39.876953 8.2695312 L 39.876953 4.4746094 C 39.876953 2.9633594 39.256172 2.2011719 37.919922 2.2011719 C 36.959922 2.2011719 36.138047 2.8357813 35.810547 3.5507812 L 35.787109 3.5507812 C 35.587109 2.6595312 35.002109 2.2011719 34.005859 2.2011719 z M 46.166016 2.203125 C 44.807266 2.203125 43.951172 2.9042969 43.951172 2.9042969 L 44.419922 3.7363281 C 44.419922 3.7363281 45.158516 3.1640625 46.072266 3.1640625 C 46.822266 3.1640625 47.373047 3.4903906 47.373047 4.4628906 L 47.373047 4.5703125 L 47.115234 4.5703125 C 46.118984 4.5703125 43.541719 4.651925 43.542969 6.609375 C 43.542969 7.791875 44.539844 8.4121094 45.558594 8.4121094 C 46.976094 8.4121094 47.457031 7.2402344 47.457031 7.2402344 L 47.478516 7.2402344 C 47.478516 7.2402344 47.457031 7.4389844 47.457031 7.7089844 L 47.457031 8.2714844 L 48.509766 8.2714844 L 48.509766 4.5214844 C 48.509766 3.0214844 47.666016 2.203125 46.166016 2.203125 z M 41.339844 2.34375 L 41.339844 8.2714844 L 42.476562 8.2714844 L 42.476562 2.34375 L 41.339844 2.34375 z M 47.09375 5.4238281 L 47.384766 5.4238281 L 47.384766 5.6113281 C 47.384766 6.4900781 46.765234 7.4980469 45.802734 7.4980469 C 45.065234 7.4980469 44.691406 7.0288281 44.691406 6.5488281 C 44.691406 5.4813281 46.2375 5.4238281 47.09375 5.4238281 z M 77.742188 10.886719 C 76.138437 10.886719 72.984375 11.410547 72.984375 15.591797 L 72.984375 16.191406 L 71.40625 16.191406 L 71.40625 18.146484 L 72.984375 18.146484 L 72.984375 28.6875 L 75.388672 28.6875 L 75.388672 18.146484 L 78.392578 18.146484 L 78.392578 16.195312 L 75.388672 16.195312 L 75.388672 15.642578 C 75.388672 13.288828 77.114766 12.988281 78.041016 12.988281 C 78.417266 12.988281 78.667969 13.039062 78.667969 13.039062 L 78.667969 10.960938 C 78.667969 10.960938 78.292187 10.886719 77.742188 10.886719 z M 30.869141 11.009766 L 30.869141 28.6875 L 33.347656 28.6875 L 33.347656 22.152344 L 37.328125 22.152344 C 40.559375 22.152344 42.888672 19.897969 42.888672 16.542969 C 42.888672 13.187969 40.559375 11.009766 37.328125 11.009766 L 30.869141 11.009766 z M 44.916016 11.009766 L 44.916016 25.232422 C 44.916016 28.413672 46.944766 28.787109 48.322266 28.787109 C 48.747266 28.787109 49.121094 28.736328 49.121094 28.736328 L 49.121094 26.583984 C 49.121094 26.583984 48.922266 26.609375 48.697266 26.609375 C 47.944766 26.609375 47.34375 26.333437 47.34375 24.804688 L 47.34375 11.009766 L 44.916016 11.009766 z M 64.445312 12.537109 L 64.445312 16.191406 L 62.716797 16.191406 L 62.716797 18.146484 L 64.369141 18.146484 L 64.369141 24.054688 C 64.369141 28.287187 67.599063 28.787109 69.226562 28.787109 C 69.727812 28.787109 70.078125 28.736328 70.078125 28.736328 L 70.078125 26.583984 C 70.078125 26.583984 69.851963 26.634766 69.501953 26.634766 C 68.575703 26.634766 66.798828 26.308047 66.798828 23.779297 L 66.798828 18.146484 L 69.853516 18.146484 L 69.853516 16.191406 L 66.798828 16.191406 L 66.798828 12.537109 L 64.445312 12.537109 z M 33.347656 13.164062 L 36.953125 13.164062 C 39.056875 13.164062 40.357422 14.416172 40.357422 16.544922 C 40.357422 18.673672 39.056484 20 36.927734 20 L 33.347656 20 L 33.347656 13.164062 z M 55.783203 15.716797 C 52.878203 15.716797 51.048828 17.21875 51.048828 17.21875 L 52.050781 18.998047 C 52.050781 18.998047 53.629531 17.769531 55.582031 17.769531 C 57.183281 17.769531 58.361328 18.470078 58.361328 20.548828 L 58.361328 20.775391 L 57.810547 20.775391 C 55.681797 20.775391 50.173828 20.951563 50.173828 25.132812 C 50.173828 27.661562 52.302969 28.988281 54.480469 28.988281 C 57.511719 28.988281 58.537109 26.484375 58.537109 26.484375 L 58.587891 26.484375 C 58.587891 26.484375 58.537109 26.910078 58.537109 27.486328 L 58.537109 28.6875 L 60.789062 28.6875 L 60.789062 20.673828 C 60.789062 17.468828 58.988203 15.716797 55.783203 15.716797 z M 86.128906 15.716797 C 82.347656 15.716797 79.294219 18.495625 79.292969 22.328125 C 79.292969 26.183125 82.347656 28.986328 86.128906 28.986328 C 89.910156 28.986328 92.964844 26.184375 92.964844 22.328125 C 92.964844 18.496875 89.910156 15.716797 86.128906 15.716797 z M 110.94141 15.716797 C 108.96391 15.716797 107.18593 17.144844 106.58594 18.621094 L 106.53516 18.621094 C 106.53516 18.621094 106.58594 18.196562 106.58594 17.695312 L 106.58594 16.017578 L 104.23242 16.017578 L 104.23242 28.689453 L 106.66016 28.689453 L 106.66016 22.904297 C 106.66016 22.329297 106.6868 21.753203 106.81055 21.251953 C 107.2868 19.449453 108.58766 17.921875 110.44141 17.921875 C 112.39391 17.921875 112.64453 19.449063 112.64453 21.101562 L 112.64453 28.6875 L 115.07227 28.6875 L 115.07227 22.904297 C 115.07227 22.253047 115.12375 21.675391 115.25 21.150391 C 115.7 19.422891 117.02719 17.921875 118.80469 17.921875 C 120.70844 17.921875 121.05859 19.324063 121.05859 21.101562 L 121.05859 28.6875 L 123.48633 28.6875 L 123.48633 20.574219 C 123.48633 17.344219 122.16038 15.716797 119.30664 15.716797 C 117.25163 15.716797 115.50009 17.069453 114.79883 18.595703 L 114.74805 18.595703 C 114.32179 16.693203 113.07016 15.716797 110.94141 15.716797 z M 101.70312 15.867188 C 99.75063 15.867187 98.273526 17.320625 97.697266 19.171875 L 97.646484 19.171875 C 97.646484 19.171875 97.697266 18.745703 97.697266 18.220703 L 97.697266 16.017578 L 95.34375 16.017578 L 95.34375 28.6875 L 97.771484 28.6875 L 97.771484 23.503906 C 97.771484 22.727656 97.847266 21.950859 98.072266 21.224609 C 98.648516 19.347109 100.07766 18.244141 101.62891 18.244141 C 102.00516 18.244141 102.33008 18.322266 102.33008 18.322266 L 102.33008 15.916016 C 102.33008 15.916016 102.02813 15.867188 101.70312 15.867188 z M 86.128906 17.820312 C 88.532656 17.820312 90.484375 19.697422 90.484375 22.326172 C 90.484375 24.981172 88.532656 26.884766 86.128906 26.884766 C 83.750146 26.884766 81.773437 24.981172 81.773438 22.326172 C 81.773438 19.697422 83.750146 17.820312 86.128906 17.820312 z M 57.759766 22.601562 L 58.386719 22.601562 L 58.386719 23.003906 C 58.386719 24.881406 57.057109 27.035156 55.005859 27.035156 C 53.428359 27.035156 52.629453 26.033359 52.626953 25.005859 C 52.626953 22.727109 55.932266 22.601562 57.759766 22.601562 z \\" style=\\"fill:#666;fill-opacity:1;fill-rule:nonzero;stroke:none\\"></path><path id=\\"path1144\\" style=\\"fill:#eb525c;fill-opacity:1;fill-rule:nonzero;stroke:none\\" d=\\"m 9.848125,11.132 2.78625,1.60875 0,3.21875 -2.78625,1.60875 -2.7875,-1.60875 0,-3.21875 2.7875,-1.60875 z m 0,-2.1675 -4.665,2.6925 0,5.38625 4.665,2.6925 4.66375,-2.6925 0,-5.38625 -4.66375,-2.6925 z\\"></path><path id=\\"path1148\\" style=\\"fill:#24b8e0;fill-opacity:1;fill-rule:nonzero;stroke:none\\" d=\\"m 15.030745,20.08113 2.78626,1.60875 0,3.21875 -2.78626,1.6075 -2.78749,-1.60875 0,-3.2175 2.78749,-1.60875 z m 0,-2.16875 -4.665,2.6925 0,5.38625 4.665,2.6925 4.66376,-2.6925 0,-5.38625 -4.66376,-2.6925 z\\"></path><path id=\\"path1152\\" style=\\"fill:#26a670;fill-opacity:1;fill-rule:nonzero;stroke:none\\" d=\\"m 0,20.60625 0,5.38625 4.66375,2.6925 4.664995,-2.6925 0,-5.38625 L 4.66375,17.9125 0,20.60625 Z m 1.8775,4.30125 0,-3.2175 2.78625,-1.60875 2.787495,1.60875 0,3.2175 -2.787495,1.61 -2.78625,-1.61 z\\"></path><path id=\\"path1156\\" style=\\"fill:#66458c;fill-opacity:1;fill-rule:nonzero;stroke:none\\" d=\\"m 20.169125,11.132 2.78625,1.60875 0,3.21875 -2.78625,1.60875 -2.7875,-1.60875 0,-3.21875 2.7875,-1.60875 z m 0,-2.1675 -4.665,2.6925 0,5.38625 4.665,2.6925 4.66375,-2.6925 0,-5.38625 -4.66375,-2.6925 z\\"></path><path id=\\"path1160\\" style=\\"fill:#f28740;fill-opacity:1;fill-rule:nonzero;stroke:none\\" d=\\"m 0.022125,2.70663 0,5.38625 4.66375,2.6925 4.665,-2.6925 0,-5.38625 -4.665,-2.69375 -4.66375,2.69375 z m 1.8775,4.3025 0,-3.2175 2.78625,-1.61 2.7875,1.61 0,3.2175 -2.7875,1.60875 -2.78625,-1.60875 z\\"></path></svg> "
                },
                {
                  "name": "style.css",
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "links": [
            {
              "label": "Microfrontend Composer",
              "targetSection": "microfrontend-composer",
              "enableIf": "ENABLE_BACKOFFICE_CONFIGURATOR"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/mfe-application": {
          "defaultBasePath": "/mfe-application",
          "defaultPathRewrite": "/public",
          "description": "",
          "type": "custom",
          "tags": [
            "microfrontend"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "micro-lc",
          "listeners": {
            "frontend": true
          }
        },
        "/micro-lc-configurations": {
          "defaultBasePath": "/micro-lc-configurations",
          "defaultPathRewrite": "/configurations",
          "description": "",
          "type": "custom",
          "tags": [
            "microfrontend"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "micro-lc",
          "listeners": {
            "frontend": true
          }
        },
        "/micro-lc": {
          "defaultBasePath": "/micro-lc",
          "defaultPathRewrite": "/public/micro-lc",
          "description": "",
          "type": "custom",
          "tags": [
            "microfrontend"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "micro-lc",
          "listeners": {
            "frontend": true
          }
        },
        "/back-kit": {
          "defaultBasePath": "/back-kit",
          "defaultPathRewrite": "/public/back-kit",
          "description": "",
          "type": "custom",
          "tags": [
            "microfrontend"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "micro-lc",
          "listeners": {
            "frontend": true
          }
        }
      },
      "unsecretedVariables": {
        "MFE_TOOLKIT_VERSION": {
          "productionEnv": "1.3.6",
          "noProductionEnv": "latest"
        },
        "BACK_KIT_SOURCE": {
          "productionEnv": "/back-kit",
          "noProductionEnv": "/back-kit"
        },
        "MICRO_LC_SOURCE": {
          "productionEnv": "/micro-lc",
          "noProductionEnv": "/micro-lc"
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-11-30T17:52:19.222Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "microfrontend-composer-on-prem-toolkit_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this application to set up Microfrontend Composer to build your frontend in a few clicks",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_applications/microfrontend-composer-toolkit/overview"
    },
    "itemId": "microfrontend-composer-toolkit",
    "name": "Microfrontend Composer Toolkit",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/runtime/marketplace/microfrontend-composer-toolkit-application",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "micro-lc": {
          "type": "plugin",
          "name": "micro-lc",
          "description": "micro-lc config server.",
          "dockerImage": "nexus.mia-platform.eu/microlc/middleware:3.4.0",
          "componentId": "backoffice-backend",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "micro-lc-static-files",
              "mountPath": "/usr/static/public",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <base href=\\"/mfe-application/\\" target=\\"_blank\\" />\\n\\n  <title>Microfrontend composer</title>\\n\\n  <link rel=\\"icon\\" type=\\"image/png\\" href=\\"https://www.mia-platform.eu/static/img/favicon/apple-icon-60x60.png\\" />\\n  <link rel=\\"stylesheet\\" nonce=\\"**CSP_NONCE**\\" href=\\"./assets/style.css\\" />\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js\\"\\n  ></script>\\n\\n  <script\\n    type=\\"module\\"\\n    nonce=\\"**CSP_NONCE**\\"\\n    src=\\"https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.3/dist/micro-lc.production.js\\"\\n  ></script>\\n</head>\\n\\n<body>\\n  <bk-loading-animation primary-color=\\"#1890ff\\">\\n    <micro-lc config-src=\\"/micro-lc-configurations/config.json\\" fallback-language=\\"en\\"></micro-lc>\\n  </bk-loading-animation>\\n</body>\\n\\n</html>\\n",
                  "name": "index.html"
                }
              ]
            },
            {
              "name": "micro-lc-configurations",
              "mountPath": "/usr/static/configurations",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"applications\\": {\\n    \\"home\\": {\\n      \\"config\\": {\\n        \\"content\\": {\\n          \\"attributes\\": {\\n            \\"style\\": \\"width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; row-gap: 24px\\"\\n          },\\n          \\"content\\": [\\n            {\\n              \\"content\\": \\"Welcome to your new frontend! 👋\\",\\n              \\"tag\\": \\"span\\"\\n            },\\n            {\\n              \\"attributes\\": {\\n                \\"href\\": \\"https://docs.mia-platform.eu/docs/microfrontend-composer/overview\\",\\n                \\"target\\": \\"_blank\\"\\n              },\\n              \\"content\\": \\"Get started with the official documentation!\\",\\n              \\"tag\\": \\"a\\"\\n            }\\n          ],\\n          \\"tag\\": \\"div\\"\\n        }\\n      },\\n      \\"integrationMode\\": \\"compose\\",\\n      \\"route\\": \\"./home\\"\\n    }\\n  },\\n  \\"layout\\": {\\n    \\"content\\": [\\n      {\\n        \\"properties\\": {\\n          \\"logo\\": {\\n            \\"altText\\": \\"Change me\\",\\n            \\"url\\": \\"https://www.mia-platform.eu/static/img/logo.svg\\"\\n          },\\n          \\"menuItems\\": [\\n            {\\n              \\"icon\\": {\\n                \\"library\\": \\"@ant-design/icons-svg\\",\\n                \\"selector\\": \\"HomeOutlined\\"\\n              },\\n              \\"id\\": \\"home\\",\\n              \\"label\\": \\"Home\\",\\n              \\"type\\": \\"application\\"\\n            }\\n          ],\\n          \\"mode\\": \\"fixedSideBar\\"\\n        },\\n        \\"tag\\": \\"bk-layout\\"\\n      },\\n      {\\n        \\"properties\\": {\\n          \\"primaryColor\\": \\"#1890ff\\",\\n          \\"varsPrefix\\": [\\n            \\"micro-lc\\",\\n            \\"microlc\\",\\n            \\"back-kit\\",\\n            \\"ant\\"\\n          ]\\n        },\\n        \\"tag\\": \\"bk-antd-theme-manager\\"\\n      }\\n    ],\\n    \\"sources\\": [\\n      \\"https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js\\"\\n    ]\\n  },\\n  \\"settings\\": {\\n    \\"defaultUrl\\": \\"./home\\"\\n  },\\n  \\"version\\": 2\\n}\\n",
                  "name": "config.json"
                }
              ]
            },
            {
              "name": "micro-lc-server-configuration",
              "mountPath": "/usr/src/app/config",
              "viewAsReadOnly": true,
              "files": [
                {
                  "content": "{\\n  \\"publicHeadersMap\\": {\\n    \\"/public/index.html\\": {\\n      \\"content-security-policy\\": [\\n        [\\n          \\"script-src 'nonce-**CSP_NONCE**' 'strict-dynamic' 'unsafe-eval'\\",\\n          \\"style-src 'self' 'unsafe-inline'\\",\\n          \\"img-src 'self' https:\\",\\n          \\"object-src 'none'\\",\\n          \\"font-src 'self'\\",\\n          \\"worker-src 'self' blob:\\",\\n          \\"base-uri 'self'\\"\\n        ]\\n      ],\\n      \\"link\\": [\\n        \\"</mfe-application/assets/style.css>; rel=preload; as=style; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.3/dist/micro-lc.production.js>; rel=modulepreload; as=script; nonce=**CSP_NONCE**\\",\\n        \\"<https://cdn.mia-platform.eu/micro-lc/orchestrator/2.4.3/dist/assets/composer.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-web-components.esm.js>; rel=preload; as=fetch; crossorigin\\",\\n        \\"<https://cdn.mia-platform.eu/backoffice/bk-web-components/{{BACK_KIT_VERSION}}/dist/bk-loading-animation.esm.js; rel=preload; as=fetch; crossorigin\\"\\n      ]\\n    }\\n  }\\n}\\n",
                  "name": "config.json"
                }
              ]
            },
            {
              "name": "micro-lc-assets",
              "mountPath": "/usr/static/public/assets",
              "files": [
                {
                  "content": "html,\\nbody {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n}\\n",
                  "name": "style.css"
                }
              ]
            }
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "60Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "links": [
            {
              "label": "Microfrontend Composer",
              "targetSection": "microfrontend-composer",
              "enableIf": "ENABLE_BACKOFFICE_CONFIGURATOR"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/mfe-application": {
          "defaultBasePath": "/mfe-application",
          "defaultPathRewrite": "/public",
          "description": "",
          "type": "custom",
          "tags": [
            "microfrontend"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "micro-lc",
          "listeners": {
            "frontend": true
          }
        },
        "/micro-lc-configurations": {
          "defaultBasePath": "/micro-lc-configurations",
          "defaultPathRewrite": "/configurations",
          "description": "",
          "type": "custom",
          "tags": [
            "backoffice"
          ],
          "public": true,
          "secreted": false,
          "showInDocumentation": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "forceMicroserviceGatewayProxy": false,
          "service": "micro-lc",
          "listeners": {
            "frontend": true
          }
        }
      },
      "unsecretedVariables": {
        "BACK_KIT_VERSION": {
          "productionEnv": "1.5.19",
          "noProductionEnv": "1.5.19"
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-11-30T17:52:19.189Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "microfrontend-composer-toolkit_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "The Microservice Gateway provides the ability to specify HTTP hooks to be invoked before and after each request",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/microservice-gateway/overview"
    },
    "itemId": "microservice-gateway",
    "name": "Microservice Gateway",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/microservice-gateway",
    "resources": {
      "services": {
        "microservice-gateway": {
          "type": "plugin",
          "name": "microservice-gateway",
          "description": "The Microservice Gateway provides the ability to specify HTTP hooks to be invoked before and after each request",
          "dockerImage": "nexus.mia-platform.eu/core/microservice-gateway:6.0.8",
          "componentId": "microservice-gateway",
          "mapEnvVarToMountPath": {
            "microservice-gateway-config": {
              "type": "file",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "DISABLE_STRICT_CONTENT_TYPE_CHECK",
              "value": "false",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "max": "700m",
              "min": "150m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "microservice-gateway-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.0.8",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.025Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "microservice-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "The Microservice Gateway provides the ability to specify HTTP hooks to be invoked before and after each request",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/microservice-gateway/overview"
    },
    "itemId": "microservice-gateway",
    "name": "Microservice Gateway",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/microservice-gateway",
    "resources": {
      "services": {
        "microservice-gateway": {
          "type": "plugin",
          "name": "microservice-gateway",
          "description": "The Microservice Gateway provides the ability to specify HTTP hooks to be invoked before and after each request",
          "dockerImage": "nexus.mia-platform.eu/core/microservice-gateway:6.0.8",
          "componentId": "microservice-gateway",
          "mapEnvVarToMountPath": {
            "microservice-gateway-config": {
              "type": "file",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "DISABLE_STRICT_CONTENT_TYPE_CHECK",
              "value": "false",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "300Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "max": "700m",
              "min": "150m"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "microservice-gateway-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-06-28T10:42:03.677Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "microservice-gateway_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "Stream your MongoDB changes to Kafka",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mongo2kafka/configuration"
    },
    "itemId": "mongo2kafka",
    "name": "Mongo2Kafka",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/mongo2kafka",
    "resources": {
      "services": {
        "mongo2kafka": {
          "type": "plugin",
          "name": "mongo2kafka",
          "description": "Stream your MongoDB changes to Kafka",
          "dockerImage": "nexus.mia-platform.eu/core/mongo2kafka:1.1.2",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "MONGO_URL",
              "value": "CHANGE_WITH_YOUR_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_MONGO_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "MONGO_WATCHED_COLLECTION_LIST",
              "value": "CHANGE_WITH_YOUR_LIST_OF_COLLECTIONS",
              "valueType": "plain"
            },
            {
              "name": "MONGO_BOOKMARK_COLLECTION",
              "value": "resumetoken",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_KEY",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_KEY",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_SECRET",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_SECRET",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PRODUCER_TOPIC",
              "value": "CHANGE_WITH_YOUR_KAFKA_PRODUCER_TOPIC",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.964Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mongo2kafka-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "Stream your MongoDB changes to Kafka",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mongo2kafka/configuration"
    },
    "itemId": "mongo2kafka",
    "name": "Mongo2Kafka",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/mongo2kafka",
    "resources": {
      "services": {
        "mongo2kafka": {
          "type": "plugin",
          "name": "mongo2kafka",
          "description": "Stream your MongoDB changes to Kafka",
          "dockerImage": "nexus.mia-platform.eu/core/mongo2kafka:1.1.2",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "MONGO_URL",
              "value": "CHANGE_WITH_YOUR_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "MONGO_DATABASE_NAME",
              "value": "CHANGE_WITH_YOUR_MONGO_DATABASE_NAME",
              "valueType": "plain"
            },
            {
              "name": "MONGO_WATCHED_COLLECTION_LIST",
              "value": "CHANGE_WITH_YOUR_LIST_OF_COLLECTIONS",
              "valueType": "plain"
            },
            {
              "name": "MONGO_BOOKMARK_COLLECTION",
              "value": "resumetoken",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_KEY",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_KEY",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_SECRET",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_SECRET",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PRODUCER_TOPIC",
              "value": "CHANGE_WITH_YOUR_KAFKA_PRODUCER_TOPIC",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mongo2kafka-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Provide MongoDB aggregation pipelines as REST API.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mongodb-reader/configuration"
    },
    "itemId": "mongodb-reader",
    "name": "MongoDB Reader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/mongodb-reader",
    "resources": {
      "services": {
        "mongodb-reader": {
          "type": "plugin",
          "name": "mongodb-reader",
          "description": "Provide MongoDB aggregation pipelines as REST API.",
          "dockerImage": "nexus.mia-platform.eu/core/mongodb-reader:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.963Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mongodb-reader-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Provide MongoDB aggregation pipelines as REST API.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/mongodb-reader/configuration"
    },
    "itemId": "mongodb-reader",
    "name": "MongoDB Reader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/mongodb-reader",
    "resources": {
      "services": {
        "mongodb-reader": {
          "type": "plugin",
          "name": "mongodb-reader",
          "description": "Provide MongoDB aggregation pipelines as REST API.",
          "dockerImage": "nexus.mia-platform.eu/core/mongodb-reader:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "CHANGE_WITH_YOUR_MONGODB_URL",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "mongodb-reader-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Example of using our Custom Plugin to access the CRUD. \\nIt contains example of tests too.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Call-CRUD-Example/master/README.md"
    },
    "itemId": "node-js-call-crud-example",
    "name": "Node.js Call CRUD Example",
    "resources": {
      "services": {
        "nodejs-call-crud-example": {
          "type": "example",
          "name": "nodejs-call-crud-example",
          "description": "Example of using our Custom Plugin to access the CRUD. \\nIt contains example of tests too.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Call-CRUD-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-crud.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PATH",
              "value": "crud-service",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.082Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-call-crud-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Example of using our Custom Plugin to access the CRUD. \\nIt contains example of tests too.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Call-CRUD-Example/master/README.md"
    },
    "itemId": "node-js-call-crud-example",
    "name": "Node.js Call CRUD Example",
    "resources": {
      "services": {
        "nodejs-call-crud-example": {
          "type": "example",
          "name": "nodejs-call-crud-example",
          "description": "Example of using our Custom Plugin to access the CRUD. \\nIt contains example of tests too.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Call-CRUD-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-crud.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PATH",
              "value": "crud-service",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:46:40.409Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-call-crud-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Example of using our Custom Plugin to access Mongo. \\nIt contains example of tests too.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Custom-Plugin-Mongo-Example/master/README.md"
    },
    "itemId": "node-js-custom-plugin-with-mongo-example",
    "name": "Node.js Custom Plugin with Mongo Example",
    "resources": {
      "services": {
        "nodejs-custom-plugin-with-mongo-example": {
          "type": "example",
          "name": "nodejs-custom-plugin-with-mongo-example",
          "description": "Example of using our Custom Plugin to access Mongo. \\nIt contains example of tests too.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Custom-Plugin-Mongo-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-mongo.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.081Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-custom-plugin-with-mongo-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Example of using our Custom Plugin to access Mongo. \\nIt contains example of tests too.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Custom-Plugin-Mongo-Example/master/README.md"
    },
    "itemId": "node-js-custom-plugin-with-mongo-example",
    "name": "Node.js Custom Plugin with Mongo Example",
    "resources": {
      "services": {
        "nodejs-custom-plugin-with-mongo-example": {
          "type": "example",
          "name": "nodejs-custom-plugin-with-mongo-example",
          "description": "Example of using our Custom Plugin to access Mongo. \\nIt contains example of tests too.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Custom-Plugin-Mongo-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-mongo.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:48:17.090Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-custom-plugin-with-mongo-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "A Node.js basic template to start developing a daemon service.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/node.js-daemon-template/main/README.md"
    },
    "itemId": "node-js-daemon-template",
    "name": "Node.js Daemon Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/node.js-daemon-template",
    "resources": {
      "services": {
        "nodejs-daemon-template": {
          "type": "template",
          "name": "nodejs-daemon-template",
          "description": "A Node.js basic template to start developing a daemon service.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/node.js-daemon-template/archive/main.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.864Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-daemon-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "A Node.js basic template to start developing a daemon service.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/node.js-daemon-template/main/README.md"
    },
    "itemId": "node-js-daemon-template",
    "name": "Node.js Daemon Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/node.js-daemon-template",
    "resources": {
      "services": {
        "nodejs-daemon-template": {
          "type": "template",
          "name": "nodejs-daemon-template",
          "description": "A Node.js basic template to start developing a daemon service.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/node.js-daemon-template/archive/main.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-06-09T16:11:46.097Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-daemon-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Flow Manager Client Node.js 16 Template",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Flow-Manager-Client-Template/refs/heads/16.x/README.md"
    },
    "itemId": "node-js-flow-manager-client",
    "name": "Node.js 16 Flow Manager Client",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Node.js-Flow-Manager-Client-Template/tree/16.x",
    "resources": {
      "services": {
        "nodejs-16-flow-manager-client": {
          "type": "template",
          "name": "nodejs-16-flow-manager-client",
          "description": "Flow Manager Client Node.js 16 Template",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Flow-Manager-Client-Template/archive/refs/heads/16.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE_WITH_YOUR_KAFKA_BROKERS_LIST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_COMMANDS_TOPIC_NAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_COMMANDS_TOPIC_NAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_EVENTS_TOPIC_NAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_EVENTS_TOPIC_NAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "SCRAM-256",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.009Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-flow-manager-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "Flow Manager Client Node.js 16 Template",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Flow-Manager-Client-Template/refs/heads/16.x/README.md"
    },
    "itemId": "node-js-flow-manager-client",
    "name": "Node.js 16 Flow Manager Client",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Node.js-Flow-Manager-Client-Template/tree/16.x",
    "resources": {
      "services": {
        "nodejs-16-flow-manager-client": {
          "type": "template",
          "name": "nodejs-16-flow-manager-client",
          "description": "Flow Manager Client Node.js 16 Template",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Flow-Manager-Client-Template/archive/refs/heads/16.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE_WITH_YOUR_KAFKA_BROKERS_LIST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE_WITH_YOUR_KAFKA_GROUP_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_COMMANDS_TOPIC_NAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_COMMANDS_TOPIC_NAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_EVENTS_TOPIC_NAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_EVENTS_TOPIC_NAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "SCRAM-256",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-11-15T17:35:10.281Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-flow-manager-client.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Example of a simple Node.js 16 application. \\nIt contains example of tests too.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Hello-World-Microservice-Example/refs/heads/16.x/README.md"
    },
    "itemId": "node-js-helloworld-microservice-example",
    "name": "Node.js 16 HelloWorld Microservice Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Node.js-Hello-World-Microservice-Example/tree/16.x",
    "resources": {
      "services": {
        "nodejs-16-helloworld-microservice-example": {
          "type": "example",
          "name": "nodejs-16-helloworld-microservice-example",
          "description": "Example of a simple Node.js 16 application. \\nIt contains example of tests too.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Hello-World-Microservice-Example/archive/refs/heads/16.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-hello-world.gitlab-ci.yml/raw"
            },
            "webhook": {
              "url": "https://example.com",
              "token": "test-token"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.039Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-helloworld-microservice-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Example of a simple Node.js 16 application. \\nIt contains example of tests too.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Hello-World-Microservice-Example/refs/heads/16.x/README.md"
    },
    "itemId": "node-js-helloworld-microservice-example",
    "name": "Node.js 16 HelloWorld Microservice Example",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Node.js-Hello-World-Microservice-Example/tree/16.x",
    "resources": {
      "services": {
        "nodejs-16-helloworld-microservice-example": {
          "type": "example",
          "name": "nodejs-16-helloworld-microservice-example",
          "description": "Example of a simple Node.js 16 application. \\nIt contains example of tests too.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Hello-World-Microservice-Example/archive/refs/heads/16.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-hello-world.gitlab-ci.yml/raw"
            },
            "webhook": {
              "url": "https://example.com",
              "token": "test-token"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:44:46.459Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-helloworld-microservice-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "This is the best template to start creating a service in Node.js 16 integrated inside the platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Custom-Plugin-Template/refs/heads/16.x/README.md"
    },
    "itemId": "node-js-template",
    "name": "Node.js 16 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Node.js-Custom-Plugin-Template/tree/16.x",
    "resources": {
      "services": {
        "nodejs-16-template": {
          "type": "template",
          "name": "nodejs-16-template",
          "description": "This is the best template to start creating a service in Node.js 16 integrated inside the platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Custom-Plugin-Template/archive/refs/heads/16.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.010Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "This is the best template to start creating a service in Node.js 16 integrated inside the platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-Custom-Plugin-Template/refs/heads/16.x/README.md"
    },
    "itemId": "node-js-template",
    "name": "Node.js 16 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Node.js-Custom-Plugin-Template/tree/16.x",
    "resources": {
      "services": {
        "nodejs-16-template": {
          "type": "template",
          "name": "nodejs-16-template",
          "description": "This is the best template to start creating a service in Node.js 16 integrated inside the platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-Custom-Plugin-Template/archive/refs/heads/16.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-25T08:56:54.353Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "node-js-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "The Notification Manager provides an HTTP and Kafka interface to send notifications to users through various channels, namely e-mail, SMS, push notification, voice and whatsapp.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/notification-manager/overview"
    },
    "itemId": "notification-manager-service",
    "name": "Notification Manager Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/notification-manager",
    "resources": {
      "services": {
        "notification-manager-service": {
          "type": "plugin",
          "name": "notification-manager-service",
          "description": "The Notification Manager provides an HTTP and Kafka interface to send notifications to users through various channels, namely e-mail, SMS, push notification, voice and whatsapp.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/notification-manager:2.4.3",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_CRUD_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_SETTINGS_CRUD_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_CRUD_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_SETTINGS_CRUD_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_MESSAGES_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "Require MongoDB view, otherwise remove the env var"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "120Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.4.3",
      "releaseNote": "Add optional notification messages (MongoDB view required), fix several reminder bugs related to both scheduling and aborting, fix logs potentially leaking sensitive information"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.533Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "notification-manager-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "The Notification Manager provides an HTTP and Kafka interface to send notifications to users through various channels, namely e-mail, SMS, push notification, voice and whatsapp.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/notification-manager/overview"
    },
    "itemId": "notification-manager-service",
    "name": "Notification Manager Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/notification-manager",
    "resources": {
      "services": {
        "notification-manager-service": {
          "type": "plugin",
          "name": "notification-manager-service",
          "description": "The Notification Manager provides an HTTP and Kafka interface to send notifications to users through various channels, namely e-mail, SMS, push notification, voice and whatsapp.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/notification-manager:2.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_SETTINGS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_SETTINGS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "120Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.3.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.025Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "notification-manager-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "The Notification Manager provides an HTTP and Kafka interface to send notifications to users through various channels, namely e-mail, SMS, push notification, voice and whatsapp.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/notification-manager/overview"
    },
    "itemId": "notification-manager-service",
    "name": "Notification Manager Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/notification-manager",
    "resources": {
      "services": {
        "notification-manager-service": {
          "type": "plugin",
          "name": "notification-manager-service",
          "description": "The Notification Manager provides an HTTP and Kafka interface to send notifications to users through various channels, namely e-mail, SMS, push notification, voice and whatsapp.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/notification-manager:2.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_SETTINGS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_SETTINGS_CRUD_NAME",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "120Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-15T18:43:24.673Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "notification-manager-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "healthcare",
    "description": "This application allows to quickly setup the necessary services in order to send messages, across the most widely used notification channels (email, sms, push, voice, whatsapp).",
    "itemId": "notification-module",
    "name": "Notification Module",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/applications/notification-module",
    "resources": {
      "collections": {
        "nm_fs_files": {
          "defaultName": "nm_fs_files",
          "description": "File Service files",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "original file name",
              "name": "name",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "size in bytes of the uploaded file",
              "name": "size",
              "nullable": false,
              "required": false,
              "type": "number"
            },
            {
              "description": "the URL that can be used to download the file using the same service that performed the upload",
              "name": "location",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "unique name of the file that should be used to retrieve it using this service",
              "name": "file",
              "nullable": false,
              "required": false,
              "type": "string"
            }
          ],
          "id": "nm_fs_files",
          "internalEndpoints": [
            {
              "basePath": "/files",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_nm_event_settings": {
          "defaultName": "nm_nm_event_settings",
          "description": "Notification Manager event settings",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "eventName",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "userGroups",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "supportedChannels",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "eventSchema",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "handlerName",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "handlerConfig",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            }
          ],
          "id": "nm_nm_event_settings",
          "internalEndpoints": [
            {
              "basePath": "/event-settings",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_nm_events": {
          "defaultName": "nm_nm_events",
          "description": "Notification Manager events",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "id",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "key",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "metadata",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "payload",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "source",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "status",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "errors",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            }
          ],
          "id": "nm_nm_events",
          "internalEndpoints": [
            {
              "basePath": "/events",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_nm_notification_settings": {
          "defaultName": "nm_nm_notification_settings",
          "description": "Notification Manager notification settings",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "eventName",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "user",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "group",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "cluster",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "role",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "channels",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "hours",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "description": "The name of the template used for the notification settings",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "templateName",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "rule",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emitters",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "reminders",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            }
          ],
          "id": "nm_nm_notification_settings",
          "internalEndpoints": [
            {
              "basePath": "/notification-settings",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_nm_notifications": {
          "defaultName": "nm_nm_notifications",
          "description": "Notification Manager notifications",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "event",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "recipient",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "ObjectId"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "messages",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "failures",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "reminders",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            }
          ],
          "id": "nm_nm_notifications",
          "internalEndpoints": [
            {
              "basePath": "/notifications",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_nm_templates": {
          "defaultName": "nm_nm_templates",
          "description": "Notification Manager message templates",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "name",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "emailTitle",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailHtmlMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailAttachments",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "pushTitle",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "pushSubtitle",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "pushMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "pushData",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "name": "smsMessage",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "emailJsonTemplate",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "voiceMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "whatsappTemplateName",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "whatsappTemplateParameters",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "nm_nm_templates",
          "internalEndpoints": [
            {
              "basePath": "/templates",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_nm_users": {
          "defaultName": "nm_nm_users",
          "description": "Notification Manager users",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "auth service user id associated to a specific user",
              "name": "id",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "clusters",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "groups",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "roles",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "name": "emailAddress",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "phoneNumber",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceToken",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "First name",
              "name": "firstName",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "Last name",
              "name": "lastName",
              "nullable": false,
              "required": false,
              "type": "string"
            }
          ],
          "id": "nm_nm_users",
          "internalEndpoints": [
            {
              "basePath": "/users",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "nm_ts_reminders": {
          "defaultName": "nm_ts_reminders",
          "description": "Timer Service reminders",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "payload",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            },
            {
              "name": "startDate",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "name": "expirationIntervalMs",
              "nullable": false,
              "required": true,
              "type": "number"
            },
            {
              "name": "applicantService",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "outputMode",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            },
            {
              "name": "expirationDate",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "name": "failureCount",
              "nullable": false,
              "required": false,
              "type": "number"
            },
            {
              "name": "expirationStatus",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            }
          ],
          "id": "nm_ts_reminders",
          "internalEndpoints": [
            {
              "basePath": "/reminders",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/attachments": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/attachments",
          "defaultPathRewrite": "/",
          "description": "Endpoint /attachments",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "files-service",
          "tags": [
            "files-service"
          ],
          "type": "custom"
        },
        "/notification-manager": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/notification-manager",
          "defaultPathRewrite": "/",
          "description": "Endpoint /notification-manager",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "notification-manager",
          "tags": [
            "notification-manager"
          ],
          "type": "custom"
        }
      },
      "services": {
        "api-gateway": {
          "additionalContainers": [
            {
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultEnvironmentVariables": [
                {
                  "name": "LOG_LEVEL",
                  "value": "{{LOG_LEVEL}}",
                  "valueType": "plain"
                },
                {
                  "name": "TRUSTED_PROXIES",
                  "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
                  "valueType": "plain"
                },
                {
                  "name": "HTTP_PORT",
                  "value": "3000",
                  "valueType": "plain"
                },
                {
                  "name": "USERID_HEADER_KEY",
                  "value": "miauserid",
                  "valueType": "plain"
                },
                {
                  "name": "GROUPS_HEADER_KEY",
                  "value": "miausergroups",
                  "valueType": "plain"
                },
                {
                  "name": "CLIENTTYPE_HEADER_KEY",
                  "value": "client-type",
                  "valueType": "plain"
                },
                {
                  "name": "BACKOFFICE_HEADER_KEY",
                  "value": "isbackoffice",
                  "valueType": "plain"
                },
                {
                  "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
                  "value": "microservice-gateway",
                  "valueType": "plain"
                },
                {
                  "name": "USER_PROPERTIES_HEADER_KEY",
                  "value": "miauserproperties",
                  "valueType": "plain"
                }
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              },
              "defaultResources": {
                "cpuLimits": {
                  "min": "10m"
                },
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                }
              },
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "name": "dnsmasq"
            }
          ],
          "componentId": "api-gateway",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "mountPath": "/etc/nginx/conf.d",
              "name": "api-gateway-server",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/platform.d",
              "name": "api-gateway-platform",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/nginx/customization.d",
              "name": "api-gateway-customization",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/backoffice.d",
              "name": "api-gateway-backoffice",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend"
            },
            "readiness": {
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "name": "api-gateway",
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "url",
              "secretName": "mongodb",
              "valueType": "secret"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mongodb",
              "name": "mongodb"
            }
          ],
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:{{CRUD_SERVICE_VERSION}}",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "email-service": {
          "componentId": "email-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "SES_SECRET",
              "secretKey": "ses-secret",
              "secretName": "email-service",
              "valueType": "secret"
            },
            {
              "name": "SES_KEY",
              "secretKey": "ses-key",
              "secretName": "email-service",
              "valueType": "secret"
            },
            {
              "name": "SES_REGION",
              "secretKey": "ses-region",
              "secretName": "email-service",
              "valueType": "secret"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "75m",
              "min": "25m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "50Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mlp",
              "name": "email-service"
            }
          ],
          "dockerImage": "nexus.mia-platform.eu/plugins/ses-mail-notification-service:{{EMAIL_SERVICE_VERSION}}",
          "name": "email-service",
          "type": "plugin"
        },
        "files-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{\\"type\\":\\"mongodb\\",\\"options\\":{\\"url\\":\\"{{MONGODB_URL}}\\",\\"bucketName\\":\\"demofilesbucket\\"}}",
                  "name": "config.json"
                }
              ],
              "mountPath": "/home/node/app/configs",
              "name": "fs-config",
              "viewAsReadOnly": false
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/files/",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "/v1/files/",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "200Mi",
              "min": "70Mi"
            }
          },
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:{{FILES_SERVICE_VERSION}}",
          "name": "files-service",
          "type": "plugin"
        },
        "notification-manager": {
          "componentId": "notification-manager",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{\\"userFields\\":{\\"emailAddress\\":\\"email\\",\\"phoneNumber\\":\\"mobilePhone\\"},\\"activeChannels\\":[\\"whatsapp\\",\\"voice\\",\\"push\\",\\"email\\",\\"sms\\"],\\"sender\\":{\\"email\\":\\"{{EMAIL_SENDER}}\\",\\"sms\\":\\"{{SMS_SENDER}}\\",\\"voice\\":\\"{{VOICE_SENDER}}\\",\\"whatsappPhoneNumberId\\":\\"{{WHATSAPP_SENDER}}\\"},\\"voice\\":{\\"retryCount\\":0,\\"speechSpeed\\":\\"medium\\",\\"speechLanguage\\":\\"it-IT\\"},\\"push\\":{\\"provider\\":\\"firebase\\"}}",
                  "name": "default.json"
                }
              ],
              "mountPath": "/home/node/app/configs",
              "name": "nm-config",
              "viewAsReadOnly": false
            },
            {
              "files": [
                {
                  "content": "const crypto = require('crypto')\\n\\nmodule.exports = async function handler(service, event, utils) {\\n  const {proxies, config, log: logger} = service\\n  const {TEMPLATES_CRUD_NAME} = config\\n\\n  logger.info({event}, 'Received event')\\n\\n  const {payload} = event\\n  const {recipient, channel, templateName, emailObject, emailHtmlMessage, messageContent} = payload\\n\\n  const [user] = await utils.getRecipients(service, {ids: [recipient]})\\n  if (!user) {\\n    logger.warn({recipient}, 'User not found')\\n    return []\\n  }\\n  logger.info({user}, 'User found')\\n\\n  // Send email or sms using template\\n  if (templateName) {\\n    logger.info({templateName}, 'Sending notification using template')\\n    const notification = await utils.sendMessages(service, event, user, [{channel, templateName}])\\n    return [notification]\\n  }\\n\\n  // Send email or sms using custom fields\\n  logger.info({emailObject, emailHtmlMessage, messageContent}, 'Sending notification using custom fields')\\n  const tempTemplateName = crypto.randomUUID().toString()\\n  const tempTemplate = {\\n    name: tempTemplateName,\\n    ...(emailObject && {emailTitle: emailObject}),\\n    ...(emailHtmlMessage && {emailHtmlMessage}),\\n    ...(messageContent && {smsMessage: messageContent}),\\n  }\\n  const {payload: {_id: tempTemplateId}} = await proxies.crudProxy.post(\`/\${TEMPLATES_CRUD_NAME}/\`, tempTemplate)\\n  logger.info({_id: tempTemplateId, template: tempTemplate}, 'Created temporary template')\\n  const notification = await utils.sendMessages(service, event, user, [{channel, templateName: tempTemplateName}])\\n  await proxies.crudProxy.delete(\`/\${TEMPLATES_CRUD_NAME}/\${tempTemplateId}\`, {}, {returnAs: 'BUFFER'})\\n  logger.info({_id: tempTemplateId}, 'Deleted temporary template')\\n  return [notification]\\n}\\n",
                  "name": "paginaNotifiche.js"
                },
                {
                  "content": "module.exports = async function handler(service, event, utils) {\\n  const { config, log: logger, configMap: configuration, proxies } = service\\n  const { TEMPLATES_CRUD_NAME } = config\\n  const { payload } = event\\n  const { eventName, templateName, recipient: usersGroup, channels } = payload\\n  logger.debug({event}, 'Receive event')\\n\\n  // retrieve users with group\\n  const users = await utils.getRecipients(service, { groups: [usersGroup] })\\n  logger.debug({ users: users.length }, 'Retrieve users')\\n  // retrieve template\\n  const { payload: templates } = await get(\\n    proxies.crudProxy,\\n    TEMPLATES_CRUD_NAME,\\n    { name: templateName },\\n    logger\\n  )\\n  logger.debug({ templates: templates[0] }, 'Fetched template')\\n  const [template] = templates\\n  \\n  // for each user send messages to all channels in template\\n  const notifications = users.map(async (user) => {\\n    const messages = []\\n    if (isEmailChannel(channels, template, configuration)) {\\n      messages.push({channel: 'email', templateName})\\n      logger.debug('Send email')\\n    }\\n    if (isPushChannel(channels, template, configuration)) {\\n      messages.push({channel: 'push', templateName})\\n      logger.debug('Send push notification')\\n    }\\n    if (isSmsChannel(channels, template, configuration)) {\\n      messages.push({channel: 'sms', templateName})\\n      logger.debug('Send sms')\\n    }\\n    if (isVoiceChannel(channels, template, configuration)) {\\n      messages.push({channel: 'voice', templateName})\\n      logger.debug('Send voice message')\\n    }\\n    if (isWhatsappChannel(channels, template, configuration)) {\\n      messages.push({channel: 'whatsapp', templateName})\\n      logger.debug('Send whatsapp message')\\n    }\\n    const eventWithCustomName = {\\n      ...event,\\n      name: eventName,\\n    }\\n    const messagesNotification = await utils.sendMessages(service, eventWithCustomName, user, messages)\\n    return utils.mergeNotifications(service, event, user, [messagesNotification])\\n  })\\n  return awaitAll(notifications, event, users)\\n}\\n\\nasync function get(crudProxy, crudCollection, query, logger) {\\n  const path = \`/\${crudCollection}/\`\\n  logger.trace({ query }, \`Start GET \${path}\`)\\n  const response = await crudProxy.get(path, { query })\\n  logger.trace(\\n    { statusCode: response.statusCode, payload: response.payload?.length },\\n    \`End GET \${path}\`\\n  )\\n  return response\\n}\\n\\nfunction isChannelActive(channel, configuration) {\\n  return configuration.activeChannels?.includes(channel)\\n}\\n\\nfunction isEmailChannel(channels, template, configuration) {\\n  const { emailTitle, emailHtmlMessage, emailMessage, emailAttachments } = template\\n  return (\\n    channels.includes('email') && isChannelActive('email', configuration) &&\\n    (emailTitle || emailHtmlMessage || emailMessage || emailAttachments)\\n  )\\n}\\n\\nfunction isPushChannel(channels, template, configuration) {\\n  const { pushTitle, pushSubtitle, pushMessage, pushData } = template\\n  return (\\n    channels.includes('push') && isChannelActive('push', configuration) && (pushTitle || pushSubtitle || pushMessage || pushData)\\n  )\\n}\\n\\nfunction isSmsChannel(channels, template, configuration) {\\n  const { smsMessage } = template\\n  return channels.includes('sms') && isChannelActive('sms', configuration) && smsMessage\\n}\\n\\nfunction isVoiceChannel(channels, template, configuration) {\\n  const { voiceMessage } = template\\n  return channels.includes('voice') && isChannelActive('voice', configuration) && voiceMessage\\n}\\n\\nfunction isWhatsappChannel(channels, template, configuration) {\\n  const { whatsappTemplateName, whatsappTemplateParameters } = template\\n  return (\\n    channels.includes('whatsapp') && isChannelActive('whatsapp', configuration) &&\\n    (whatsappTemplateName || whatsappTemplateParameters)\\n  )\\n}\\n\\nasync function awaitAll(userNotifications, event, users) {\\n  return (await Promise.allSettled(userNotifications)).map((userNotification, index) => {\\n    return userNotification.status === 'fulfilled' ?\\n      userNotification.value :\\n      {\\n        event,\\n        recipient: users[index].id,\\n        failures: [userNotification.reason.message || userNotification.reason.payload || JSON.stringify(userNotification.reason)],\\n      }\\n  })\\n}",
                  "name": "paginaEventi.js"
                },
                {
                  "content": "const { DateTime } = require('luxon')\\n\\nmodule.exports = async function handler(service, event, utils) {\\n  const { log: logger } = service\\n  const { payload: monitoring, metadata } = event\\n  if (!monitoring) {\\n    const message = 'Cannot process the event since monitoring payload is missing'\\n    logger.error({ event }, message)\\n    throw new Error(message)\\n  }\\n\\n  // Se nel monitoring è definito hours usare nome dell'evento custom MultiDailyMonitoringReminder\\n  const reminderEvent = {\\n    ...event,\\n    name: monitoring.hours ? 'MultiDailyMonitoringReminder' : 'TMM/MonitoringReminder/v1',\\n  }\\n\\n  const { doctorId, patientId } = monitoring\\n  const participants = new Set([doctorId, patientId])\\n  metadata?.includeUsers?.forEach((participant) => participants.add(participant))\\n  metadata?.excludeUsers?.forEach((participant) => participants.delete(participant))\\n\\n  const users = await utils.getRecipients(service, { ids: Array.from(participants) })\\n  logger.debug({ users: users.length }, 'Fetched participants')\\n\\n  const notifications = users.map(async (recipient) => {\\n    const userNotifications = []\\n    const notificationSettings = await utils.getNotificationSettings(service, event, recipient)\\n    const mergedNotificationSettings = utils.mergeNotificationSettings(\\n      service,\\n      notificationSettings\\n    )\\n    const messagesToSend = utils.buildMessages(service, mergedNotificationSettings)\\n    const messagesNotification = await utils.sendMessages(service, event, recipient, messagesToSend)\\n    userNotifications.push(messagesNotification)\\n\\n    logger.debug({ messagesNotification: messagesNotification.length }, 'messagesNotification')\\n\\n    const nextRemindersDateTimes = getMultipleDailyReminderEvents(monitoring)\\n\\n    logger.debug({ monitoring }, 'monitoring')\\n    logger.debug({ nextRemindersDateTimes }, 'nextRemindersDateTimes')\\n\\n    if (nextRemindersDateTimes.length) {\\n      const reminderNotificationsPromises = nextRemindersDateTimes.map(nextReminderDateTime => {\\n        const notificationReminder = utils.buildReminders(\\n          service,\\n          recipient,\\n          mergedNotificationSettings,\\n          nextReminderDateTime\\n        )\\n        logger.debug({ notificationReminder }, 'notificationReminder')\\n\\n        return utils.setReminders(\\n          service,\\n          reminderEvent,\\n          recipient,\\n          notificationReminder\\n        )\\n      })\\n\\n      const reminderNotifications = await Promise.all(reminderNotificationsPromises)\\n      reminderNotifications.forEach(reminderNotification => userNotifications.push(reminderNotification))\\n    }\\n\\n    logger.debug({ userNotifications }, 'userNotifications')\\n    return utils.mergeNotifications(service, event, recipient, userNotifications)\\n  })\\n\\n  return awaitAll(notifications, event, users)\\n}\\n\\n/**\\n * Return a ISO 8601 date-time string representing the given date/time in a given time zone (default: UTC)\\n * @param {DateTime} dateTime Date/time\\n * @param {string} timeZone A time zone (see https://moment.github.io/luxon/#/zones?id=specifying-a-zone for a list of supported values)\\n * @returns {string} A ISO 8601 date-time string representing the given date/time in the given time zone (default: UTC)\\n */\\nconst toISO = (dateTime, timeZone = 'utc') => dateTime.setZone(timeZone).toISO()\\n\\n/**\\n * Convert a string representing an ISO 8601 date-time into a UTC date/time object\\n * @param {string} isoDateTime ISO 8601 date-time string\\n * @returns {DateTime} A UTC date/time object\\n */\\nconst fromISOtoUTC = (isoDateTime) => DateTime.fromISO(isoDateTime, { zone: 'utc' })\\n\\n/**\\n * Returns current date/time in UTC\\n * @returns {DateTime} Current date/time in UTC\\n */\\nconst currentDateTime = () => DateTime.utc()\\n\\n/**\\n * Return the next event, at least one day from now, of the monitoring plan\\n *\\n * @param {Monitoring | Therapy} monitoring A monitoring or therapy plan\\n * @returns {string | undefined} Next day of the monitoring or therapy plan, if available, undefined otherwise\\n */\\nfunction getNextReminderEvent(monitoring) {\\n  const { each, startDate, endDate } = monitoring\\n  if (each && each.length > 0) {\\n    const sendAfter = currentDateTime().endOf('day')\\n    let sendAt = fromISOtoUTC(startDate).startOf('day')\\n    while (sendAt < sendAfter) {\\n      sendAt = sendAt.plus({ day: 1 })\\n    }\\n    if (!each?.includes('day')) {\\n      const allowedWeekDays = each?.map((weekDay) => luxonWeekDays.get(weekDay))\\n      while (!allowedWeekDays?.includes(sendAt.weekday)) {\\n        sendAt = sendAt.plus({ day: 1 })\\n      }\\n    }\\n    if (!endDate || sendAt < fromISOtoUTC(endDate)) {\\n      return toISO(sendAt)\\n    }\\n  }\\n}\\n\\n/**\\n * Return the list of next events, at least one day from now, of the monitoring plan\\n *\\n * @param {Monitoring | Therapy} monitoring A monitoring or therapy plan\\n * @returns {string | undefined} Next day of the monitoring or therapy plan, if available, undefined otherwise\\n */\\nfunction getMultipleDailyReminderEvents(monitoring) {\\n  const { each, startDate, endDate, hours } = monitoring\\n\\n  if (!each || each.length === 0) {\\n    return []\\n  }\\n\\n  const reminderEventsDateTimes = []\\n  if (!hours || hours.length === 0) {\\n    console.log('hours is not defined')\\n    const nextReminderEvent = getNextReminderEvent(monitoring)\\n    console.log(nextReminderEvent, 'the next reminder event, hours is not defined')\\n    return nextReminderEvent ? [nextReminderEvent] : []\\n  }\\n\\n  console.log('hours is defined')\\n  hours.forEach((reminderHour) => {\\n    const sendAfter = currentDateTime().endOf('day')\\n    console.log({ reminderHour }, 'inside hours loop, print one reminder hour')\\n    const [hour, minute] = reminderHour.split(':').map(Number)\\n    console.log({ hour, minute }, 'hours and minutes')\\n\\n    let sendAt = fromISOtoUTC(startDate).set({ hour, minute })\\n\\n    while (sendAt < sendAfter) {\\n      sendAt = sendAt.plus({ day: 1 })\\n    }\\n    if (!each?.includes('day')) {\\n      const allowedWeekDays = each?.map((weekDay) => luxonWeekDays.get(weekDay))\\n      while (!allowedWeekDays?.includes(sendAt.weekday)) {\\n        sendAt = sendAt.plus({ day: 1 })\\n      }\\n    }\\n    if (!endDate || sendAt < fromISOtoUTC(endDate)) {\\n      reminderEventsDateTimes.push(toISO(sendAt))\\n    }\\n  })\\n  return reminderEventsDateTimes\\n}\\n\\nasync function awaitAll(userNotifications, event, users) {\\n  return (await Promise.allSettled(userNotifications)).map((userNotification, index) => {\\n    return userNotification.status === 'fulfilled'\\n      ? userNotification.value\\n      : {\\n          event,\\n          recipient: users[index].id,\\n          failures: [\\n            userNotification.reason.message ||\\n              userNotification.reason.payload ||\\n              JSON.stringify(userNotification.reason),\\n          ],\\n        }\\n  })\\n}\\n\\nconst luxonWeekDays = new Map([\\n  ['monday', 1],\\n  ['tuesday', 2],\\n  ['wednesday', 3],\\n  ['thursday', 4],\\n  ['friday', 5],\\n  ['saturday', 6],\\n  ['sunday', 7],\\n])\\n",
                  "name": "customMonitoringCreated.js"
                },
                {
                  "content": "const {DateTime} = require('luxon')\\n\\nmodule.exports = async function handler(service, event, utils) {\\n  const {log: logger} = service\\n  const {payload: monitoring, metadata} = event\\n  if (!monitoring) {\\n    const message = 'Cannot process the event since monitoring payload is missing'\\n    logger.error({event}, message)\\n    throw new Error(message)\\n  }\\n\\n  const recipients = metadata?.reminder?.recipients || []\\n  const schedule = metadata?.reminder?.schedule\\n  const oldExpirationDatetime = metadata?.reminder.expirationDate\\n  if (recipients.length === 0) return []\\n\\n  const users = await utils.getRecipients(service, {ids: Array.from(recipients)})\\n  logger.debug({users: users.length}, 'Fetched participants')\\n\\n  const nextMonitoringEvent = getNextReminderWithHourEvent(monitoring, oldExpirationDatetime)\\n  logger.debug({nextMonitoringEvent}, 'Next reminder to schedule')\\n\\n  const notifications = users.map(async recipient => {\\n    const notificationSettings = (await utils.getNotificationSettings(service, event, recipient))\\n      .filter(setting => !schedule || setting.reminders?.includes(schedule))\\n\\n    const mergedNotificationSettings = utils.mergeNotificationSettings(service, notificationSettings)\\n    const messagesToSend = utils.buildMessages(service, mergedNotificationSettings)\\n    logger.debug({messagesToSend}, 'messagesToSend')\\n\\n    const messagesNotification = await utils.sendMessages(service, event, recipient, messagesToSend)\\n    logger.debug({messagesNotification}, 'messagesNotification')\\n\\n    const userNotifications = [messagesNotification]\\n\\n    if (nextMonitoringEvent) {\\n      const nextReminder = buildNextDatetimeReminder(service, recipient, nextMonitoringEvent)\\n      const reminderNotifications = await utils.setReminders(service, event, recipient, [nextReminder])\\n      logger.debug({ reminderNotifications }, 'reminderNotifications')\\n      \\n      userNotifications.push(reminderNotifications)\\n    }\\n\\n    logger.debug({ userNotifications }, 'userNotifications')\\n    return utils.mergeNotifications(service, event, recipient, userNotifications)\\n  })\\n\\n  return awaitAll(notifications, event, users)\\n}\\n\\n\\n/**\\n * Return a ISO 8601 date-time string representing the given date/time in a given time zone (default: UTC)\\n * @param {DateTime} dateTime Date/time\\n * @param {string} timeZone A time zone (see https://moment.github.io/luxon/#/zones?id=specifying-a-zone for a list of supported values)\\n * @returns {string} A ISO 8601 date-time string representing the given date/time in the given time zone (default: UTC)\\n */\\nconst toISO = (dateTime, timeZone = 'utc') => dateTime.setZone(timeZone).toISO()\\n\\n/**\\n * Convert a string representing an ISO 8601 date-time into a UTC date/time object\\n * @param {string} isoDateTime ISO 8601 date-time string\\n * @returns {DateTime} A UTC date/time object\\n */\\nconst fromISOtoUTC = (isoDateTime) => DateTime.fromISO(isoDateTime, {zone: 'utc'})\\n\\n/**\\n * Returns current date/time in UTC\\n * @returns {DateTime} Current date/time in UTC\\n */\\nconst currentDateTime = () => DateTime.utc()\\n\\n\\n/**\\n * Return the next event, at least one day from now, of the monitoring plan, at the specified hour and minute\\n *\\n * @param {Monitoring | Therapy} monitoring A monitoring or therapy plan\\n * @param {string} oldExpirationDatetime the expiration datetime of the current reminder\\n * @returns {string | undefined} Next day of the monitoring or therapy plan, if available, undefined otherwise\\n */\\nfunction getNextReminderWithHourEvent(monitoring, oldExpirationDatetime) {\\n  const {each, endDate, hours} = monitoring\\n  if (!each || each.length === 0) {\\n    return\\n  }\\n  if (!hours || hours.length === 0) {\\n    console.log('hours is not defined')\\n    return\\n  }\\n\\n  if (each && each.length > 0) {\\n    const sendAfter = currentDateTime().endOf('day')\\n    let sendAt = fromISOtoUTC(oldExpirationDatetime)\\n    console.log({oldExpirationDatetime}, 'oldExpirationDatetime')\\n\\n    while (sendAt < sendAfter) {\\n      sendAt = sendAt.plus({day: 1})\\n    }\\n    if (!each?.includes('day')) {\\n      const allowedWeekDays = each?.map(weekDay => luxonWeekDays.get(weekDay))\\n      while (!allowedWeekDays?.includes(sendAt.weekday)) {\\n        sendAt = sendAt.plus({day: 1})\\n      }\\n    }\\n    console.log({sendAt}, 'sendAt - before returning the next reminder')\\n\\n    if (!endDate || sendAt < fromISOtoUTC(endDate)) {\\n      return toISO(sendAt)\\n    }\\n  }\\n}\\n\\n/**\\n * It builds the reminder for the next expirationDateTime\\n *\\n * @param {customPlugin.DecoratedFastify} service The decorated Fastify instance\\n * @param {CrudRecipient} user User details about the notification recipient\\n * @param {string} eventDateTime The scheduled date-time of the event\\n * @returns {NotificationReminder} The reminder specifications\\n */\\nconst buildNextDatetimeReminder = (service, user, eventDateTime) => {\\n  const {log: logger} = service\\n  const reminder = {\\n    schedule: 'PT0S',\\n    expirationDate: eventDateTime,\\n    recipients: [user.id],\\n    triggers: [],\\n  } \\n  logger.debug({reminder}, \`Built one reminder\`)\\n  return reminder\\n}\\n\\nasync function awaitAll(userNotifications, event, users) {\\n  return (await Promise.allSettled(userNotifications)).map((userNotification, index) => {\\n    return userNotification.status === 'fulfilled' ?\\n      userNotification.value :\\n      {\\n        event,\\n        recipient: users[index].id,\\n        failures: [userNotification.reason.message || userNotification.reason.payload || JSON.stringify(userNotification.reason)],\\n      }\\n  })\\n}\\n\\n/**\\n * Schedule the reminder for the given event and user and return a notification with the details\\n *\\n * @async\\n * @param {customPlugin.DecoratedFastify} service the decorated fastify instance\\n * @param {CrudEvent} event the notification event\\n * @param {CrudRecipient} user the user details about the notification recipient\\n * @param {NotificationReminder} reminder the notification reminder\\n * @returns {Promise<Notification>} the notification with the details about the reminder processed\\n */\\nconst setReminder = async(service, event, user, reminder) => {\\n  const {CRUD_SERVICE_URL, TIMER_SERVICE_URL, SERVICE_NAME, NOTIFICATIONS_CRUD_NAME} = service.config\\n  const {log: logger} = service\\n  const reminderEvent = pick(event, Object.keys(notificationEventSchema.properties))\\n\\n  const timerClient = service.getHttpClient(TIMER_SERVICE_URL)\\n\\n  const {expirationDate} = reminder\\n  const metadata = {\\n    ...reminderEvent.metadata,\\n    reminder,\\n  }\\n  const scheduleBody = {\\n    payload: {\\n      ...reminderEvent,\\n      metadata,\\n    },\\n    startDate: expirationDate,\\n    expirationIntervalMs: 1,\\n    applicantService: 'notification-manager',\\n    outputMode: {\\n      type: 'rest',\\n      method: 'post',\\n      protocol: 'http',\\n      hostname: SERVICE_NAME,\\n      path: '/notification-events/',\\n    },\\n  }\\n  const processedReminder = await timerClient.post('/schedule', scheduleBody)\\n\\n  const body = {\\n    event: reminderEvent,\\n    recipient: user.id,\\n    reminders: [processedReminder],\\n  }\\n  if (processedReminder) {\\n    const crudClient = service.getHttpClient(CRUD_SERVICE_URL)\\n    await post(crudClient, NOTIFICATIONS_CRUD_NAME, body, logger)\\n  }\\n\\n  return body\\n}\\n\\n\\nconst luxonWeekDays = new Map([\\n  ['monday', 1],\\n  ['tuesday', 2],\\n  ['wednesday', 3],\\n  ['thursday', 4],\\n  ['friday', 5],\\n  ['saturday', 6],\\n  ['sunday', 7],\\n])",
                  "name": "multiDailyMonitoringReminder.js"
                },
                {
                  "content": "async function awaitAll(userNotifications, event, users) {  return (await Promise.allSettled(userNotifications)).map((userNotification, index) => {    return userNotification.status === 'fulfilled' ?      userNotification.value :      {        event,        recipient: users[index].id,        failures: [userNotification.reason.message || userNotification.reason.payload || JSON.stringify(userNotification.reason)],      }  })}module.exports = async function handler(service, event, utils) {  const {log: logger} = service  const {payload: monitoring, metadata} = event  if (!monitoring) {    const message = 'Cannot process the event since monitoring payload is missing'    logger.error({eventId: event.id, eventName: event.name}, message)    throw new Error(message)  }  const {doctorId, patientId} = monitoring  const participants = new Set([doctorId, patientId])  metadata?.includeUsers?.forEach(participant => participants.add(participant))  metadata?.excludeUsers?.forEach(participant => participants.delete(participant))  const users = await utils.getRecipients(service, {ids: Array.from(participants)})  logger.debug({users: users.length}, 'Fetched participants')  const notifications = users.map(async user => {    const notificationSettings = await utils.getNotificationSettings(service, event, user)    const mergedNotificationSettings = utils.mergeNotificationSettings(service, notificationSettings)    const messagesToSend = utils.buildMessages(service, mergedNotificationSettings)    const messages = await utils.sendMessages(service, event, user, messagesToSend)    await utils.abortReminders(service, event, user, {      eventName: [        'TMM/MonitoringCreated/v1',        'TMM/MonitoringUpdated/v1',        'TMM/MonitoringReminder/v1',        'MultiDailyMonitoringReminder'      ],    })    return messages  })  return awaitAll(notifications, event, users)}",
                  "name": "customMonitoringDeleted.js"
                }
              ],
              "mountPath": "/home/node/app/custom-handlers",
              "name": "nm-custom-handlers",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "templates",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_CRUD_NAME",
              "value": "events",
              "valueType": "plain"
            },
            {
              "name": "EVENTS_SETTINGS_CRUD_NAME",
              "value": "event-settings",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_CRUD_NAME",
              "value": "notifications",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_SETTINGS_CRUD_NAME",
              "value": "notification-settings",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_NAME",
              "value": "notification-manager",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/configs/default.json",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "MAIL_SERVICE_URL",
              "value": "http://email-service",
              "valueType": "plain"
            },
            {
              "name": "SMS_SERVICE_URL",
              "value": "http://sms-service",
              "valueType": "plain"
            },
            {
              "name": "FILE_SERVICE_URL",
              "value": "http://files-service",
              "valueType": "plain"
            },
            {
              "name": "TIMER_SERVICE_URL",
              "value": "http://timer-service",
              "valueType": "plain"
            },
            {
              "name": "KALEYRA_API_BASE_URL",
              "secretKey": "kaleyra-base-url",
              "secretName": "notification-manager",
              "valueType": "secret"
            },
            {
              "name": "KALEYRA_API_KEY",
              "secretKey": "kaleyra-api-key",
              "secretName": "notification-manager",
              "valueType": "secret"
            },
            {
              "name": "KALEYRA_API_SID",
              "secretKey": "kaleyra-sid",
              "secretName": "notification-manager",
              "valueType": "secret"
            },
            {
              "name": "CUSTOM_HANDLERS_FOLDER",
              "value": "/home/node/app/custom-handlers",
              "valueType": "plain"
            },
            {
              "name": "GOOGLE_APPLICATION_CREDENTIALS",
              "value": "{{FIREBASE_CREDENTIALS}}",
              "valueType": "plain"
            },
            {
              "name": "USERS_API_ENDPOINT",
              "value": "http://user-manager-service-proxy/users",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_LOCALE",
              "value": "it-IT",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_MESSAGES_VIEW_NAME",
              "value": "{{NOTIFICATIONS_MESSAGES_VIEW_NAME}}",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "120Mi",
              "min": "50Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mlp",
              "name": "notification-manager"
            }
          ],
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/notification-manager:{{NOTIFICATION_MANAGER_VERSION}}",
          "name": "notification-manager",
          "type": "plugin"
        },
        "sms-service": {
          "componentId": "sms-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client_type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isBackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PROVIDER",
              "value": "kaleyra",
              "valueType": "plain"
            },
            {
              "name": "KALEYRA_BASE_URL",
              "secretKey": "kaleyra-base-url",
              "secretName": "sms-service",
              "valueType": "secret"
            },
            {
              "name": "KALEYRA_API_KEY",
              "secretKey": "kaleyra-api-key",
              "secretName": "sms-service",
              "valueType": "secret"
            },
            {
              "name": "KALEYRA_SID",
              "secretKey": "kaleyra-sid",
              "secretName": "sms-service",
              "valueType": "secret"
            },
            {
              "name": "KALEYRA_EMPTY_BALANCE_CHECK",
              "value": "false",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "100Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mlp",
              "name": "sms-service"
            }
          ],
          "dockerImage": "nexus.mia-platform.eu/plugins/sms-service:{{SMS_SERVICE_VERSION}}",
          "name": "sms-service",
          "type": "plugin"
        },
        "timer-service": {
          "componentId": "timer-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PATH",
              "value": "/reminders",
              "valueType": "plain"
            },
            {
              "name": "POLL_INTERVAL_MS",
              "value": "5000",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "75Mi",
              "min": "50Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/core/timer-service:{{TIMER_SERVICE_VERSION}}",
          "name": "timer-service",
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "CRUD_SERVICE_VERSION": {
          "noProductionEnv": "7.2.1",
          "productionEnv": "7.2.1"
        },
        "EMAIL_SERVICE_VERSION": {
          "noProductionEnv": "3.3.0",
          "productionEnv": "3.3.0"
        },
        "FILES_SERVICE_VERSION": {
          "noProductionEnv": "2.10.1",
          "productionEnv": "2.10.1"
        },
        "NOTIFICATIONS_MESSAGES_VIEW_NAME": {
          "noProductionEnv": "nm-nm-notification-messages",
          "productionEnv": "nm-nm-notification-messages"
        },
        "NOTIFICATION_MANAGER_VERSION": {
          "noProductionEnv": "2.4.3",
          "productionEnv": "2.4.3"
        },
        "SMS_SERVICE_VERSION": {
          "noProductionEnv": "1.2.1",
          "productionEnv": "1.2.1"
        },
        "TIMER_SERVICE_VERSION": {
          "noProductionEnv": "2.1.3",
          "productionEnv": "2.1.3"
        },
        "USER_MANAGER_MODULE_NAMESPACE": {
          "noProductionEnv": "user-auth-module-development",
          "productionEnv": "user-auth-module-preproduction"
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.686Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "notification-module_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/o3-dicom-service/overview"
    },
    "itemId": "o3-dicom-service",
    "name": "O3 DICOM Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/o3-dicom-service",
    "resources": {
      "services": {
        "o3-dicom-service": {
          "type": "plugin",
          "name": "o3-dicom-service",
          "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/o3-dicom-service:0.1.7",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "PACS_SERVICE_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_POST_EXAM_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_AUTHORIZATION_TOKEN",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_VIEWER_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "VIEWER_GET_TOKEN_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_UID_ROOT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "CRUD_SERVICE",
              "valueType": "plain",
              "value": "crud-service"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.7",
      "releaseNote": "Modified the function that generates the StudyInstanceUID because it must be less than or equal to 64 characters in length."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.534Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "o3-dicom-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/o3-dicom-service/overview"
    },
    "itemId": "o3-dicom-service",
    "name": "O3 DICOM Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/o3-dicom-service",
    "resources": {
      "services": {
        "o3-dicom-service": {
          "type": "plugin",
          "name": "o3-dicom-service",
          "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/o3-dicom-service:0.1.6",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "PACS_SERVICE_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_POST_EXAM_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_AUTHORIZATION_TOKEN",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_VIEWER_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "VIEWER_GET_TOKEN_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_UID_ROOT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "CRUD_SERVICE",
              "valueType": "plain",
              "value": "crud-service"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.6",
      "releaseNote": "Upgrade base Docker image"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.534Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "o3-dicom-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/o3-dicom-service/overview"
    },
    "itemId": "o3-dicom-service",
    "name": "O3 DICOM Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/o3-dicom-service",
    "resources": {
      "services": {
        "o3-dicom-service": {
          "type": "plugin",
          "name": "o3-dicom-service",
          "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/o3-dicom-service:0.1.4",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "PACS_SERVICE_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_POST_EXAM_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_AUTHORIZATION_TOKEN",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_VIEWER_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "VIEWER_GET_TOKEN_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_UID_ROOT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "CRUD_SERVICE",
              "valueType": "plain",
              "value": "crud-service"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.4",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.026Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "o3-dicom-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/o3-dicom-service/overview"
    },
    "itemId": "o3-dicom-service",
    "name": "O3 DICOM Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/o3-dicom-service",
    "resources": {
      "services": {
        "o3-dicom-service": {
          "type": "plugin",
          "name": "o3-dicom-service",
          "description": "The O3 DICOM Service is a microservice that allows you to interact with a DICOM PACS, in order to manage worklists, exams, notification coming from the PACS and OTP for the DICOM Viewer.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/o3-dicom-service:0.1.4",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "PACS_SERVICE_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_POST_EXAM_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PACS_AUTHORIZATION_TOKEN",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_VIEWER_URL",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "VIEWER_GET_TOKEN_ENDPOINT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DICOM_UID_ROOT",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "CRUD_SERVICE",
              "valueType": "plain",
              "value": "crud-service"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-04-04T08:59:05.748Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "o3-dicom-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "code",
    "description": "A simple Next.js Application to try-out OpenAI APIs",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/open-ai-showcase/master/README.md"
    },
    "itemId": "openai-playground",
    "name": "OpenAI Playground",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/open-ai-showcase",
    "resources": {
      "services": {
        "open-ai-playground": {
          "type": "template",
          "name": "open-ai-playground",
          "description": "A simple Next.js Application to try-out OpenAI APIs",
          "archiveUrl": "https://github.com/mia-platform-marketplace/open-ai-showcase/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "OPENAI_API_KEY",
              "value": "<here-your-api-key from OpenAI>",
              "valueType": "plain"
            },
            {
              "name": "MODEL_FAMILY",
              "value": "text-davinci-002",
              "valueType": "plain"
            },
            {
              "name": "MAX_TOKENS",
              "value": "1000",
              "valueType": "plain"
            },
            {
              "name": "TEMPERATURE",
              "value": "0.6",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.861Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "openai-playground-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "code",
    "description": "A simple Next.js Application to try-out OpenAI APIs",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/open-ai-showcase/master/README.md"
    },
    "itemId": "openai-playground",
    "name": "OpenAI Playground",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/open-ai-showcase",
    "resources": {
      "services": {
        "open-ai-playground": {
          "type": "template",
          "name": "open-ai-playground",
          "description": "A simple Next.js Application to try-out OpenAI APIs",
          "archiveUrl": "https://github.com/mia-platform-marketplace/open-ai-showcase/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "OPENAI_API_KEY",
              "value": "<here-your-api-key from OpenAI>",
              "valueType": "plain"
            },
            {
              "name": "MODEL_FAMILY",
              "value": "text-davinci-002",
              "valueType": "plain"
            },
            {
              "name": "MAX_TOKENS",
              "value": "1000",
              "valueType": "plain"
            },
            {
              "name": "TEMPERATURE",
              "value": "0.6",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          }
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-05-25T16:10:21.012Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "openai-playground-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "payments",
    "description": "Payment Gateway Manager helps you connect your services with different payment gateways in an easy fashion",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/payment-gateway-manager/overview"
    },
    "itemId": "payment-gateway-manager",
    "name": "Payment Gateway Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/payment-gateway-manager",
    "resources": {
      "services": {
        "payment-gateway-manager": {
          "type": "plugin",
          "name": "payment-gateway-manager",
          "description": "Payment Gateway Manager helps you connect your services with different payment gateways in an easy fashion",
          "dockerImage": "nexus.mia-platform.eu/plugins/payment-gateway-manager:3.6.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "./prod-logback.xml",
              "valueType": "plain"
            },
            {
              "name": "PAYMENT_CALLBACK_URL",
              "value": "{{CHANGE_WITH_YOUR_PAYMENT_CALLBACK_URL}}",
              "valueType": "plain"
            },
            {
              "name": "ENABLED_PROVIDERS",
              "value": "gestpay",
              "valueType": "plain"
            },
            {
              "name": "GESTPAY_IS_SANDBOX",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "GESTPAY_API_KEY",
              "value": "{{CHANGE_WITH_YOUR_GESTPAY_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "GESTPAY_SHOP_LOGIN",
              "value": "{{CHANGE_WITH_YOUR_GESTPAY_SHOP_LOGIN}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.6.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.025Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "payment-gateway-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "payments",
    "description": "Payment Gateway Manager helps you connect your services with different payment gateways in an easy fashion",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/payment-gateway-manager/overview"
    },
    "itemId": "payment-gateway-manager",
    "name": "Payment Gateway Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/payment-gateway-manager",
    "resources": {
      "services": {
        "payment-gateway-manager": {
          "type": "plugin",
          "name": "payment-gateway-manager",
          "description": "Payment Gateway Manager helps you connect your services with different payment gateways in an easy fashion",
          "dockerImage": "nexus.mia-platform.eu/plugins/payment-gateway-manager:3.6.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "./prod-logback.xml",
              "valueType": "plain"
            },
            {
              "name": "PAYMENT_CALLBACK_URL",
              "value": "{{CHANGE_WITH_YOUR_PAYMENT_CALLBACK_URL}}",
              "valueType": "plain"
            },
            {
              "name": "ENABLED_PROVIDERS",
              "value": "gestpay",
              "valueType": "plain"
            },
            {
              "name": "GESTPAY_IS_SANDBOX",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "GESTPAY_API_KEY",
              "value": "{{CHANGE_WITH_YOUR_GESTPAY_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "GESTPAY_SHOP_LOGIN",
              "value": "{{CHANGE_WITH_YOUR_GESTPAY_SHOP_LOGIN}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-02-09T15:35:48.199Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "payment-gateway-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "payments",
    "description": "This application provides a backoffice instance with two pages already configured for manage and monitoring payments created with all micro services needed to start and managed payments, such as payment gateway manager, notification service and invoice download service.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/payment-integration-hub/overview"
    },
    "itemId": "payment-integration-hub",
    "name": "Payment Integration Hub",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/applications/payment-gateway-backoffice",
    "resources": {
      "services": {
        "api-gateway": {
          "name": "api-gateway",
          "type": "plugin",
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "componentId": "api-gateway-envoy",
          "defaultDocumentationPath": "",
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultLogParser": "mia-json",
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "200m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            },
            {
              "name": "admin",
              "from": 9901,
              "to": 9901
            }
          ],
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "defaultTerminationGracePeriodSeconds": 60,
          "defaultConfigMaps": [
            {
              "name": "api-gateway-envoy-config",
              "mountPath": "/etc/envoy",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            }
          ]
        },
        "adaptive-approval": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/rules/",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-service",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "This service allow to define and verify rules",
          "dockerImage": "nexus.mia-platform.eu/fintech/adaptive-approval:0.0.2",
          "name": "adaptive-approval",
          "type": "plugin"
        },
        "analytics-transactions": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "\\"use strict\\";  module.exports = {   tags: [\\"Profiles\\"],   name: \\"amount-transactions-by-day-last-year\\",   parameters: [],   inputFormatter: function t(query, params) {     return { ...query, ...params }       },   query: {     collectionName: \\"fm_transactions\\",     aggregationFunction: function t(params) {       return [         {           $match: {             __STATE__: \\"PUBLIC\\",              createdAt: {               $lt: new Date(new Date() - 1000*60*60*24*365),                $gt: new Date(new Date() - 1000*60*60*24*365*2)             },             businessStateDescription: \\"PAYMENT_PAID\\"           }         }, {           $project: {             dateToGroup: {               $dateToString: {                 format: \\"%Y-%m-%d\\",                  date: \\"$createdAt\\"               }             },              amount: \\"$metadata.amount\\"           }         }, {           $group: {             _id: \\"$dateToGroup\\",              total: {               $sum: \\"$amount\\"             }           }         }, {           $sort: {             _id: 1           }         }, {           $project: {             total: {               $divide: [                 \\"$total\\",                 100               ]             },              fakeTimestamp: {               $toLong: {                 $dateAdd: {                   startDate: {                     $toDate: \\"$_id\\"                   },                    unit: \\"year\\",                    amount: 1                 }               }             }           }         }       ]     }   },   castInterpolatedPipeline: function t(pipeline) {     return pipeline   },   outputFormatter: function t(doc, format, input) {     return [doc.fakeTimestamp, doc.total]   } };",
                  "name": "amount-transactions-by-day-last-year.js"
                },
                {
                  "content": "\\"use strict\\";  module.exports = {   tags: [\\"Profiles\\"],   name: \\"amount-transactions-by-day-this-year\\",   parameters: [],   inputFormatter: function t(query, params) {     return { ...query, ...params }       },   query: {     collectionName: \\"fm_transactions\\",     aggregationFunction: function t(params) {       return [         {           $match: {             __STATE__: \\"PUBLIC\\",              createdAt: {               $gt: new Date(new Date() - 1000*60*60*24*365)             },             businessStateDescription: \\"PAYMENT_PAID\\"           }         }, {           $project: {             dateToGroup: {               $dateToString: {                 format: \\"%Y-%m-%d\\",                  date: \\"$createdAt\\"               }             },              amount: \\"$metadata.amount\\"           }         }, {           $group: {             _id: \\"$dateToGroup\\",              total: {               $sum: \\"$amount\\"             }           }         }, {           $sort: {             _id: 1           }         }, {           $project: {             total: {               $divide: [                 \\"$total\\",                 100               ]             },              timestamp: {               $toLong: {                 $toDate: \\"$_id\\"               }             }           }         }       ]     }   },   castInterpolatedPipeline: function t(pipeline) {     return pipeline   },   outputFormatter: function t(doc, format, input) {     return [doc.timestamp, doc.total]   } };",
                  "name": "amount-transactions-by-day-this-year.js"
                },
                {
                  "content": "\\"use strict\\";  module.exports = {   tags: [\\"Profiles\\"],   name: \\"amount-by-method\\",   parameters: [{     type: \\"string\\",     name: \\"transactionDateFrom\\",     required: false   }, {     type: \\"string\\",     name: \\"transactionDateTo\\",     required: false   }],   inputFormatter: function t(query, params) {     return { ...query, ...params }   },   query: {     collectionName: \\"fm_transactions\\",     aggregationFunction: function t(params) {       return [{         $match: {           __STATE__: \\"PUBLIC\\",           businessStateDescription: \\"PAYMENT_PAID\\"         }       }, {         '#matchWithFilters#': [{           requiredParameters: [\\"transactionDateFrom\\", \\"transactionDateTo\\"],           query: {             createdAt: {               $gt: new Date(params.transactionDateFrom),               $lt: new Date(params.transactionDateTo)             }           }         }]       }, {         $group: {           _id: \\"$metadata.paymentMethod\\",           total: {             $sum: \\"$metadata.amount\\"           }         }       }, {         $set: {           total: {             $divide: [               \\"$total\\",               100             ]           },           method: {             $switch: {               branches: [                 {                   case: {                     $eq: [\\"$_id\\", \\"applepay\\"]                   },                   then: \\"Apple Pay\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"credit-cards\\"]                   },                   then: \\"Credit Card\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"googlepay\\"]                   },                   then: \\"Google Pay\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"pay-pal\\"]                   },                   then: \\"PayPal\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"safecharge\\"]                   },                   then: \\"Safecharge\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"satispay\\"]                   },                   then: \\"Satispay\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"scalapay\\"]                   },                   then: \\"Scalapay\\"                 },                 {                   case: {                     $eq: [\\"$_id\\", \\"soisy\\"]                   },                   then: \\"Soisy\\"                 },               ],               default: \\"$_id\\"             }           }         }       }, {         $sort: {           method: 1         }       }]     }   },   castInterpolatedPipeline: function t(pipeline) {     return pipeline   },   outputFormatter: function t(doc, format, input) {     return [doc.method, doc.total]   } };",
                  "name": "amount-by-method.js"
                },
                {
                  "content": "\\"use strict\\";  module.exports = {   tags: [\\"Profiles\\"],   name: \\"amount-by-channel\\",   parameters: [{     type: \\"string\\",     name: \\"transactionDateFrom\\",     required: false   }, {     type: \\"string\\",     name: \\"transactionDateTo\\",     required: false   }],   inputFormatter: function t(query, params) {     return { ...query, ...params }   },   query: {     collectionName: \\"fm_transactions\\",     aggregationFunction: function t(params) {       return [{         $match: {           __STATE__: \\"PUBLIC\\",           businessStateDescription: \\"PAYMENT_PAID\\"         }       }, {         '#matchWithFilters#': [{           requiredParameters: [\\"transactionDateFrom\\", \\"transactionDateTo\\"],           query: {             createdAt: {               $gt: new Date(params.transactionDateFrom),               $lt: new Date(params.transactionDateTo)             }           }         }]       }, {         $group: {           _id: \\"$metadata.additionalData.channel\\",           total: {             $sum: \\"$metadata.amount\\"           }         }       }, {         $set: {           total: {             $divide: [               \\"$total\\",               100             ]           },           channel: {             $switch: {               branches: [                 {                   case: {                     $eq: [\\"$_id\\", null]                   },                   then: \\"unknown\\"                 }               ],               default: \\"$_id\\"             }           }         }       }, {         $sort: {           channel: 1         }       }]     }   },   castInterpolatedPipeline: function t(pipeline) {     return pipeline   },   outputFormatter: function t(doc, format, input) {     return [doc.channel, doc.total]   } };",
                  "name": "amount-by-channel.js"
                },
                {
                  "content": "\\"use strict\\";  module.exports = {   tags: [\\"Profiles\\"],   name: \\"percentage-by-status\\",   parameters: [{     type: \\"string\\",     name: \\"transactionDateFrom\\",     required: false   }, {     type: \\"string\\",     name: \\"transactionDateTo\\",     required: false   }],   inputFormatter: function t(query, params) {     return { ...query, ...params }       },   query: {     collectionName: \\"fm_transactions\\",     aggregationFunction: function t(params) {       return [{         $match: {           __STATE__: \\"PUBLIC\\"         }       }, {         '#matchWithFilters#': [{           requiredParameters: [\\"transactionDateFrom\\", \\"transactionDateTo\\"],           query: {             createdAt: {               $gt: new Date(params.transactionDateFrom),               $lt: new Date(params.transactionDateTo)             }           }         }]       }, {         $facet: {           nDocs: [             {               \\"$count\\": \\"nDocs\\"             }           ],           groupValues: [             {               \\"$group\\": {                 \\"_id\\": \\"$businessStateDescription\\",                 \\"total\\": {                   \\"$sum\\": 1                 }               }             },           ]         }       }, {         $unwind: {           path: '$groupValues',           includeArrayIndex: 'string',           preserveNullAndEmptyArrays: true         }       }, {         $project: {           status: '$groupValues._id',           percentage: {             $round: [               {                 $multiply: [                   {                     $divide: [ \\"$groupValues.total\\", {                       $getField: {                         field: 'nDocs',                         input: { $arrayElemAt: ['$nDocs', 0] }                       }                     } ]                   },                   100                 ]               },               2             ]           }         }       }, {         $set: {           state: {             $switch: {               branches: [                 {                   case: {                     $eq: [\\"$status\\", \\"PAYMENT_PAID\\"]                   },                   then: \\"Payment Paid\\"                 },                 {                   case: {                     $eq: [\\"$status\\", \\"PAYMENT_CREATED\\"]                   },                   then: \\"Payment Created\\"                 },                 {                   case: {                     $eq: [\\"$status\\", \\"PAYMENT_PARTIALLY_REFUNDED\\"]                   },                   then: \\"Payment Partially Refunded\\"                 },                 {                   case: {                     $eq: [\\"$status\\", \\"PAYMENT_TOTALLY_REFUNDED\\"]                   },                   then: \\"Payment Totally Refunded\\"                 },                 {                   case: {                     $eq: [\\"$status\\", \\"PAYMENT_FAILED\\"]                   },                   then: \\"Payment Failed\\"                 },               ],               default: \\"$status\\"             }           }         }       }]     }   },   castInterpolatedPipeline: function t(pipeline) {     return pipeline   },   outputFormatter: function t(doc, format, input) {     return [doc.state, doc.percentage]   } };",
                  "name": "percentage-by-status.js"
                }
              ],
              "mountPath": "/home/node/app/profiles",
              "name": "transactions-analytics",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "PROFILE_DIR",
              "value": "/home/node/app/profiles",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "description": "Provide MongoDB aggregation pipelines as REST API.",
          "dockerImage": "nexus.mia-platform.eu/core/mongodb-reader:{{ANALYTICS_TRANSACTIONS_VERSION}}",
          "name": "analytics-transactions",
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "/",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20
            },
            "readiness": {
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "70Mi"
            }
          },
          "description": "",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:{{CRUD_SERVICE_VERSION}}",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "data-visualization-backend": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"charts\\": {     \\"percentageByStatus\\": {       \\"id\\": \\"percentageByStatus\\",       \\"constructorType\\": \\"chart\\",       \\"options\\": {         \\"chart\\": {           \\"plotBackgroundColor\\": null,           \\"plotBorderWidth\\": null,           \\"plotShadow\\": false,           \\"type\\": \\"pie\\"         },         \\"title\\": {           \\"text\\": \\"Percentage of transactions by state\\"         },         \\"tooltip\\": {           \\"pointFormat\\": \\"{series.name}: <b>{point.percentage:.1f}%</b>\\"         },         \\"accessibility\\": {           \\"point\\": {             \\"valueSuffix\\": \\"%\\"           }         },         \\"plotOptions\\": {           \\"pie\\": {             \\"allowPointSelect\\": true,             \\"cursor\\": \\"pointer\\",             \\"dataLabels\\": {               \\"enabled\\": true,               \\"format\\": \\"<b>{point.name}</b>: {point.percentage:.2f} %\\"             },             \\"colors\\": [               \\"#EA5159\\",               \\"#FAA0A0\\",               \\"#800020\\",               \\"#4A0404\\"             ]           }         },         \\"series\\": [           {             \\"id\\": \\"serie1\\",             \\"name\\": \\"Percentage of transactions: \\",             \\"colorByPoint\\": true,             \\"endpointData\\": \\"/analytics/percentage-by-status/json\\"           }         ]       },       \\"filters\\": {         \\"dateFilter\\": {           \\"type\\": \\"DATERANGE\\",           \\"placeholder\\": \\"Date\\",           \\"fieldName\\": \\"transactionDate\\",           \\"title\\": \\"Date\\",           \\"description\\": \\"Creation Date\\"         }       }     },     \\"transactionsbyChannel\\": {       \\"id\\": \\"transactionsbyChannel\\",       \\"constructorType\\": \\"chart\\",       \\"filters\\": {         \\"dateFilter\\": {           \\"type\\": \\"DATERANGE\\",           \\"placeholder\\": \\"Date\\",           \\"fieldName\\": \\"transactionDate\\",           \\"title\\": \\"Date\\",           \\"description\\": \\"Creation Date\\"         }       },       \\"options\\": {         \\"title\\": {           \\"text\\": \\"Transactions by Channel\\"         },         \\"subtitle\\": {           \\"text\\": \\"Number of transactions\\"         },         \\"chart\\": {           \\"alignTicks\\": false,           \\"type\\": \\"bar\\"         },         \\"legend\\": {           \\"enabled\\": true         },         \\"xAxis\\": {           \\"type\\": \\"category\\",           \\"labels\\": {             \\"style\\": {               \\"fontSize\\": \\"12px\\",               \\"fontFamily\\": \\"Verdana, sans-serif\\"             }           }         },         \\"yAxis\\": [           {             \\"title\\": {               \\"text\\": \\"Revenues\\"             }           },           {             \\"title\\": {               \\"text\\": \\"Transactions\\"             }           }         ],         \\"tooltip\\": {           \\"shared\\": true         },         \\"series\\": [           {             \\"id\\": \\"serie2\\",             \\"name\\": \\"Number\\",             \\"endpointData\\": \\"/analytics/number-transactions-by-channel/json\\",             \\"type\\": \\"column\\",             \\"color\\": \\"#EA5159\\",             \\"yAxis\\": 0           }         ]       }     },     \\"transactionComparisonLastYear\\": {       \\"id\\": \\"transactionComparisonLastYear\\",       \\"constructorType\\": \\"stockChart\\",       \\"options\\": {         \\"title\\": {           \\"text\\": \\"Transactions trend\\"         },         \\"subtitle\\": {           \\"text\\": \\"Amount by day\\"         },         \\"chart\\": {           \\"alignTicks\\": false         },         \\"legend\\": {           \\"enabled\\": true         },         \\"xAxis\\": {           \\"type\\": \\"datetime\\"         },         \\"yAxis\\": [           {             \\"title\\": {               \\"text\\": \\"Amount\\"             }           }         ],         \\"series\\": [           {             \\"id\\": \\"amount-transactions-by-day-last-year\\",             \\"name\\": \\"Last year\\",             \\"endpointData\\": \\"/analytics/amount-transactions-by-day-last-year/json\\",             \\"color\\": \\"#C0C0C0\\",             \\"tooltip\\": {               \\"valuePrefix\\": \\"€ \\"             },             \\"fill\\": {               \\"granularity\\": \\"days\\",               \\"untilNow\\": true,               \\"value\\": 0             },             \\"yAxis\\": 0,             \\"xAxis\\": 0,             \\"dashStyle\\": \\"ShortDot\\"           },           {             \\"id\\": \\"amount-transactions-by-day-this-year\\",             \\"name\\": \\"This year\\",             \\"endpointData\\": \\"/analytics/amount-transactions-by-day-this-year/json\\",             \\"color\\": \\"#EA5159\\",             \\"tooltip\\": {               \\"valuePrefix\\": \\"€ \\"             },             \\"fill\\": {               \\"granularity\\": \\"days\\",               \\"untilNow\\": true,               \\"value\\": 0             },             \\"yAxis\\": 0,             \\"xAxis\\": 0           }         ]       }     },     \\"amountByMethod\\": {       \\"id\\": \\"amountByMethod\\",       \\"constructorType\\": \\"chart\\",       \\"filters\\": {         \\"dateFilter\\": {           \\"type\\": \\"DATERANGE\\",           \\"placeholder\\": \\"Date\\",           \\"fieldName\\": \\"transactionDate\\",           \\"title\\": \\"Date\\",           \\"description\\": \\"Creation Date\\"         }       },       \\"options\\": {         \\"title\\": {           \\"text\\": \\"Amount by payment method\\"         },         \\"chart\\": {           \\"alignTicks\\": false,           \\"type\\": \\"bar\\"         },         \\"legend\\": {           \\"enabled\\": true         },         \\"xAxis\\": {           \\"type\\": \\"category\\"         },         \\"yAxis\\": [           {             \\"title\\": {               \\"text\\": \\"Revenues\\"             }           }         ],         \\"tooltip\\": {           \\"shared\\": true         },         \\"series\\": [           {             \\"id\\": \\"amount-by-method\\",             \\"name\\": \\"Amount\\",             \\"endpointData\\": \\"/analytics/amount-by-method/json\\",             \\"type\\": \\"column\\",             \\"tooltip\\": {               \\"valuePrefix\\": \\"€ \\"             },             \\"color\\": \\"#EA5159\\",             \\"yAxis\\": 0           }         ]       }     },     \\"amountByChannel\\": {       \\"id\\": \\"amountByChannel\\",       \\"constructorType\\": \\"chart\\",       \\"filters\\": {         \\"dateFilter\\": {           \\"type\\": \\"DATERANGE\\",           \\"placeholder\\": \\"Date\\",           \\"fieldName\\": \\"transactionDate\\",           \\"title\\": \\"Date\\",           \\"description\\": \\"Creation Date\\"         }       },       \\"options\\": {         \\"title\\": {           \\"text\\": \\"Amount by payment channel\\"         },         \\"chart\\": {           \\"alignTicks\\": false,           \\"type\\": \\"bar\\"         },         \\"legend\\": {           \\"enabled\\": true         },         \\"xAxis\\": {           \\"type\\": \\"category\\"         },         \\"yAxis\\": [           {             \\"title\\": {               \\"text\\": \\"Revenues\\"             }           }         ],         \\"tooltip\\": {           \\"shared\\": true         },         \\"series\\": [           {             \\"id\\": \\"amount-by-channel\\",             \\"name\\": \\"Amount\\",             \\"endpointData\\": \\"/analytics/amount-by-channel/json\\",             \\"type\\": \\"column\\",             \\"tooltip\\": {               \\"valuePrefix\\": \\"€ \\"             },             \\"color\\": \\"#EA5159\\",             \\"yAxis\\": 0           }         ]       }     }   },   \\"dashboard\\": {     \\"dashboard-1\\": {       \\"rows\\": [         {           \\"charts\\": [             {               \\"id\\": \\"transactionComparisonLastYear\\"             }           ]         },         {           \\"charts\\": [             {               \\"id\\": \\"amountByMethod\\"             },             {               \\"id\\": \\"amountByChannel\\"             }           ]         },         {           \\"charts\\": [             {               \\"id\\": \\"percentageByStatus\\"             }           ]         }       ]     }   } }",
                  "name": "config.json"
                }
              ],
              "mountPath": "/home/node/app/data-visualization",
              "name": "data-visualization-backend",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "DASHBOARD_AND_CHARTS_CONFIG_PATH",
              "value": "/home/node/app/data-visualization/config.json",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "description": "This is a backend for frontend to be used to configure Data Visualization dashboards.",
          "dockerImage": "nexus.mia-platform.eu/core/charts-service:{{DATA_VIZ_BE_VERSION}}",
          "name": "data-visualization-backend",
          "type": "plugin"
        },
        "data-visualization-frontend": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "description": "A customizable frontend to display your data in beautiful dashboards. Use it with Data Visualization Backend.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/data-visualization:{{DATA_VIZ_FE_VERSION}}",
          "name": "data-visualization-frontend",
          "type": "plugin"
        },
        "export-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 40,
              "path": "/-/healthz",
              "periodSeconds": 15,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "description": "This service helps you manage Excel, CSV or JSON export from other services using jsonl.",
          "dockerImage": "nexus.mia-platform.eu/core/export-service:2.0.2",
          "name": "export-service",
          "type": "plugin"
        },
        "files-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "CHANGE ME",
                  "name": "db-config.json"
                },
                {
                  "content": "'use strict'\\nmodule.exports = function caster(doc) {   return {     sagaId: doc.sagaId || undefined,   } }\\nmodule.exports.additionalPropertiesValidator = {   sagaId: { type: 'string' }, }",
                  "name": "caster-file.js"
                }
              ],
              "mountPath": "/file-service-config",
              "name": "file-sevice-config",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/invoices/",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/file-service-config/db-config.json",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups",
              "valueType": "plain"
            },
            {
              "name": "PROJECT_HOSTNAME",
              "value": "https://{{PROJECT_HOST}}/",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_FUNCTION_CASTER_FILE_PATH",
              "value": "/file-service-config/caster-file.js",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "description": "Upload, download and handle your files using MongoDB, S3 or Google Storage.",
          "dockerImage": "nexus.mia-platform.eu/plugins/files-service:2.10.1",
          "name": "files-service",
          "type": "plugin"
        },
        "flow-manager-service": {
          "componentId": "flow-manager",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"machineDefinition\\": {     \\"initialState\\": \\"PAYMENT_CREATED\\",     \\"creationEvent\\": \\"paymentCreated\\",     \\"states\\": [       {         \\"id\\": \\"PAYMENT_CREATED\\",         \\"description\\": \\"payment created on CRUD\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"scheduleRequested\\",             \\"targetState\\": \\"PAYMENT_SCHEDULE_REQUESTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"subscriptionScheduledRequested\\",             \\"targetState\\": \\"SUBSCRIPTION_SCHEDULED_REQUESTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"subscriptionStart\\",             \\"targetState\\": \\"SUBSCRIPTION_STARTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"subscriptionPaymentRequested\\",             \\"targetState\\": \\"SUBSCRIPTION_PAYMENT_REQUESTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"authorizationRequested\\",             \\"targetState\\": \\"AUTHORIZATION_REQUESTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"linkRequested\\",             \\"targetState\\": \\"LINK_REQUESTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"LINK_REQUESTED\\",         \\"description\\": \\"Link has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"createLink\\",           \\"label\\": \\"createLink\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"linkCreated\\",             \\"targetState\\": \\"LINK_CREATED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"LINK_CREATED\\",         \\"description\\": \\"Link has been created\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"notificationSent\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"AUTHORIZATION_REQUESTED\\",         \\"description\\": \\"authorization has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"getAuthorization\\",           \\"label\\": \\"getAuthorization\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"authorizationScheduled\\",             \\"targetState\\": \\"AUTHORIZATION_PENDING\\",             \\"businessEventId\\": 0           }         ]       },       {         \\"id\\": \\"AUTHORIZATION_PENDING\\",         \\"description\\": \\"waiting for authorization\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"subscriptionStart\\",             \\"targetState\\": \\"SUBSCRIPTION_STARTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"subscriptionPaymentRequested\\",             \\"targetState\\": \\"SUBSCRIPTION_PAYMENT_REQUESTED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"PAYMENT_SCHEDULE_REQUESTED\\",         \\"description\\": \\"payment schedule has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"pay\\",           \\"label\\": \\"paymentScheduled\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"paymentScheduled\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentExecutedBySystem\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"paymentFailedBySystem\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"SUBSCRIPTION_SCHEDULED_REQUESTED\\",         \\"description\\": \\"subscription schedule has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"subscriptionScheduledRequested\\",           \\"label\\": \\"subscriptionScheduledRequested\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"paymentScheduled\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentExecutedBySystem\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"paymentFailedBySystem\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"SUBSCRIPTION_STARTED\\",         \\"description\\": \\"subscription's first payment has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"subscriptionStart\\",           \\"label\\": \\"subscriptionStart\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"paymentScheduled\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentExecutedBySystem\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"paymentFailedBySystem\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"SUBSCRIPTION_PAYMENT_REQUESTED\\",         \\"description\\": \\"subscription's payment has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outputCommand\\": {           \\"channel\\": \\"subscriptionPaymentRequested\\",           \\"label\\": \\"subscriptionPaymentRequested\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"paymentScheduled\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentExecutedBySystem\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"paymentFailedBySystem\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"PAYMENT_PENDING\\",         \\"description\\": \\"payment created on provider's system\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"update\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentExecutedBySystem\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"paymentFailedBySystem\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1000           }         ]       },       {         \\"id\\": \\"PAYMENT_EXECUTED\\",         \\"description\\": \\"payment has been paid\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"refundRequested\\",             \\"targetState\\": \\"REFUND_REQUESTED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"sendNotification\\",             \\"targetState\\": \\"PAYMENT_EXECUTED\\",             \\"businessEventId\\": 1           }         ]       },       {         \\"id\\": \\"REFUND_REQUESTED\\",         \\"description\\": \\"payment refund has been requested\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outputCommand\\": {           \\"channel\\": \\"refund\\",           \\"label\\": \\"refundRequested\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"refundFailed\\",             \\"targetState\\": \\"REFUND_FAILED\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"partialRefundExecuted\\",             \\"targetState\\": \\"PARTIALLY_REFUNDED\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"totalRefundExecuted\\",             \\"targetState\\": \\"TOTALLY_REFUNDED\\",             \\"businessEventId\\": 3           }         ]       },       {         \\"id\\": \\"REFUND_FAILED\\",         \\"description\\": \\"payment refund failed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"refundRequested\\",             \\"targetState\\": \\"REFUND_REQUESTED\\",             \\"businessEventId\\": 1           }         ]       },       {         \\"id\\": \\"PARTIALLY_REFUNDED\\",         \\"description\\": \\"payment has been partially refunded\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"refundRequested\\",             \\"targetState\\": \\"SUBSEQUENT_REFUND_REQUESTED\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"sendNotification\\",             \\"targetState\\": \\"PARTIALLY_REFUNDED\\",             \\"businessEventId\\": 1           }         ]       },       {         \\"id\\": \\"SUBSEQUENT_REFUND_REQUESTED\\",         \\"description\\": \\"payment refund has been requested again\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outputCommand\\": {           \\"channel\\": \\"refund\\",           \\"label\\": \\"refundRequested\\"         },         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"partialRefundExecuted\\",             \\"targetState\\": \\"PARTIALLY_REFUNDED\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"refundFailed\\",             \\"targetState\\": \\"SUBSEQUENT_REFUND_FAILED\\",             \\"businessEventId\\": 2           },           {             \\"inputEvent\\": \\"totalRefundExecuted\\",             \\"targetState\\": \\"TOTALLY_REFUNDED\\",             \\"businessEventId\\": 3           }         ]       },       {         \\"id\\": \\"SUBSEQUENT_REFUND_FAILED\\",         \\"description\\": \\"subsequent payment refund failed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 2,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"refundRequested\\",             \\"targetState\\": \\"SUBSEQUENT_REFUND_REQUESTED\\",             \\"businessEventId\\": 2           }         ]       },       {         \\"id\\": \\"TOTALLY_REFUNDED\\",         \\"description\\": \\"payment has been totally refunded\\",         \\"isFinal\\": false,         \\"businessStateId\\": 3,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"sendNotification\\",             \\"targetState\\": \\"TOTALLY_REFUNDED\\",             \\"businessEventId\\": 1           }         ]       },       {         \\"id\\": \\"PAYMENT_FAILED\\",         \\"description\\": \\"payment could not be performed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1000,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"sendNotification\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 1           }         ]       }     ],     \\"businessStates\\": [       {         \\"id\\": 0,         \\"description\\": \\"PAYMENT_CREATED\\"       },       {         \\"id\\": 1,         \\"description\\": \\"PAYMENT_PAID\\"       },       {         \\"id\\": 2,         \\"description\\": \\"PAYMENT_PARTIALLY_REFUNDED\\"       },       {         \\"id\\": 3,         \\"description\\": \\"PAYMENT_TOTALLY_REFUNDED\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"PAYMENT_FAILED\\"       }     ],     \\"businessEvents\\": [       {         \\"id\\": 0,         \\"description\\": \\"paymentCreated\\"       },       {         \\"id\\": 1,         \\"description\\": \\"paymentPaid\\"       },       {         \\"id\\": 2,         \\"description\\": \\"paymentPartiallyRefunded\\"       },       {         \\"id\\": 3,         \\"description\\": \\"paymentTotallyRefunded\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"paymentFailed\\"       }     ]   },   \\"communicationProtocols\\": [     {       \\"id\\": \\"pay\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/pay\\"       }     },     {       \\"id\\": \\"createLink\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/pay-by-link\\"       }     },     {       \\"id\\": \\"subscriptionScheduledRequested\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/subscription/schedule\\"       }     },     {       \\"id\\": \\"subscriptionStart\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/subscription/start\\"       }     },     {       \\"id\\": \\"subscriptionPaymentRequested\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/subscription/pay\\"       }     },     {       \\"id\\": \\"getAuthorization\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/subscription/authorization\\"       }     },     {       \\"id\\": \\"refund\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"payment-gateway-manager\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/refund\\"       }     },     {       \\"id\\": \\"subscription-notify\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"subscription-handler-service\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/notify\\"       }     },     {       \\"id\\": \\"notify\\",       \\"type\\": \\"rest\\",       \\"configurations\\": {         \\"protocol\\": \\"http\\",         \\"endpoint\\": \\"messaging-service\\",         \\"method\\": \\"POST\\",         \\"path\\": \\"/saga/send\\"       }     }   ],   \\"persistencyManagement\\": {     \\"type\\": \\"crud\\",     \\"configurations\\": {       \\"collectionName\\": \\"fm-transactions\\"     }   },   \\"settings\\": {     \\"deepMergeMetadata\\": {       \\"enabled\\": true     }   } }",
                  "name": "saga.json"
                }
              ],
              "mountPath": "/configuration",
              "name": "flow-configuration",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "/configuration/saga.json",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "payment",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:2.6.5",
          "name": "flow-manager-service",
          "type": "plugin"
        },
        "frullino-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service/payment-pending-view",
              "valueType": "plain"
            },
            {
              "name": "PGM_URL",
              "value": "http://payment-gateway-manager",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-service",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOST",
              "value": "redis://{{REDIS_HOSTS}}",
              "valueType": "plain"
            },
            {
              "name": "THREAD_NUMBER",
              "value": "2",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOGS}}",
              "valueType": "plain"
            },
            {
              "name": "FRULLINO_RUNNING_INTERVAL_CRON",
              "value": "30s",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/-/healthz"
            },
            "readiness": {
              "initialDelaySeconds": 15,
              "path": "/-/ready"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "400Mi",
              "min": "200Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/plugins/frullino:{{FRULLINO_VERSION}}",
          "name": "frullino-service",
          "type": "plugin"
        },
        "invoice-service": {
          "componentId": "invoice-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"companyName\\": \\"CHANGE ME\\",   \\"address\\": \\"CHANGE ME\\",   \\"telephoneNumber\\": \\"Tel. CHANGE ME\\",   \\"logo\\": \\"CHANGE ME\\" }",
                  "name": "company-data.json"
                }
              ],
              "mountPath": "/config",
              "name": "config",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client_type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isBackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "COMPANY_DATA_PATH",
              "value": "/config/company-data.json",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 2
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 2
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "80Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/plugins/invoice-service:1.0.3",
          "name": "invoice-service",
          "type": "plugin"
        },
        "messaging-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"activeChannels\\": [     \\"email\\",     \\"sms\\"   ],   \\"sender\\": {     \\"email\\": \\"{{EMAIL_SENDER}}\\",     \\"sms\\": \\"CHANGE ME\\"   },   \\"flowManagerConfiguration\\": {     \\"serviceUrl\\": \\"http://flow-manager-service\\",     \\"successEventLabel\\": \\"notificationSent\\",     \\"failEventLabel\\": \\"paymentFailed\\",     \\"getTemplateIdFilePath\\": \\"/home/node/app/messaging-service/getTemplateId.js\\",     \\"getDataFilePath\\": \\"/home/node/app/messaging-service/getData.js\\",     \\"metadataSchema\\": {       \\"channels\\": \\"additionalData.notificationChannels\\",       \\"recipients\\": \\"additionalData.buyer.id\\"     }   } }",
                  "name": "config.json"
                },
                {
                  "content": "function amountToDecimal(amount, currency) {   if (isNaN(amount)) return undefined   \\nswitch (currency.toLocaleLowerCase()) {     case 'eur':       return (amount / 100).toFixed(2)\\ndefault:       return amount   } }  function currencyToSymbol(currency) {   switch (currency.toLocaleLowerCase()) {     case 'eur':       return '€'     \\ndefault:       return currency   } }  function mapStatus(status) {     switch (status) {         case 'PAYMENT_EXECUTED':             return 'Payment Paid'         \\ncase 'PAYMENT_FAILED':             return 'Payment Failed'         \\ncase 'PARTIAL_REFUND_EXECUTED':             return 'Payment Partially Refunded'         \\ncase 'TOTAL_REFUND_EXECUTED':             return 'Payment Totally Refunded'         \\ndefault:             return status     } }  \\nmodule.exports = function getData(event) {   return {     ...event,     value: {       messageLabel: mapStatus(event.value.messageLabel),       messagePayload: {         ...event.value.messagePayload,         amount: amountToDecimal(event.value.messagePayload.amount, event.value.messagePayload.currency),         currency: currencyToSymbol(event.value.messagePayload.currency),         refundRequestData: {           ...event.value.messagePayload.refundRequestData,           amount: amountToDecimal(event.value.messagePayload.refundRequestData?.amount, event.value.messagePayload.currency),         },         refundDetails: {           ...event.value.messagePayload.refundDetails,           totalRefundedAmount: amountToDecimal(event.value.messagePayload.refundDetails?.totalRefundedAmount, event.value.messagePayload.currency),           refundedAmounts: event.value.messagePayload.refundDetails?.refundedAmounts?.map(a => amountToDecimal(a, event.value.messagePayload.currency)),         },       },     },   } } ",
                  "name": "getData.js"
                },
                {
                  "content": "module.exports = function getTemplateId(event) {   const mapIds = new Map(JSON.parse('{{NOTIFICATION_TEMPLATE_IDS}}'))   \\nreturn mapIds.get(event.value.messageLabel) ?? event.value.messageLabel } ",
                  "name": "getTemplateId.js"
                }
              ],
              "mountPath": "/home/node/app/messaging-service",
              "name": "messaging-configuration",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOGS}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_NAME",
              "value": "users",
              "valueType": "plain"
            },
            {
              "name": "TEMPLATES_CRUD_NAME",
              "value": "notification-templates",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/home/node/app/messaging-service/config.json",
              "valueType": "plain"
            },
            {
              "name": "MAIL_SERVICE_NAME",
              "value": "smtp-mail-notification-service",
              "valueType": "plain"
            },
            {
              "name": "SMS_SERVICE_NAME",
              "value": "sms-service",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "description": "Service used to send notification through various medium",
          "dockerImage": "nexus.mia-platform.eu/plugins/messaging-service:{{MESSAGING_SERVICE_VERSION}}",
          "name": "messaging-service",
          "type": "plugin"
        },
        "payment-front-end": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"primaryColor\\": \\"#EA5159\\",   \\"backgroundColor\\": \\"#ffffff\\",   \\"bodyColor\\": \\"#F4F4F4\\",   \\"fontColor\\": \\"#555555\\",   \\"logo\\": \\"./logo.webp\\",   \\"favicon\\": \\"./favicon.webp\\",   \\"title\\": \\"Payment\\",   \\"pages\\": {     \\"home\\": \\"/demo/checkout\\",     \\"checkout\\": \\"/demo/checkout\\",     \\"subscription\\": \\"/demo/subscription\\",     \\"buyer\\": \\"/demo/buyer\\",     \\"pay\\": \\"/demo/pay\\",     \\"result\\": \\"/demo/result\\",     \\"error\\": \\"/demo/error\\",     \\"pending\\": \\"/demo/pending\\"   },   \\"endpoint\\": {     \\"pay\\": \\"/pay\\",     \\"paySubscription\\": \\"/pay-recurrent\\",     \\"payPolling\\": \\"/pay-polling\\",     \\"payByLink\\": \\"/pay-by-link\\",     \\"downloadInvoice\\": \\"/invoice-download\\",     \\"checkout\\": \\"/fm/saga\\",     \\"checkoutSubscription\\": \\"/create\\",     \\"paymentDetail\\": \\"/payment-info\\",     \\"paymentMethods\\": \\"/payment/{id}/methods\\",     \\"axerveCreditToken\\": \\"https://sandbox.gestpay.net/api/v1/shop/token\\",     \\"applePaySession\\": \\"/apple-pay-session\\",     \\"paymentTokenization\\": \\"/tokenization\\"   },   \\"googlepay\\": {     \\"environment\\": \\"TEST\\",     \\"countryCode\\": \\"IT\\"   },   \\"applePay\\": {     \\"merchantIdentifier\\": \\"CHANGE ME\\",     \\"domain\\": \\"{{PROJECT_HOST}}\\",     \\"displayName\\": \\"CHANGE ME\\"   },   \\"pollingInterval\\": 2000 }",
                  "name": "env.json"
                }
              ],
              "mountPath": "/usr/static/config",
              "name": "payment-front-end",
              "viewAsReadOnly": false
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "BASE_PATH",
              "value": "/demo/",
              "valueType": "plain"
            },
            {
              "name": "VITE_AXERVE_API_KEY",
              "value": "{{AXERVE_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "VITE_AXERVE_SHOPLOGIN",
              "value": "{{AXERVE_SHOP_LOGIN}}",
              "valueType": "plain"
            },
            {
              "name": "VITE_ADYEN_KEY",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "VITE_BRAINTREE_KEY",
              "value": "{{BRAINTREE_TOKENIZATION_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "VITE_GOOGLE_MERCHANT_ID",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "VITE_GOOGLE_MERCHANT_NAME",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "VITE_POLLING_INTERVAL",
              "value": "10000",
              "valueType": "plain"
            },
            {
              "name": "CSP_HEADER",
              "value": "\\"default-src 'self'; script-src 'self' *.adyen.com/checkoutshopper/v2/analytics/id pay.google.com js.braintreegateway.com assets.braintreegateway.com www.paypalobjects.com c.paypal.com applepay.cdn-apple.com; object-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self' www.gstatic.com assets.braintreegateway.com checkout.paypal.com data: https://checkoutshopper-test.adyen.com; font-src 'self' applepay.cdn-apple.com; child-src 'self' assets.braintreegateway.com c.paypal.com; frame-src 'self' pay.google.com assets.braintreegateway.com c.paypal.com checkout.paypal.com *.cardinalcommerce.com https://checkoutshopper-test.adyen.com; connect-src 'self' https://sandbox.gestpay.net/api/v1/shop/token api.sandbox.braintreegateway.com client-analytics.sandbox.braintreegateway.com *.braintree-api.com *.adyen.com/checkoutshopper/v2/analytics/log *.adyen.com/checkoutshopper/v2/analytics/id *.adyen.com/checkoutshopper/v3/bin/binLookup\\"",
              "valueType": "plain"
            },
            {
              "name": "VITE_DEMO_API_KEY",
              "value": "CHANGE ME",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "description": "",
          "dockerImage": "nexus.mia-platform.eu/plugins/payments-front-end:{{PAYMENT_FRONTEND_VERSION}}",
          "name": "payment-front-end",
          "type": "plugin"
        },
        "payment-gateway-manager": {
          "componentId": "payment-gateway-manager",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"externalServices\\": [     {       \\"externalService\\": \\"CHANGE ME\\",       \\"baseUrl\\": \\"CHANGE ME\\"     }     ] }",
                  "name": "external-providers.json"
                }
              ],
              "mountPath": "/config",
              "name": "pgm-config",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/openapi.json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_CONFIG_FILE",
              "value": "./prod-logback.xml",
              "valueType": "plain"
            },
            {
              "name": "ENABLED_PROVIDERS",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "PAYMENT_CALLBACK_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "STRIPE_BASE_URL",
              "value": "https://api.stripe.com",
              "valueType": "plain"
            },
            {
              "name": "STRIPE_PRIVATE_KEY",
              "value": "{{STRIPE_PRIVATE_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_IS_SANDBOX",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_KEY_ID",
              "value": "{{SATISPAY_KEY_ID}}",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_PRIVATE_KEY",
              "value": "{{SATISPAY_PRIVATE_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_AFTER_BUY_WEB_REDIRECT_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_AFTER_BUY_MOBILE_REDIRECT_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_WAITING_SECONDS",
              "value": "0",
              "valueType": "plain"
            },
            {
              "name": "PGM_PUBLIC_URL",
              "value": "https://{{PROJECT_HOST}}/payment-gateway-manager",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-service",
              "valueType": "plain"
            },
            {
              "name": "SAGA_CRUD_URL",
              "value": "http://crud-service/fm-transactions/",
              "valueType": "plain"
            },
            {
              "name": "BRAINTREE_MERCHANT_ID",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "BRAINTREE_MERCHANT_ACCOUNT_ID",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "BRAINTREE_PUBLIC_KEY",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "BRAINTREE_PRIVATE_KEY",
              "value": "{{BRAINTREE_PRIVATE_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "BRAINTREE_IS_SANDBOX",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SCALAPAY_BASE_PATH",
              "value": "https://integration.api.scalapay.com/",
              "valueType": "plain"
            },
            {
              "name": "SCALAPAY_API_KEY",
              "value": "{{SCALAPAY_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "SCALAPAY_SUCCESS_REDIRECT_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SCALAPAY_FAILURE_REDIRECT_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SOISY_SHOP_ID",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "SOISY_PARTNER_KEY",
              "value": "{{SOISY_PARTNER_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "SOISY_BASE_URL",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "BASIC",
              "valueType": "plain"
            },
            {
              "name": "ADAPTIVE_CHECKOUT_CACHE_EXPIRE_MIN",
              "value": "1",
              "valueType": "plain"
            },
            {
              "name": "AXERVE_IS_SANDBOX",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "AXERVE_SHOP_LOGIN",
              "value": "{{AXERVE_SHOP_LOGIN}}",
              "valueType": "plain"
            },
            {
              "name": "AXERVE_API_KEY",
              "value": "{{AXERVE_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "EXTERNAL_PROVIDERS_CONFIG",
              "value": "/config/external-providers.json",
              "valueType": "plain"
            },
            {
              "name": "ADYEN_IS_TEST",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "ADYEN_MERCHANT_ACCOUNT",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "ADYEN_HMAC_KEY",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "ADYEN_PRIVATE_KEY",
              "value": "{{ADYEN_PRIVATE_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "SATISPAY_CALLBACK_URL",
              "value": "https://{{PROJECT_HOST}}/callback-satispay",
              "valueType": "plain"
            },
            {
              "name": "SUBSCRIPTION_HANDLER_URL",
              "value": "http://subscription-handler-service",
              "valueType": "plain"
            },
            {
              "name": "NEXI_BASE_URL",
              "value": "https://stg-ta.nexigroup.com",
              "valueType": "plain"
            },
            {
              "name": "NEXI_API_KEY",
              "value": "{{NEXI_API_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "NEXI_CALLBACK_URL",
              "value": "https://{{PROJECT_HOST}}/callback-nexi",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_API_BASE_URL",
              "value": "https://core.c2c-development.flowpay.it",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_CORE_BASE_URL",
              "value": "https://core.c2c-development.flowpay.it",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_CLIENT_ID",
              "value": "{{FLOWPAY_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_CLIENT_SECRET",
              "value": "{{FLOWPAY_CLIENT_SECRET}}",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_PUBLIC_KEY",
              "value": "{{FLOWPAY_PUBLIC_KEY}}",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_CHECKOUT_BASE_URL",
              "value": "https://checkout.c2c-development.flowpay.it",
              "valueType": "plain"
            },
            {
              "name": "FLOWPAY_CALLBACK_URL",
              "value": "https://{{PROJECT_HOST}}/callback-flowpay",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 5
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 5
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/plugins/payment-gateway-manager:{{PGM_VERSION}}",
          "name": "payment-gateway-manager",
          "type": "plugin"
        },
        "pgm-bff": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-service",
              "valueType": "plain"
            },
            {
              "name": "PAYMENT_OK_REDIRECT_URL",
              "value": "https://{{PROJECT_HOST}}/demo/result",
              "valueType": "plain"
            },
            {
              "name": "PAYMENT_KO_REDIRECT_URL",
              "value": "https://{{PROJECT_HOST}}/demo/result",
              "valueType": "plain"
            },
            {
              "name": "PGM_URL",
              "value": "http://payment-gateway-manager",
              "valueType": "plain"
            },
            {
              "name": "INVOICE_SERVICE_URL",
              "value": "http://invoice-service",
              "valueType": "plain"
            },
            {
              "name": "FILES_SERVICE_URL",
              "value": "http://files-service",
              "valueType": "plain"
            },
            {
              "name": "SAGA_CRUD_URL",
              "value": "http://crud-service/fm-transactions",
              "valueType": "plain"
            },
            {
              "name": "INVOICE_CRUD_URL",
              "value": "http://crud-service/invoices",
              "valueType": "plain"
            },
            {
              "name": "PAYMENT_PENDING_REDIRECT_URL",
              "value": "https://{{PROJECT_HOST}}/demo/pending",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "userid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "usergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "clienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "userproperties",
              "valueType": "plain"
            },
            {
              "name": "SUBSCRIPTION_HANDLER_SERVICE",
              "value": "http://subscription-handler-service",
              "valueType": "plain"
            },
            {
              "name": "PAY_BY_LINK_PROVIDER",
              "value": "{{PROVIDER_PAY_BY_LINK}}",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_URL",
              "value": "http://crud-service/users",
              "valueType": "plain"
            },
            {
              "name": "SAGA_SUBSCRIPTION_CRUD_URL",
              "value": "http://crud-service/fm-subscriptions",
              "valueType": "plain"
            },
            {
              "name": "ADAPTIVE_CHECKOUT_URL",
              "value": "http://adaptive-approval",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/fintech/pgm-bff:{{BFF_VERSION}}",
          "name": "pgm-bff",
          "type": "plugin"
        },
        "sms-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "to": 3000
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOGS}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PROVIDER",
              "value": "twilio",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_ACCOUNT_SID",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_AUTH_TOKEN",
              "value": "{{SMS_AUTH_TOKEN}}",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_EMPTY_BALANCE_CHECK",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "RATE_LIMIT_MAX_REQUESTS",
              "value": "3",
              "valueType": "plain"
            },
            {
              "name": "RATE_LIMIT_TIME_WINDOW",
              "value": "60000",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/plugins/sms-service:1.2.1",
          "name": "sms-service",
          "type": "plugin"
        },
        "smtp-mail-notification-service": {
          "componentId": "smtp-mail-notification-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "HOST",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "CHANGE ME",
              "valueType": "plain"
            },
            {
              "name": "AUTH_TYPE",
              "value": "login",
              "valueType": "plain"
            },
            {
              "name": "AUTH_USER",
              "value": "{{EMAIL_SENDER}}",
              "valueType": "plain"
            },
            {
              "name": "AUTH_PASS",
              "value": "{{EMAIL_AUTH_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "TLS_SECURE",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "TLS_IGNORE",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 5
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 5
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "50Mi"
            }
          },
          "dockerImage": "nexus.mia-platform.eu/plugins/smtp-mail-notification-service:3.3.0",
          "name": "smtp-mail-notification-service",
          "type": "plugin"
        },
        "subscription-handler-service": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOGS}}",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "SUBSCRIPTIONS_FLOW_MANAGER_URL",
              "value": "http://subscription-saga",
              "valueType": "plain"
            },
            {
              "name": "PAYMENTS_FLOW_MANAGER_URL",
              "value": "http://flow-manager-service",
              "valueType": "plain"
            },
            {
              "name": "PAYMENTS_CRUD_URL",
              "value": "http://crud-service/fm-transactions",
              "valueType": "plain"
            },
            {
              "name": "SUBSCRIPTIONS_CRUD_URL",
              "value": "http://crud-service/fm-subscriptions",
              "valueType": "plain"
            },
            {
              "name": "RUNNING_INTERVAL_CRON",
              "value": "120s",
              "valueType": "plain"
            },
            {
              "name": "ENABLED_STATES",
              "value": "ACTIVE,PAYMENT_FAILED",
              "valueType": "plain"
            },
            {
              "name": "MANUAL_PROVIDERS",
              "value": "satispay,axerve,adyen",
              "valueType": "plain"
            },
            {
              "name": "PGM_URL",
              "value": "http://payment-gateway-manager",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "50Mi"
            }
          },
          "description": "Handles the entire subscriptions' lifecycle ",
          "dockerImage": "nexus.mia-platform.eu/fintech/subscription-handler:{{SUB_HANDLER_VERSION}}",
          "name": "subscription-handler-service",
          "type": "plugin"
        },
        "subscription-saga": {
          "componentId": "flow-manager",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{   \\"machineDefinition\\": {     \\"initialState\\": \\"CREATED\\",     \\"creationEvent\\": \\"create\\",     \\"states\\": [       {         \\"id\\": \\"CREATED\\",         \\"description\\": \\"Subscription created on CRUD\\",         \\"isFinal\\": false,         \\"businessStateId\\": 0,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"update\\",             \\"targetState\\": \\"CREATED\\",             \\"businessEventId\\": 0           },           {             \\"inputEvent\\": \\"start\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expire\\",             \\"targetState\\": \\"EXPIRED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"abort\\",             \\"targetState\\": \\"ABORTED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"PAYMENT_PENDING\\",         \\"description\\": \\"A payment is processing\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"update\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentExecuted\\",             \\"targetState\\": \\"ACTIVE\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"paymentFailed\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 10           },           {             \\"inputEvent\\": \\"expire\\",             \\"targetState\\": \\"EXPIRED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"abort\\",             \\"targetState\\": \\"ABORTED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"ACTIVE\\",         \\"description\\": \\"Subscription is active\\",         \\"isFinal\\": false,         \\"businessStateId\\": 1,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"update\\",             \\"targetState\\": \\"ACTIVE\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"scheduleNextPayment\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expire\\",             \\"targetState\\": \\"EXPIRED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"abort\\",             \\"targetState\\": \\"ABORTED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"PAYMENT_FAILED\\",         \\"description\\": \\"A payment has failed\\",         \\"isFinal\\": false,         \\"businessStateId\\": 10,         \\"outgoingTransitions\\": [           {             \\"inputEvent\\": \\"update\\",             \\"targetState\\": \\"PAYMENT_FAILED\\",             \\"businessEventId\\": 10           },           {             \\"inputEvent\\": \\"scheduleNextPayment\\",             \\"targetState\\": \\"PAYMENT_PENDING\\",             \\"businessEventId\\": 1           },           {             \\"inputEvent\\": \\"expire\\",             \\"targetState\\": \\"EXPIRED\\",             \\"businessEventId\\": 1000           },           {             \\"inputEvent\\": \\"abort\\",             \\"targetState\\": \\"ABORTED\\",             \\"businessEventId\\": 1001           }         ]       },       {         \\"id\\": \\"EXPIRED\\",         \\"description\\": \\"Subscription expired\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1000       },       {         \\"id\\": \\"ABORTED\\",         \\"description\\": \\"Subscription aborted after several failure\\",         \\"isFinal\\": true,         \\"businessStateId\\": 1001       }     ],     \\"businessStates\\": [       {         \\"id\\": 0,         \\"description\\": \\"CREATED\\"       },       {         \\"id\\": 1,         \\"description\\": \\"ACTIVE\\"       },       {         \\"id\\": 10,         \\"description\\": \\"ON_HOLD\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"EXPIRED\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"ABORTED\\"       }     ],     \\"businessEvents\\": [       {         \\"id\\": 0,         \\"description\\": \\"created\\"       },       {         \\"id\\": 1,         \\"description\\": \\"activated\\"       },       {         \\"id\\": 10,         \\"description\\": \\"on_hold\\"       },       {         \\"id\\": 1000,         \\"description\\": \\"expired\\"       },       {         \\"id\\": 1001,         \\"description\\": \\"abort\\"       }     ]   },   \\"communicationProtocols\\": [],   \\"persistencyManagement\\": {     \\"type\\": \\"crud\\",     \\"configurations\\": {       \\"collectionName\\": \\"fm-subscriptions\\"     }   },   \\"settings\\": {     \\"deepMergeMetadata\\": {       \\"enabled\\": true     }   } }",
                  "name": "saga.json"
                }
              ],
              "mountPath": "/configuration",
              "name": "subscription-saga-configuration",
              "viewAsReadOnly": false
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "/configuration/saga.json",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "sb",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "description": "The Flow Manager is a saga orchestrator, capable to manage flows structured by using the Architectural pattern named Saga Pattern",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:2.6.5",
          "name": "subscription-saga",
          "type": "plugin"
        }
      },
      "collections": {
        "fm_subscriptions": {
          "defaultName": "fm_subscriptions",
          "description": "Collection of fm_subscriptions",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "sagaId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "metadata",
              "nullable": false,
              "required": true,
              "schema": {
                "properties": {
                  "additionalData": {
                    "type": "object"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "expirationDate": {
                    "type": "string"
                  },
                  "expireRequested": {
                    "type": "boolean"
                  },
                  "interval": {
                    "type": "string"
                  },
                  "intervalCount": {
                    "type": "number"
                  },
                  "nextPaymentDate": {
                    "nullable": true,
                    "type": "string"
                  },
                  "paymentMethod": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "providerData": {
                    "type": "object"
                  },
                  "shopSubscriptionId": {
                    "type": "string"
                  },
                  "transactions": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              },
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "isFinal",
              "nullable": false,
              "required": true,
              "type": "boolean"
            },
            {
              "description": "",
              "name": "currentState",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "latestEvent",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "associatedEntityId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "events",
              "nullable": false,
              "required": false,
              "type": "Array_string"
            },
            {
              "description": "",
              "name": "history",
              "nullable": false,
              "required": false,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "businessStateId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "businessStateDescription",
              "nullable": false,
              "required": false,
              "type": "string"
            }
          ],
          "id": "fm_subscriptions",
          "internalEndpoints": [
            {
              "basePath": "/fm-subscriptions",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "fm_transactions": {
          "defaultName": "fm_transactions",
          "description": "Collection of fm_transactions",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "sagaId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "metadata",
              "nullable": false,
              "required": true,
              "schema": {
                "properties": {
                  "additionalData": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "description": {
                              "type": "string"
                            },
                            "itemId": {
                              "type": "string"
                            },
                            "quantity": {
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "buyer": {
                    "type": "object"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "isRecurrent": {
                    "type": "boolean"
                  },
                  "paymentID": {
                    "type": "string"
                  },
                  "paymentMethod": {
                    "type": "string"
                  },
                  "paymentToken": {
                    "type": "string"
                  },
                  "payRequestData": {
                    "type": "object"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "providerData": {
                    "type": "object"
                  },
                  "recurrenceDetails": {
                    "type": "object"
                  },
                  "refundDetails": {
                    "type": "object"
                  },
                  "refundRequestData": {
                    "type": "object"
                  },
                  "sessionToken": {
                    "type": "string"
                  },
                  "shopTransactionID": {
                    "type": "string"
                  },
                  "subscriptionId": {
                    "type": "string"
                  }
                }
              },
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "isFinal",
              "nullable": false,
              "required": true,
              "type": "boolean"
            },
            {
              "description": "",
              "name": "currentState",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "latestEvent",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "associatedEntityId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "events",
              "nullable": false,
              "required": false,
              "type": "Array_string"
            },
            {
              "description": "",
              "name": "history",
              "nullable": false,
              "required": false,
              "type": "RawObject"
            },
            {
              "description": "",
              "name": "businessStateId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "",
              "name": "businessStateDescription",
              "nullable": false,
              "required": false,
              "type": "string"
            }
          ],
          "id": "fm_transactions",
          "internalEndpoints": [
            {
              "basePath": "/fm-transactions",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "invoices": {
          "defaultName": "invoices",
          "description": "Collection of invoices",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "file",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "size",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "location",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "sagaId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "invoices",
          "internalEndpoints": [
            {
              "basePath": "/invoices",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "notification_templates": {
          "defaultName": "notification_templates",
          "description": "Collection of notification_templates",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailTitle",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailHtmlMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "smsMessage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "notification_templates",
          "internalEndpoints": [
            {
              "basePath": "/notification-templates",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "rules": {
          "defaultName": "rules",
          "description": "Collection of rules",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "priority",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "ruleId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "type",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "rules",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "response",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            }
          ],
          "id": "rules",
          "internalEndpoints": [
            {
              "basePath": "/rules",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        },
        "users": {
          "defaultName": "users",
          "description": "Collection of users",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "emailAddress",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "phoneNumber",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "clusters",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            }
          ],
          "id": "users",
          "internalEndpoints": [
            {
              "basePath": "/users",
              "defaultState": "PUBLIC"
            }
          ],
          "tags": [
            "collection"
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/",
          "defaultPathRewrite": "/",
          "description": "Endpoint /",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": true,
          "service": "pgm-bff",
          "tags": [
            "pgm-bff"
          ],
          "type": "custom"
        },
        "/adaptive-checkout": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/adaptive-checkout",
          "defaultPathRewrite": "/rules",
          "description": "Endpoint /adaptive-checkout",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "tags": [
            "crud"
          ],
          "type": "crud",
          "collectionId": "rules"
        },
        "/analytics": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/analytics",
          "defaultPathRewrite": "/",
          "description": "Endpoint /analytics",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "analytics-transactions",
          "tags": [
            "analytics"
          ],
          "type": "custom"
        },
        "/api/charts/dashboards": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/api/charts/dashboards",
          "defaultPathRewrite": "/",
          "description": "Endpoint /api/charts/dashboards",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "data-visualization-backend",
          "tags": [
            "data-visualization-backend"
          ],
          "type": "custom"
        },
        "/callback-adyen": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-adyen",
          "defaultPathRewrite": "/v3/adyen/callback",
          "description": "Endpoint /callback-adyen",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-axerve": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-axerve",
          "defaultPathRewrite": "/v3/axerve/callback",
          "description": "Endpoint /callback-axerve",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-braintree": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-braintree",
          "defaultPathRewrite": "/v3/braintree/callback",
          "description": "Endpoint /callback-braintree",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-flowpay": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-flowpay",
          "defaultPathRewrite": "/v3/flowpay/callback",
          "description": "Endpoint /callback-flowpay",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-nexi": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-nexi",
          "defaultPathRewrite": "/v3/nexi/callback",
          "description": "Endpoint /callback-nexi",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-satispay": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-satispay",
          "defaultPathRewrite": "/v3/satispay/callback",
          "description": "Endpoint /callback-satispay",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-scalapay": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-scalapay",
          "defaultPathRewrite": "/v3/scalapay/callback",
          "description": "Endpoint /callback-scalapay",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-soisy": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-soisy",
          "defaultPathRewrite": "/v3/soisy/callback",
          "description": "Endpoint /callback-soisy",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/callback-stripe": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/callback-stripe",
          "defaultPathRewrite": "/v3/stripe/callback",
          "description": "Endpoint /callback-stripe",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-gateway-manager",
          "tags": [
            "payment-gateway-manager"
          ],
          "type": "custom"
        },
        "/data-visualization": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/data-visualization",
          "defaultPathRewrite": "/",
          "description": "Endpoint /data-visualization",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "data-visualization-frontend",
          "tags": [
            "data-visualization-frontend"
          ],
          "type": "custom"
        },
        "/demo": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/demo",
          "defaultPathRewrite": "/",
          "description": "Endpoint /demo",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "payment-front-end",
          "tags": [
            "payment-front-end"
          ],
          "type": "custom"
        },
        "/export": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/export",
          "defaultPathRewrite": "/export",
          "description": "Endpoint /export",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": true,
          "service": "export-service",
          "tags": [
            "export-service"
          ],
          "type": "custom"
        },
        "/fm": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/fm",
          "defaultPathRewrite": "/",
          "description": "Endpoint /fm",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": true,
          "service": "flow-manager-service",
          "tags": [
            "flow-manager-service"
          ],
          "type": "custom"
        }
      },
      "unsecretedVariables": {
        "ANALYTICS_TRANSACTIONS_VERSION": {
          "noProductionEnv": "2.1.0",
          "productionEnv": "2.1.0"
        },
        "BFF_VERSION": {
          "noProductionEnv": "2.3.0",
          "productionEnv": "2.3.0"
        },
        "CRUD_SERVICE_VERSION": {
          "noProductionEnv": "7.2.0",
          "productionEnv": "7.2.0"
        },
        "DATA_VIZ_BE_VERSION": {
          "noProductionEnv": "2.0.1",
          "productionEnv": "2.0.1"
        },
        "DATA_VIZ_FE_VERSION": {
          "noProductionEnv": "1.8.2",
          "productionEnv": "1.8.2"
        },
        "EMAIL_SENDER": {
          "noProductionEnv": "CHANGE ME",
          "productionEnv": "CHANGE ME"
        },
        "FRULLINO_VERSION": {
          "noProductionEnv": "2.1.0",
          "productionEnv": "2.1.0"
        },
        "LOGS": {
          "noProductionEnv": "debug",
          "productionEnv": "info"
        },
        "MESSAGING_SERVICE_VERSION": {
          "noProductionEnv": "1.5.0",
          "productionEnv": "1.5.0"
        },
        "NOTIFICATION_TEMPLATE_IDS": {
          "noProductionEnv": "[ [\\"PAY_BY_LINK\\", \\"CHANGE ME\\"], [\\"PAYMENT_EXECUTED\\", \\"CHANGE ME\\"], [\\"PAYMENT_FAILED\\", \\"CHANGE ME\\"], [\\"PARTIAL_REFUND_EXECUTED\\", \\"CHANGE ME\\"], [\\"TOTAL_REFUND_EXECUTED\\", \\"CHANGE ME\\"] ]",
          "productionEnv": "[ [\\"PAY_BY_LINK\\", \\"CHANGE ME\\"], [\\"PAYMENT_EXECUTED\\", \\"CHANGE ME\\"], [\\"PAYMENT_FAILED\\", \\"CHANGE ME\\"], [\\"PARTIAL_REFUND_EXECUTED\\", \\"CHANGE ME\\"], [\\"TOTAL_REFUND_EXECUTED\\", \\"CHANGE ME\\"] ]"
        },
        "PAYMENT_FRONTEND_VERSION": {
          "noProductionEnv": "1.4.0",
          "productionEnv": "1.4.0"
        },
        "PGM_VERSION": {
          "noProductionEnv": "3.5.0",
          "productionEnv": "3.5.0"
        },
        "PROJECT_HOST": {
          "noProductionEnv": "CHANGE ME",
          "productionEnv": "CHANGE ME"
        },
        "PROVIDER_PAY_BY_LINK": {
          "noProductionEnv": "CHANGE ME",
          "productionEnv": "CHANGE ME"
        },
        "SUB_HANDLER_VERSION": {
          "noProductionEnv": "1.1.1",
          "productionEnv": "1.1.1"
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-10-27T10:51:07.127Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "payment-integration-hub.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The PDF Services provides various functionalities to programmatically generate and manipulate pdf documents.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/pdf-service/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "pdf-service",
    "name": "PDF Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/pdf-service",
    "resources": {
      "services": {
        "pdf-service": {
          "type": "plugin",
          "name": "pdf-service",
          "description": "The PDF Services provides various functionalities to programmatically generate and manipulate pdf documents.",
          "dockerImage": "nexus.mia-platform.eu/plugins/pdf-service:2.1.0",
          "componentId": "pdf-service",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "miauserid,miausergroups,miaclienttype,client-type,secret,cookie,accept-language",
              "valueType": "plain"
            },
            {
              "name": "DOCKER",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "PDF_TEMPLATE_ENDPOINT",
              "value": "/pdf-template",
              "valueType": "plain"
            },
            {
              "name": "HEALTHINESS_CHECK",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "TIMEOUT_VALUE",
              "value": "30000",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.0",
      "releaseNote": "- Upgrade Node.js (v22) and other dependencies\\n- Add env var TIMEOUT_VALUE to reboot automatically if container goes in timeout"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-06-16T10:00:00.000Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "pdf-service_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The PDF Services provides various functionalities to programmatically generate and manipulate pdf documents.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/pdf-service/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "pdf-service",
    "name": "PDF Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/pdf-service",
    "resources": {
      "services": {
        "pdf-service": {
          "type": "plugin",
          "name": "pdf-service",
          "description": "The PDF Services provides various functionalities to programmatically generate and manipulate pdf documents.",
          "dockerImage": "nexus.mia-platform.eu/plugins/pdf-service:2.0.1",
          "componentId": "pdf-service",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DOCKER",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.026Z",
    "lifecycleStatus": "draft",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "pdf-service_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The PDF Services provides various functionalities to programmatically generate and manipulate pdf documents.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/pdf-service/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "pdf-service",
    "name": "PDF Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/pdf-service",
    "resources": {
      "services": {
        "pdf-service": {
          "type": "plugin",
          "name": "pdf-service",
          "description": "The PDF Services provides various functionalities to programmatically generate and manipulate pdf documents.",
          "dockerImage": "nexus.mia-platform.eu/plugins/pdf-service:2.0.1",
          "componentId": "pdf-service",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "DOCKER",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-05-12T16:10:51.036Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "pdf-service_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Pharma Ecommerce Backend is a Mia-Care plugin that provides APIs that can be used to create your own pharmaceutical e-commerce.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/pharma-ecommerce-backend/overview"
    },
    "itemId": "pharma-ecommerce-backend",
    "name": "Pharma Ecommerce Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/pharma-ecommerce-backend",
    "resources": {
      "services": {
        "pharma-ecommerce-backend": {
          "type": "plugin",
          "name": "pharma-ecommerce-backend",
          "description": "The Pharma Ecommerce Backend is a Mia-Care plugin that provides APIs that can be used to create your own pharmaceutical e-commerce.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/pharma-ecommerce-backend:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE",
              "valueType": "plain",
              "value": "crud-service"
            },
            {
              "name": "PRESCRIPTION_MANAGER",
              "valueType": "plain",
              "value": "prescription-manager"
            },
            {
              "name": "PHARMAPRIME_PARTNER_TOKEN",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PHARMAPRIME_BASE_PATH",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DOWNLOAD_PRESCRIPTION_PDF_ENDPOINT",
              "valueType": "plain",
              "value": "/prescriptions/download"
            },
            {
              "name": "PRESCRIPTION_ENDPOINT",
              "valueType": "plain",
              "value": "/prescriptions/items"
            },
            {
              "name": "MIA_USERS_CRUD_ENDPOINT",
              "valueType": "plain",
              "value": "/users"
            },
            {
              "name": "MIA_ORDERS_CRUD_ENDPOINT",
              "valueType": "plain",
              "value": "/pharma-ecommerce-orders"
            },
            {
              "name": "LANGUAGE",
              "valueType": "plain",
              "value": "it-IT"
            },
            {
              "name": "ORDERS_MAX_COUNTER",
              "valueType": "plain",
              "value": "100"
            },
            {
              "name": "ACTIVE_PROVIDERS",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DEFAULT_LATITUDE",
              "valueType": "plain",
              "value": "45.464664"
            },
            {
              "name": "DEFAULT_LONGITUDE",
              "valueType": "plain",
              "value": "9.188540"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.957Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "pharma-ecommerce-backend-plugin.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Pharma Ecommerce Backend is a Mia-Care plugin that provides APIs that can be used to create your own pharmaceutical e-commerce.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/pharma-ecommerce-backend/overview"
    },
    "itemId": "pharma-ecommerce-backend",
    "name": "Pharma Ecommerce Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/pharma-ecommerce-backend",
    "resources": {
      "services": {
        "pharma-ecommerce-backend": {
          "type": "plugin",
          "name": "pharma-ecommerce-backend",
          "description": "The Pharma Ecommerce Backend is a Mia-Care plugin that provides APIs that can be used to create your own pharmaceutical e-commerce.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/pharma-ecommerce-backend:1.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE",
              "valueType": "plain",
              "value": "crud-service"
            },
            {
              "name": "PRESCRIPTION_MANAGER",
              "valueType": "plain",
              "value": "prescription-manager"
            },
            {
              "name": "PHARMAPRIME_PARTNER_TOKEN",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "PHARMAPRIME_BASE_PATH",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DOWNLOAD_PRESCRIPTION_PDF_ENDPOINT",
              "valueType": "plain",
              "value": "/prescriptions/download"
            },
            {
              "name": "PRESCRIPTION_ENDPOINT",
              "valueType": "plain",
              "value": "/prescriptions/items"
            },
            {
              "name": "MIA_USERS_CRUD_ENDPOINT",
              "valueType": "plain",
              "value": "/users"
            },
            {
              "name": "MIA_ORDERS_CRUD_ENDPOINT",
              "valueType": "plain",
              "value": "/pharma-ecommerce-orders"
            },
            {
              "name": "LANGUAGE",
              "valueType": "plain",
              "value": "it-IT"
            },
            {
              "name": "ORDERS_MAX_COUNTER",
              "valueType": "plain",
              "value": "100"
            },
            {
              "name": "ACTIVE_PROVIDERS",
              "valueType": "plain",
              "value": "CHANGE ME"
            },
            {
              "name": "DEFAULT_LATITUDE",
              "valueType": "plain",
              "value": "45.464664"
            },
            {
              "name": "DEFAULT_LONGITUDE",
              "valueType": "plain",
              "value": "9.188540"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-22T17:30:21.329Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "pharma-ecommerce-backend-plugin.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.4.0",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.4.0",
      "releaseNote": "### Added\\n\\n- introduce \`forceResume\` parameter in Control Plane settings to control the service behavior in case of unsuccessful connection with Control Plane Operator\\n\\n### Changed\\n\\n- Control Plane settings \`state\` and \`feedback\` properties are now optional\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.026Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.5",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.3.5",
      "releaseNote": "### Build\\n\\n- added procedure to sign service image and generate its SBOM\\n\\n### Fixed\\n\\n- SSL default behavior, when no SSL custom configuration is provided\`, has been restored to the one adopted from service version prior to \`v1.3.2\`\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.666Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.4",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.3.4",
      "releaseNote": "### Fixed\\n\\n- the logic of provided cast function castToDate has been overhauled, so that dates represented as Unix timestamp in millisecond that ranges from \`-2147483648\` (\`1969-12-07T03:28:36.352Z\`) to \`2147483647\` (\`1970-01-25T20:31:23.647Z\`) are now properly converted into their expected date. \\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.874Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.3",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.3.3",
      "releaseNote": "### Fixed\\n\\n- Bug introduced with version \`v1.3.2\`, where insufficient service permissions prevented GraalVM cache to be initialized when custom cast functions were employed. \\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.872Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.2",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.3.2",
      "releaseNote": "### Fixed\\n\\n- introduce support for TLS/SSL connection for storage component\` \\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-11-18T17:09:39.874Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.1",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.3.1",
      "releaseNote": "### Fixed\\n\\n- When Control Plane Operator closes the grpc client the Projection Storer is able to reconnect to it again when it re-opens without having to restart the service\\n\\n### Update\\n\\n- update service dependencies and Java build image to \`21.0.4_7-jdk-jammy\` \\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-10-10T16:15:06.841Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.0",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.3.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.027Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/projection_storer"
    },
    "itemId": "projection-storer",
    "name": "Projection Storer",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/projection-storer",
    "resources": {
      "services": {
        "projection-storer": {
          "type": "plugin",
          "name": "projection-storer",
          "description": "Consumes ingestion events in order to keep the Fast Data projections records up to date with the connected System of Record.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/projection-storer:1.3.0",
          "componentId": "projection-storer",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/app/conf/config.json",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "400Mi",
              "max": "600Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "1000m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-11-30T17:52:19.221Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "projection-storer_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "This microservice offers some useful features for easily and safely handling the push notifications data.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/push-notification-manager/configuration"
    },
    "itemId": "push-notification-manager",
    "name": "Push Notification Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/notifications-manager",
    "resources": {
      "services": {
        "push-notification-manager": {
          "type": "plugin",
          "name": "push-notification-manager",
          "description": "This microservice offers some useful features for easily and safely handling the push notifications data.",
          "dockerImage": "nexus.mia-platform.eu/plugins/notifications-manager:2.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_NOTIFICATIONS_COLLECTION",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.027Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "push-notification-manager.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "This microservice offers some useful features for easily and safely handling the push notifications data.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/push-notification-manager/configuration"
    },
    "itemId": "push-notification-manager",
    "name": "Push Notification Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/notifications-manager",
    "resources": {
      "services": {
        "push-notification-manager": {
          "type": "plugin",
          "name": "push-notification-manager",
          "description": "This microservice offers some useful features for easily and safely handling the push notifications data.",
          "dockerImage": "nexus.mia-platform.eu/plugins/notifications-manager:2.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATIONS_COLLECTION_NAME",
              "value": "CHANGE_WITH_YOUR_NOTIFICATIONS_COLLECTION",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_SERVICE_PREFIX",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_PATH_PREFIX",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "push-notification-manager.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Use REST API for push notifications to Android and iOS devices. Use it paired with Notifications Manager.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/push-notification-sender/overview"
    },
    "itemId": "push-notification-sender",
    "name": "Push Notification Sender",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/notifications-service",
    "resources": {
      "services": {
        "push-notification-sender": {
          "type": "plugin",
          "name": "push-notification-sender",
          "description": "Use REST API for push notifications to Android and iOS devices. Use it paired with Notifications Manager.",
          "dockerImage": "nexus.mia-platform.eu/plugins/notifications-service:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CONFIG_FILE_PATH",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.027Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "push-notification-sender_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Use REST API for push notifications to Android and iOS devices. Use it paired with Notifications Manager.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/push-notification-sender/overview"
    },
    "itemId": "push-notification-sender",
    "name": "Push Notification Sender",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/notifications-service",
    "resources": {
      "services": {
        "push-notification-sender": {
          "type": "plugin",
          "name": "push-notification-sender",
          "description": "Use REST API for push notifications to Android and iOS devices. Use it paired with Notifications Manager.",
          "dockerImage": "nexus.mia-platform.eu/plugins/notifications-service:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "CHANGE_WITH_YOUR_CONFIG_FILE_PATH",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "push-notification-sender_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "python",
    "description": "Example of Python Microservice based on Falcon",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/python-falcon-hello-world-microservice-example/master/README.md"
    },
    "itemId": "python-falcon-hello-world",
    "name": "Python Falcon Hello World",
    "resources": {
      "services": {
        "python-falcon-hello-world": {
          "type": "example",
          "name": "python-falcon-hello-world",
          "description": "Example of Python Microservice based on Falcon",
          "archiveUrl": "https://github.com/mia-platform-marketplace/python-falcon-hello-world-microservice-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.078Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "python-falcon-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "python",
    "description": "Example of Python Microservice based on Falcon",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/python-falcon-hello-world-microservice-example/master/README.md"
    },
    "itemId": "python-falcon-hello-world",
    "name": "Python Falcon Hello World",
    "resources": {
      "services": {
        "python-falcon-hello-world": {
          "type": "example",
          "name": "python-falcon-hello-world",
          "description": "Example of Python Microservice based on Falcon",
          "archiveUrl": "https://github.com/mia-platform-marketplace/python-falcon-hello-world-microservice-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-05-16T20:52:01.377Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "python-falcon-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "python",
    "description": "Example of Python Microservice based on Tornado",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/python-tornado-hello-world-microservice-example/master/README.md"
    },
    "itemId": "python-tornado-hello-world",
    "name": "Python Tornado Hello World",
    "resources": {
      "services": {
        "python-tornado-hello-world": {
          "type": "example",
          "name": "python-tornado-hello-world",
          "description": "Example of Python Microservice based on Tornado",
          "archiveUrl": "https://github.com/mia-platform-marketplace/python-tornado-hello-world-microservice-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.077Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "python-tornado-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "python",
    "description": "Example of Python Microservice based on Tornado",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/python-tornado-hello-world-microservice-example/master/README.md"
    },
    "itemId": "python-tornado-hello-world",
    "name": "Python Tornado Hello World",
    "resources": {
      "services": {
        "python-tornado-hello-world": {
          "type": "example",
          "name": "python-tornado-hello-world",
          "description": "Example of Python Microservice based on Tornado",
          "archiveUrl": "https://github.com/mia-platform-marketplace/python-tornado-hello-world-microservice-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fpython-hello-world-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-05-18T17:02:02.649Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "python-tornado-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
    "documentation": {
      "type": "externalLink",
      "url": "https://rond-authz.io/"
    },
    "itemId": "r-nd",
    "name": "Rönd",
    "repositoryUrl": "https://github.com/rond-authz/rond/",
    "resources": {
      "services": {
        "rond": {
          "type": "plugin",
          "name": "rond",
          "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
          "dockerImage": "nexus.mia-platform.eu/rond-authz/rond:1.13.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "STANDALONE",
              "description": "This value enables the standalone mode for the RBAC service",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_CRUD_SERVICE_URL",
              "description": "This is the compelte URL to the endpoint exposed by the crud service to the bindings collection",
              "value": "CHANGE ME WITH THE CORRECT URL",
              "valueType": "plain"
            },
            {
              "name": "API_PERMISSIONS_FILE_PATH",
              "description": "This variable lets you specify a file from which reading an OAS to expose.",
              "value": "/oas-permissions/service-permissions.json",
              "valueType": "plain"
            },
            {
              "name": "TARGET_SERVICE_OAS_PATH",
              "description": "If you want to retrieve the OpenApi specification from a specific endpoint please specify it here",
              "value": "CHANGE ME WITH AND ENDPOINT TO CONTACT THAT EXPOSE THE OAS DESIRED",
              "valueType": "plain"
            },
            {
              "name": "OPA_MODULES_DIRECTORY",
              "description": "This directory will contain the file in which the policies to be evaluated are written",
              "value": "/opa",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_COLLECTION_NAME",
              "description": "mongo collection in which users bindings are stored",
              "value": "rbac-bindings",
              "valueType": "plain"
            },
            {
              "name": "ROLES_COLLECTION_NAME",
              "description": "mongo collection in which users roles are stored",
              "value": "rbac-roles",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX_STANDALONE",
              "description": "This prefix will be added to all the route exposed from the oas when the standalone mode is active",
              "value": "/eval",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/rbac-healthz",
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/rbac-ready"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "policies",
              "mountPath": "/opa",
              "files": [
                {
                  "name": "policies.rego",
                  "content": "package policies \\nallow_always{\\n  true  \\n}"
                }
              ]
            },
            {
              "name": "permissions",
              "mountPath": "/oas-permissions",
              "files": [
                {
                  "name": "service-permissions.json",
                  "content": "{\\"paths\\":{\\"/hello\\":{\\"get\\":{\\"x-permission\\":{\\"allow\\":\\"allow_always\\"}}}}}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.13.0",
      "releaseNote": "This version comes with huge performance improvements in both resource consumption and evaluation time for query generation policies!\\n\\nAdded:\\n\\n- perf: prepare partial evaluation at boot for better performances\\n\\n- perf: use opa compiler to optimize startup"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.873Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "r-nd.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
    "documentation": {
      "type": "externalLink",
      "url": "https://rond-authz.io/"
    },
    "itemId": "r-nd",
    "name": "Rönd",
    "repositoryUrl": "https://github.com/rond-authz/rond/",
    "resources": {
      "services": {
        "rond": {
          "type": "plugin",
          "name": "rond",
          "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
          "dockerImage": "nexus.mia-platform.eu/rond-authz/rond:1.12.9",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "STANDALONE",
              "description": "This value enables the standalone mode for the RBAC service",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_CRUD_SERVICE_URL",
              "description": "This is the compelte URL to the endpoint exposed by the crud service to the bindings collection",
              "value": "CHANGE ME WITH THE CORRECT URL",
              "valueType": "plain"
            },
            {
              "name": "API_PERMISSIONS_FILE_PATH",
              "description": "This variable lets you specify a file from which reading an OAS to expose.",
              "value": "/oas-permissions/service-permissions.json",
              "valueType": "plain"
            },
            {
              "name": "TARGET_SERVICE_OAS_PATH",
              "description": "If you want to retrieve the OpenApi specification from a specific endpoint please specify it here",
              "value": "CHANGE ME WITH AND ENDPOINT TO CONTACT THAT EXPOSE THE OAS DESIRED",
              "valueType": "plain"
            },
            {
              "name": "OPA_MODULES_DIRECTORY",
              "description": "This directory will contain the file in which the policies to be evaluated are written",
              "value": "/opa",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_COLLECTION_NAME",
              "description": "mongo collection in which users bindings are stored",
              "value": "rbac-bindings",
              "valueType": "plain"
            },
            {
              "name": "ROLES_COLLECTION_NAME",
              "description": "mongo collection in which users roles are stored",
              "value": "rbac-roles",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX_STANDALONE",
              "description": "This prefix will be added to all the route exposed from the oas when the standalone mode is active",
              "value": "/eval",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/rbac-healthz",
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/rbac-ready"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "policies",
              "mountPath": "/opa",
              "files": [
                {
                  "name": "policies.rego",
                  "content": "package policies \\nallow_always{\\n  true  \\n}"
                }
              ]
            },
            {
              "name": "permissions",
              "mountPath": "/oas-permissions",
              "files": [
                {
                  "name": "service-permissions.json",
                  "content": "{\\"paths\\":{\\"/hello\\":{\\"get\\":{\\"x-permission\\":{\\"allow\\":\\"allow_always\\"}}}}}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.12.9",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.873Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "r-nd.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
    "documentation": {
      "type": "externalLink",
      "url": "https://rond-authz.io/"
    },
    "itemId": "r-nd",
    "name": "Rönd",
    "repositoryUrl": "https://github.com/rond-authz/rond/",
    "resources": {
      "services": {
        "rond": {
          "type": "plugin",
          "name": "rond",
          "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
          "dockerImage": "nexus.mia-platform.eu/rond-authz/rond:1.12.6",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "STANDALONE",
              "description": "This value enables the standalone mode for the RBAC service",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_CRUD_SERVICE_URL",
              "description": "This is the compelte URL to the endpoint exposed by the crud service to the bindings collection",
              "value": "CHANGE ME WITH THE CORRECT URL",
              "valueType": "plain"
            },
            {
              "name": "API_PERMISSIONS_FILE_PATH",
              "description": "This variable lets you specify a file from which reading an OAS to expose.",
              "value": "/oas-permissions/service-permissions.json",
              "valueType": "plain"
            },
            {
              "name": "TARGET_SERVICE_OAS_PATH",
              "description": "If you want to retrieve the OpenApi specification from a specific endpoint please specify it here",
              "value": "CHANGE ME WITH AND ENDPOINT TO CONTACT THAT EXPOSE THE OAS DESIRED",
              "valueType": "plain"
            },
            {
              "name": "OPA_MODULES_DIRECTORY",
              "description": "This directory will contain the file in which the policies to be evaluated are written",
              "value": "/opa",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_COLLECTION_NAME",
              "description": "mongo collection in which users bindings are stored",
              "value": "rbac-bindings",
              "valueType": "plain"
            },
            {
              "name": "ROLES_COLLECTION_NAME",
              "description": "mongo collection in which users roles are stored",
              "value": "rbac-roles",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX_STANDALONE",
              "description": "This prefix will be added to all the route exposed from the oas when the standalone mode is active",
              "value": "/eval",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/rbac-healthz",
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/rbac-ready"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "policies",
              "mountPath": "/opa",
              "files": [
                {
                  "name": "policies.rego",
                  "content": "package policies \\nallow_always{\\n  true  \\n}"
                }
              ]
            },
            {
              "name": "permissions",
              "mountPath": "/oas-permissions",
              "files": [
                {
                  "name": "service-permissions.json",
                  "content": "{\\"paths\\":{\\"/hello\\":{\\"get\\":{\\"x-permission\\":{\\"allow\\":\\"allow_always\\"}}}}}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.12.6",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.029Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "r-nd.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "auth",
    "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
    "documentation": {
      "type": "externalLink",
      "url": "https://rond-authz.io/"
    },
    "itemId": "r-nd",
    "name": "Rönd",
    "repositoryUrl": "https://github.com/rond-authz/rond/",
    "resources": {
      "services": {
        "rond": {
          "type": "plugin",
          "name": "rond",
          "description": "Use Rönd as a standalone microservice to evaluate authorization security policies.",
          "dockerImage": "nexus.mia-platform.eu/rond-authz/rond:1.12.6",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "STANDALONE",
              "description": "This value enables the standalone mode for the RBAC service",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_CRUD_SERVICE_URL",
              "description": "This is the compelte URL to the endpoint exposed by the crud service to the bindings collection",
              "value": "CHANGE ME WITH THE CORRECT URL",
              "valueType": "plain"
            },
            {
              "name": "API_PERMISSIONS_FILE_PATH",
              "description": "This variable lets you specify a file from which reading an OAS to expose.",
              "value": "/oas-permissions/service-permissions.json",
              "valueType": "plain"
            },
            {
              "name": "TARGET_SERVICE_OAS_PATH",
              "description": "If you want to retrieve the OpenApi specification from a specific endpoint please specify it here",
              "value": "CHANGE ME WITH AND ENDPOINT TO CONTACT THAT EXPOSE THE OAS DESIRED",
              "valueType": "plain"
            },
            {
              "name": "OPA_MODULES_DIRECTORY",
              "description": "This directory will contain the file in which the policies to be evaluated are written",
              "value": "/opa",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "BINDINGS_COLLECTION_NAME",
              "description": "mongo collection in which users bindings are stored",
              "value": "rbac-bindings",
              "valueType": "plain"
            },
            {
              "name": "ROLES_COLLECTION_NAME",
              "description": "mongo collection in which users roles are stored",
              "value": "rbac-roles",
              "valueType": "plain"
            },
            {
              "name": "PATH_PREFIX_STANDALONE",
              "description": "This prefix will be added to all the route exposed from the oas when the standalone mode is active",
              "value": "/eval",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/rbac-healthz",
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/rbac-ready"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "policies",
              "mountPath": "/opa",
              "files": [
                {
                  "name": "policies.rego",
                  "content": "package policies \\nallow_always{\\n  true  \\n}"
                }
              ]
            },
            {
              "name": "permissions",
              "mountPath": "/oas-permissions",
              "files": [
                {
                  "name": "service-permissions.json",
                  "content": "{\\"paths\\":{\\"/hello\\":{\\"get\\":{\\"x-permission\\":{\\"allow\\":\\"allow_always\\"}}}}}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-03-24T17:06:02.377Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "r-nd.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/rag-chatbot-api/overview_and_usage"
    },
    "itemId": "rag-chatbot-api",
    "name": "RAG Chatbot API",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "rag-chatbot-api": {
          "type": "plugin",
          "name": "rag-chatbot-api",
          "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
          "dockerImage": "nexus.mia-platform.eu/plugins/rag-chatbot-api:0.5.3",
          "componentId": "rag-chatbot-api",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.5.3",
      "releaseNote": "## Changes:\\n\\n- Solved an error that did not allow \`mdx\` files to be used to generate embeddings.\\n- updated several internal depedencies.\\n- documentation updated"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T17:06:06.550Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rag-chatbot-api.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/rag-chatbot-api/overview_and_usage"
    },
    "itemId": "rag-chatbot-api",
    "name": "RAG Chatbot API",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "rag-chatbot-api": {
          "type": "plugin",
          "name": "rag-chatbot-api",
          "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
          "dockerImage": "nexus.mia-platform.eu/plugins/rag-chatbot-api:0.5.1",
          "componentId": "rag-chatbot-api",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.5.2",
      "releaseNote": "## Fixed\\n\\n- At service startup, if the Vector Search collection does not exist, it is automatically created\\n- Support file extension \`mdx\` for embedding generation\\n- File uploaded for embedding generation is validated either from the content-type or the file extension\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.039Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rag-chatbot-api.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/rag-chatbot-api/overview_and_usage"
    },
    "itemId": "rag-chatbot-api",
    "name": "RAG Chatbot API",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "rag-chatbot-api": {
          "type": "plugin",
          "name": "rag-chatbot-api",
          "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
          "dockerImage": "nexus.mia-platform.eu/plugins/rag-chatbot-api:0.5.1",
          "componentId": "rag-chatbot-api",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.5.1",
      "releaseNote": "## First Release\\nCreate your RAG Application with RAG Chatbot API, an application that allows you to generate embeddings and connect to LLMs to create a chatbot trained on the information you need.\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.934Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rag-chatbot-api.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "artificial-intelligence",
    "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/rag-chatbot-api/overview_and_usage"
    },
    "itemId": "rag-chatbot-api",
    "name": "RAG Chatbot API",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://github.com/mia-platform/ai-rag-template",
    "resources": {
      "services": {
        "rag-chatbot-api": {
          "type": "plugin",
          "name": "rag-chatbot-api",
          "description": "Application with useful APIs to generate embeddings and chat with a RAG chatbot.",
          "dockerImage": "nexus.mia-platform.eu/plugins/rag-chatbot-api:0.5.0",
          "componentId": "rag-chatbot-api",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "INFO",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/config/configuration.json",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_CLUSTER_URI",
              "value": "<YOUR_MONGODB_CONNECTION_STRING>",
              "valueType": "plain"
            },
            {
              "name": "EMBEDDINGS_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            },
            {
              "name": "LLM_API_KEY",
              "value": "<YOUR_OPENAI_API_KEY>",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "min": "100m",
              "max": "100m"
            },
            "memoryLimits": {
              "min": "250Mi",
              "max": "400Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 15,
              "timeoutSeconds": 3,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 3,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "assistant-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "configuration.json",
                  "content": "{\\n  \\"llm\\": {\\n    \\"name\\": \\"<YOUR_MODEL_NAME>\\"\\n  },\\n  \\"embeddings\\": {\\n    \\"name\\": \\"<YOUR_EMBEDDING_NAME>\\"\\n  },\\n  \\"vectorStore\\": {\\n    \\"dbName\\": \\"<YOUR_DATABASE_NAME>\\",\\n    \\"collectionName\\": \\"<YOUR_COLLECTION_NAME>\\",\\n    \\"indexName\\": \\"<YOUR_INDEX_NAME>\\",\\n    \\"relevanceScoreFn\\": \\"<YOUR_DISTANCE_FUNCTION>\\",\\n    \\"embeddingKey\\": \\"<YOUR_EMBEDDING_KEY>\\",\\n    \\"textKey\\": \\"<YOUR_TEXT_KEY>\\",\\n    \\"maxDocumentsToRetrieve\\": 3\\n  }\\n}\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.5.0",
      "releaseNote": "**NOTE**: Please do not use this version as contains a bug that does not allow the service to be exposed. Use v0.5.1.\\n\\n## First Release\\nCreate your RAG Application with RAG Chatbot API, an application that allows you to generate embeddings and connect to LLMs to create a chatbot trained on the information you need.\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-06T16:53:44.931Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rag-chatbot-api.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Go/gRPC service to enable global rate limit on your Envoy API Gateway",
    "itemId": "rate-limit-envoy",
    "name": "Rate Limit Envoy",
    "resources": {
      "services": {
        "rate-limit-envoy": {
          "type": "plugin",
          "name": "rate-limit-envoy",
          "description": "The Go/gRPC service to enable global rate limit on your Envoy API Gateway",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/ratelimit:8d6488ea",
          "componentId": "rate-limit-envoy",
          "defaultEnvironmentVariables": [
            {
              "name": "USE_STATSD",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "{{LOG_LEVEL}}",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SOCKET_TYPE",
              "value": "tcp",
              "valueType": "plain"
            },
            {
              "name": "REDIS_URL",
              "value": "{{REDIS_URL}}",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_ROOT",
              "value": "/data",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_SUBDIRECTORY",
              "value": "ratelimit",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_WATCH_ROOT",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_IGNOREDOTFILES",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "150Mi"
            },
            "cpuLimits": {
              "min": "50m",
              "max": "100m"
            }
          },
          "defaultArgs": [
            "/bin/ratelimit"
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/healthcheck",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "port": "http"
            },
            "readiness": {
              "path": "/healthcheck",
              "initialDelaySeconds": 5,
              "periodSeconds": 5,
              "port": "http"
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "api-gateway-ratelimit",
              "mountPath": "/data/ratelimit/config",
              "files": [
                {
                  "name": "ratelimit-config.yaml",
                  "content": "domain: mia_limit\\ndescriptors:\\n  - key: remote_address\\n    rate_limit:\\n      unit: second\\n      requests_per_unit: 1000\\n"
                }
              ],
              "viewAsReadOnly": false
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "grpc",
              "from": 8081,
              "to": 8081
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.029Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rate-limit-envoy_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Go/gRPC service to enable global rate limit on your Envoy API Gateway",
    "itemId": "rate-limit-envoy",
    "name": "Rate Limit Envoy",
    "resources": {
      "services": {
        "rate-limit-envoy": {
          "type": "plugin",
          "name": "rate-limit-envoy",
          "description": "The Go/gRPC service to enable global rate limit on your Envoy API Gateway",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/ratelimit:8d6488ea",
          "componentId": "rate-limit-envoy",
          "defaultEnvironmentVariables": [
            {
              "name": "USE_STATSD",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "{{LOG_LEVEL}}",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "REDIS_SOCKET_TYPE",
              "value": "tcp",
              "valueType": "plain"
            },
            {
              "name": "REDIS_URL",
              "value": "{{REDIS_URL}}",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_ROOT",
              "value": "/data",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_SUBDIRECTORY",
              "value": "ratelimit",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_WATCH_ROOT",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "RUNTIME_IGNOREDOTFILES",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "150Mi"
            },
            "cpuLimits": {
              "min": "50m",
              "max": "100m"
            }
          },
          "defaultArgs": [
            "/bin/ratelimit"
          ],
          "defaultProbes": {
            "liveness": {
              "path": "/healthcheck",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "port": "http"
            },
            "readiness": {
              "path": "/healthcheck",
              "initialDelaySeconds": 5,
              "periodSeconds": 5,
              "port": "http"
            }
          },
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "",
          "defaultConfigMaps": [
            {
              "name": "api-gateway-ratelimit",
              "mountPath": "/data/ratelimit/config",
              "files": [
                {
                  "name": "ratelimit-config.yaml",
                  "content": "domain: mia_limit\\ndescriptors:\\n  - key: remote_address\\n    rate_limit:\\n      unit: second\\n      requests_per_unit: 1000\\n"
                }
              ],
              "viewAsReadOnly": false
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "grpc",
              "from": 8081,
              "to": 8081
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-04-07T16:19:37.099Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rate-limit-envoy_logo_20250423.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with the React framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/React-App-Template/master/README.md"
    },
    "itemId": "react-template",
    "name": "React Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/React-App-Template",
    "resources": {
      "services": {
        "react-template": {
          "type": "template",
          "name": "react-template",
          "description": "This template allows you to start setting up a front-end project with the React framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/React-App-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.860Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "react-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with the React framework",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/React-App-Template/master/README.md"
    },
    "itemId": "react-template",
    "name": "React Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/React-App-Template",
    "resources": {
      "services": {
        "react-template": {
          "type": "template",
          "name": "react-template",
          "description": "This template allows you to start setting up a front-end project with the React framework",
          "archiveUrl": "https://github.com/mia-platform-marketplace/React-App-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:49:22.178Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "react-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.9.1",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.9.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.666Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.9.0",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.9.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.029Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.11.2",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.11.2",
      "releaseNote": "### Fixed\\n\\n - Removed p-limit on strategies since when limit was reached the service got blocked in an infinite wait.\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.534Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.11.1",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.11.1",
      "releaseNote": "### Fixed\\n\\n - When operations were not executed in order some strategies were being skipped. Now only the right strategies are skipped.\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.028Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.11.0",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.11.0",
      "releaseNote": "### Added\\n\\n- introduce \`forceResume\` parameter in Control Plane settings to control the service behavior in case of unsuccessful connection with Control Plane Operator\\n\\n### Changed\\n\\n- Control Plane settings \`state\` and \`feedback\` properties are now optional\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.027Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.10.0",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "7.10.0",
      "releaseNote": "### Added\\n\\n- introduce \`PRODUCER_MAX_BATCH_SIZE\` environment variable to configure the batch size of Kafka producer. Defaults to 500.\\n\\n### Fixed\\n\\n- GRPC client successfully reconnect upon Control Plane Operator restarts\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.027Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/realtime_updater"
    },
    "itemId": "real-time-updater",
    "name": "Real-Time Updater",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/real-time-updater",
    "resources": {
      "services": {
        "real-time-updater": {
          "type": "plugin",
          "name": "real-time-updater",
          "description": "Consumes Kafka messages in order to keep the Fast Data projection collections up to date with the connected system.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/real-time-updater:7.9.0",
          "componentId": "realtime-updater",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            },
            {
              "name": "USE_AUTOMATIC_STRATEGIES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "LOGGING_UNMAPPED_FIELDS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "USE_POS_AS_COUNTER",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_ENABLED",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_DATABASE_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION_NAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "GENERATE_KAFKA_PROJECTION_UPDATES",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "CA_CERT_PATH",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_MESSAGE_ADAPTER",
              "value": "basic",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "INVARIANT_TOPIC_MAP",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "SYSTEM_OF_RECORDS",
              "value": "",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "CAST_FUNCTIONS_FOLDER",
              "value": "/home/node/app/configurations/castFunctionsFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "MAP_TABLE_FOLDER",
              "value": "/home/node/app/configurations/mapTableFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "STRATEGIES_FOLDER",
              "value": "/home/node/app/configurations/strategies",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_ADAPTER_FOLDER",
              "value": "/home/node/app/configurations/kafkaAdapterFolder",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "readOnly": true,
              "managedBy": "fast-data",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "80Mi",
              "max": "250Mi"
            },
            "cpuLimits": {
              "min": "40m",
              "max": "250m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-10-12T16:07:37.171Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "real-time-updater_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "This is an example of using our library Rest2Kafka. It takes the body of a POST and create a Kafka message.",
    "itemId": "rest2kafka-example",
    "name": "Rest2Kafka Example",
    "resources": {
      "services": {
        "rest2kafka-example": {
          "type": "example",
          "name": "rest2kafka-example",
          "description": "This is an example of using our library Rest2Kafka. It takes the body of a POST and create a Kafka message.",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/911/repository/archive.tar.gz",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_TOPIC",
              "value": "CHANGE_WITH_YOUR_KAFKA_TOPIC",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "CHANGE_WITH_YOUR_SERVICE_VERSION",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_KEY",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_KEY",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_SECRET",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_SECRET",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "CHANGE_WITH_YOUR_USER_ID_HEADER_KEY",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.075Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rest2kafka-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "This is an example of using our library Rest2Kafka. It takes the body of a POST and create a Kafka message.",
    "itemId": "rest2kafka-example",
    "name": "Rest2Kafka Example",
    "resources": {
      "services": {
        "rest2kafka-example": {
          "type": "example",
          "name": "rest2kafka-example",
          "description": "This is an example of using our library Rest2Kafka. It takes the body of a POST and create a Kafka message.",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/911/repository/archive.tar.gz",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_HOST",
              "value": "CHANGE_WITH_YOUR_KAFKA_HOST",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_TOPIC",
              "value": "CHANGE_WITH_YOUR_KAFKA_TOPIC",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "CHANGE_WITH_YOUR_SERVICE_VERSION",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_KEY",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_KEY",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_API_SECRET",
              "value": "CHANGE_WITH_YOUR_KAFKA_API_SECRET",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "CHANGE_WITH_YOUR_USER_ID_HEADER_KEY",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "CHANGE_WITH_YOUR_HEADERS_TO_PROXY",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:41:16.076Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rest2kafka-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "A service that exposes APIs to publish messages on Apache Kafka.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/rest2kafka/overview"
    },
    "itemId": "rest2kafka-service",
    "name": "Rest2Kafka service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/rest2kafka",
    "resources": {
      "services": {
        "rest2kafka-service": {
          "type": "plugin",
          "name": "rest2kafka-service",
          "description": "A service that exposes APIs to publish messages on Apache Kafka.",
          "dockerImage": "nexus.mia-platform.eu/plugins/rest2kafka:1.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "REST2KAFKA_CONFIG_FILE_PATH",
              "value": "/config/rest2kafka-config.json",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH THE COMMA SEPARATED LIST OF BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "plain",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH THE USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH THE PASSWORD",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "100Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "50m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "rest2kafka-configs",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "rest2kafka-config.json",
                  "content": "[]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.2.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.028Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rest2kafka-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "stream",
    "description": "A service that exposes APIs to publish messages on Apache Kafka.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/rest2kafka/overview"
    },
    "itemId": "rest2kafka-service",
    "name": "Rest2Kafka service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/rest2kafka",
    "resources": {
      "services": {
        "rest2kafka-service": {
          "type": "plugin",
          "name": "rest2kafka-service",
          "description": "A service that exposes APIs to publish messages on Apache Kafka.",
          "dockerImage": "nexus.mia-platform.eu/plugins/rest2kafka:1.2.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "REST2KAFKA_CONFIG_FILE_PATH",
              "value": "/config/rest2kafka-config.json",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR CLIENT_ID",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH THE COMMA SEPARATED LIST OF BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_AUTH_METHOD",
              "value": "plain",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH THE USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH THE PASSWORD",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "max": "100Mi",
              "min": "50Mi"
            },
            "cpuLimits": {
              "min": "5m",
              "max": "50m"
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "rest2kafka-configs",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "rest2kafka-config.json",
                  "content": "[]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-10-27T10:59:37.415Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rest2kafka-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "rust",
    "description": "Example of Rust Microservice",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/rust-hello-world-example/master/README.md"
    },
    "itemId": "rust-hello-world",
    "name": "Rust Hello World",
    "resources": {
      "services": {
        "rust-hello-world": {
          "type": "example",
          "name": "rust-hello-world",
          "description": "Example of Rust Microservice",
          "archiveUrl": "https://github.com/mia-platform-marketplace/rust-hello-world-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Frust-app.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.074Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rust-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "rust",
    "description": "Example of Rust Microservice",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/rust-hello-world-example/master/README.md"
    },
    "itemId": "rust-hello-world",
    "name": "Rust Hello World",
    "resources": {
      "services": {
        "rust-hello-world": {
          "type": "example",
          "name": "rust-hello-world",
          "description": "Example of Rust Microservice",
          "archiveUrl": "https://github.com/mia-platform-marketplace/rust-hello-world-example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Frust-app.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-05-17T09:02:36.847Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "rust-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data-connectors",
    "description": "This application allows to quickly setup a connector between Salesforce Streaming API technology and your Fast Data, including error handling and monitoring",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite_applications/salesforce-streaming-api-connector/overview"
    },
    "itemId": "salesforce-streaming-api-connector",
    "name": "Salesforce Streaming API Connector",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/connectors/salesforce-streaming-api-connector",
    "resources": {
      "services": {
        "sforce-connector": {
          "type": "plugin",
          "name": "sforce-connector",
          "description": "This service connects to multiple Streaming API topics and pushes changes to the corresponding Fast Data projections.",
          "defaultTerminationGracePeriodSeconds": 30,
          "defaultLogParser": "mia-json",
          "dockerImage": "nexus.mia-platform.eu/plugins/salesforce-connector-service:1.1.0",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain",
              "description": "comma separated list of broker addresses"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "{{KAFKA_CLIENT_ID}}",
              "valueType": "plain",
              "description": "client id of the producer that will write on projection topics"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "SCRAM-SHA-256",
              "valueType": "plain",
              "description": "authentication mechanism, use \`SCRAM-SHA-256\` to enable scram authentication, defaulted to \`plain\`"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain",
              "description": "scram username"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain",
              "description": "scram password"
            },
            {
              "name": "SALESFORCE_HTTP_BASE_PATH",
              "value": "{{SALESFORCE_HTTP_BASE_PATH}}",
              "valueType": "plain",
              "description": "base path for salesforce access token generation (mustn't end with \`/\`)"
            },
            {
              "name": "SALESFORCE_CLIENT_ID",
              "value": "{{SALESFORCE_CLIENT_ID}}",
              "valueType": "plain",
              "description": "client id of your salesforce account"
            },
            {
              "name": "SALESFORCE_CLIENT_SECRET",
              "value": "{{SALESFORCE_CLIENT_SECRET}}",
              "valueType": "plain",
              "description": "secret of your salesforce account"
            },
            {
              "name": "SALESFORCE_USERNAME",
              "value": "{{SALESFORCE_USERNAME}}",
              "valueType": "plain",
              "description": "username of your salesforce account"
            },
            {
              "name": "SALESFORCE_PASSWORD",
              "value": "{{SALESFORCE_PASSWORD}}",
              "valueType": "plain",
              "description": "**concatenation** of password and secret token of your salesforce account"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/",
              "valueType": "plain",
              "description": "url of your crud service"
            },
            {
              "name": "KAFKA_DLQ_TOPIC",
              "value": "{{KAFKA_DLQ_TOPIC}}",
              "valueType": "plain",
              "description": "Kafka topic used to implement the DLQ"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/java/config/topicConfig.yml",
              "valueType": "plain",
              "description": "path to the yaml configuration file"
            },
            {
              "name": "DEFAULT_REPLAY_POLICY",
              "value": "REPLAY_FROM_EARLIER",
              "valueType": "plain",
              "description": "replay id policy used in case a checkpoint is invalid for topic connection. Use \`REPLAY_FROM_TIP\` if you want the topic to start processing from the current instant, use \`REPLAY_FROM_EARLIER\` if you want to process all events received during the last 24 hours (might put the service under heavy load, but also might help to not lose changes)"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "750Mi",
              "min": "500Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/health",
              "initialDelaySeconds": 90,
              "periodSeconds": 30,
              "timeoutSeconds": 5,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "/health",
              "initialDelaySeconds": 40,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "topic-config",
              "mountPath": "/home/java/config",
              "files": [
                {
                  "name": "topicConfig.yml",
                  "content": "- salesforceTableName: TableName\\n  salesforceTopic: /topic/Table\\n  projectionTopic: fd-p-system-table-json,\\n  idPropertyName: Id"
                }
              ]
            }
          ],
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/prometheus",
                "port": "http",
                "interval": "30s"
              }
            ]
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        },
        "sforce-connector-dlq": {
          "type": "plugin",
          "name": "sforce-connector-dlq",
          "description": "This service processes events that were sent to the DLQ by the sforce-connector service.",
          "defaultTerminationGracePeriodSeconds": 30,
          "defaultLogParser": "mia-json",
          "dockerImage": "nexus.mia-platform.eu/plugins/salesforce-connector-dlq-service:1.1.0",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SALESFORCE_HTTP_BASE_PATH",
              "value": "{{SALESFORCE_URL}}",
              "valueType": "plain"
            },
            {
              "name": "SALESFORCE_CLIENT_ID",
              "value": "{{SALESFORCE_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "SALESFORCE_CLIENT_SECRET",
              "value": "{{SALESFORCE_CLIENT_SECRET}}",
              "valueType": "plain"
            },
            {
              "name": "SALESFORCE_USERNAME",
              "value": "{{SALESFORCE_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "SALESFORCE_PASSWORD",
              "value": "{{SALESFORCE_PASSWORD}}",
              "valueType": "plain",
              "description": "Authentication password, might be account password + secret token"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "{{SFORCE_CONN_DLQ_KAFKA_CLIENT_ID}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "{{SFORCE_CONN_DLQ_KAFKA_GROUP_ID}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "{{KAFKA_BROKERS}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "SCRAM-SHA-256",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "{{KAFKA_SASL_USERNAME}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "{{KAFKA_SASL_PASSWORD}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_DLQ_TOPIC",
              "value": "{{SFORCE_DLQ_TOPIC}}",
              "valueType": "plain"
            },
            {
              "name": "FIELD_MAPPING_FILE_PATH",
              "value": "/home/java/config/mappingConfig.yml",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "250m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "450Mi",
              "min": "350Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/health",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/health",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "mapping-config",
              "mountPath": "/home/java/config",
              "files": [
                {
                  "name": "mappingConfig.yml",
                  "content": ""
                }
              ]
            }
          ],
          "defaultMonitoring": {
            "endpoints": [
              {
                "path": "/prometheus",
                "port": "http",
                "interval": "30s"
              }
            ]
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-04-26T08:12:31.833Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "salesforce-streaming-api-connector.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "scoring",
    "description": "The application allows you to quickly set up multiple scoring processes",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/scoring-manager/overview"
    },
    "itemId": "scoring-manager",
    "name": "Scoring Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/applications/scoring-manager",
    "resources": {
      "services": {
        "crud-service": {
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:7.1.1",
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PREFIX",
              "value": "/",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "70Mi"
            }
          },
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin",
          "componentId": "crud-service"
        },
        "flow-manager-main": {
          "defaultConfigMaps": [
            {
              "name": "flow-configuration-main",
              "mountPath": "/sagaConfiguration",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "rest.json",
                  "content": "{\\n  \\"machineDefinition\\": {\\n    \\"initialState\\": \\"PROCESS_CREATED\\",\\n    \\"creationEvent\\": \\"processCreated\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"PROCESS_CREATED\\",\\n        \\"description\\": \\"The new process was created\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 0,\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"subFlowCreated\\",\\n            \\"targetState\\": \\"SCORING_PENDING\\",\\n            \\"businessEventId\\": 1\\n          },\\n          {\\n            \\"inputEvent\\": \\"expireProcess\\",\\n            \\"targetState\\": \\"PROCESS_FAILED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"SCORING_PENDING\\",\\n        \\"description\\": \\"The scoring process is not completed\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 1,\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"updateData\\",\\n            \\"targetState\\": \\"SCORING_PENDING\\",\\n            \\"businessEventId\\": 1\\n          },\\n          {\\n            \\"inputEvent\\": \\"scoringCompleted\\",\\n            \\"targetState\\": \\"APPROVAL_REQUESTED\\",\\n            \\"businessEventId\\": 2\\n          },\\n          {\\n            \\"inputEvent\\": \\"processError\\",\\n            \\"targetState\\": \\"PROCESS_FAILED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"APPROVAL_REQUESTED\\",\\n        \\"description\\": \\"The result of the scoring needs to approved\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 2,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"requestApproval\\",\\n          \\"label\\": \\"requestApproval\\"\\n        },\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"processApproved\\",\\n            \\"targetState\\": \\"PROCESS_COMPLETED\\",\\n            \\"businessEventId\\": 3\\n          },\\n          {\\n            \\"inputEvent\\": \\"processRejected\\",\\n            \\"targetState\\": \\"PROCESS_REJECTED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_REJECTED\\",\\n        \\"description\\": \\"The scoring result was not approved\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 2,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_COMPLETED\\",\\n        \\"description\\": \\"The process is closed\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 3,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_FAILED\\",\\n        \\"description\\": \\"An error occurs during the scoring process\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1000,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      }\\n    ],\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"PROCESS_CREATED\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"SCORING_PENDING\\"\\n      },\\n      {\\n        \\"id\\": 2,\\n        \\"description\\": \\"SCORING_COMPLETED\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"PROCESS_COMPLETED\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"PROCESS_REJECTED\\"\\n      },\\n      {\\n        \\"id\\": 1000,\\n        \\"description\\": \\"PROCESS_FAILED\\"\\n      }\\n    ],\\n    \\"businessEvents\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"processCreated\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"startScoring\\"\\n      },\\n      {\\n        \\"id\\": 2,\\n        \\"description\\": \\"scoringCompleted\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"processCompleted\\"\\n      },\\n      {\\n        \\"id\\": 4,\\n        \\"description\\": \\"processRejected\\"\\n      },\\n      {\\n        \\"id\\": 1000,\\n        \\"description\\": \\"processFailed\\"\\n      }\\n    ]\\n  },\\n  \\"communicationProtocols\\": [\\n    {\\n      \\"id\\": \\"notify\\",\\n      \\"type\\": \\"rest\\",\\n      \\"configurations\\": {\\n        \\"protocol\\": \\"http\\",\\n        \\"endpoint\\": \\"router-service\\",\\n        \\"method\\": \\"POST\\",\\n        \\"path\\": \\"/notify\\"\\n      }\\n    },\\n    {\\n      \\"id\\": \\"requestApproval\\",\\n      \\"type\\": \\"rest\\",\\n      \\"configurations\\": {\\n        \\"protocol\\": \\"http\\",\\n        \\"endpoint\\": \\"rules-service\\",\\n        \\"method\\": \\"POST\\",\\n        \\"path\\": \\"/saga/check\\"\\n      }\\n    }\\n  ],\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"collectionName\\": \\"main-process\\"\\n    }\\n  }\\n}"
                },
                {
                  "name": "kafka.json",
                  "content": "{\\n  \\"machineDefinition\\": {\\n    \\"initialState\\": \\"PROCESS_CREATED\\",\\n    \\"creationEvent\\": \\"processCreated\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"PROCESS_CREATED\\",\\n        \\"description\\": \\"The new process was created\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 0,\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"subFlowCreated\\",\\n            \\"targetState\\": \\"SCORING_PENDING\\",\\n            \\"businessEventId\\": 1\\n          },\\n          {\\n            \\"inputEvent\\": \\"expireProcess\\",\\n            \\"targetState\\": \\"PROCESS_FAILED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"SCORING_PENDING\\",\\n        \\"description\\": \\"The scoring process is not completed\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 1,\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"updateData\\",\\n            \\"targetState\\": \\"SCORING_PENDING\\",\\n            \\"businessEventId\\": 1\\n          },\\n          {\\n            \\"inputEvent\\": \\"scoringCompleted\\",\\n            \\"targetState\\": \\"APPROVAL_REQUESTED\\",\\n            \\"businessEventId\\": 2\\n          },\\n          {\\n            \\"inputEvent\\": \\"processError\\",\\n            \\"targetState\\": \\"PROCESS_FAILED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"APPROVAL_REQUESTED\\",\\n        \\"description\\": \\"The result of the scoring needs to approved\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 2,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"requestApproval\\",\\n          \\"label\\": \\"requestApproval\\"\\n        },\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"processApproved\\",\\n            \\"targetState\\": \\"PROCESS_COMPLETED\\",\\n            \\"businessEventId\\": 3\\n          },\\n          {\\n            \\"inputEvent\\": \\"processRejected\\",\\n            \\"targetState\\": \\"PROCESS_REJECTED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_REJECTED\\",\\n        \\"description\\": \\"The scoring result was not approved\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 2,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_COMPLETED\\",\\n        \\"description\\": \\"The process is closed\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 3,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_FAILED\\",\\n        \\"description\\": \\"An error occurs during the scoring process\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1000,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      }\\n    ],\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"PROCESS_CREATED\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"SCORING_PENDING\\"\\n      },\\n      {\\n        \\"id\\": 2,\\n        \\"description\\": \\"SCORING_COMPLETED\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"PROCESS_COMPLETED\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"PROCESS_REJECTED\\"\\n      },\\n      {\\n        \\"id\\": 1000,\\n        \\"description\\": \\"PROCESS_FAILED\\"\\n      }\\n    ],\\n    \\"businessEvents\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"processCreated\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"startScoring\\"\\n      },\\n      {\\n        \\"id\\": 2,\\n        \\"description\\": \\"scoringCompleted\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"processCompleted\\"\\n      },\\n      {\\n        \\"id\\": 4,\\n        \\"description\\": \\"processRejected\\"\\n      },\\n      {\\n        \\"id\\": 1000,\\n        \\"description\\": \\"processFailed\\"\\n      }\\n    ]\\n  },\\n  \\"communicationProtocols\\": [\\n    {\\n      \\"id\\": \\"notify\\",\\n      \\"type\\": \\"rest\\",\\n      \\"configurations\\": {\\n        \\"protocol\\": \\"http\\",\\n        \\"endpoint\\": \\"router-service\\",\\n        \\"method\\": \\"POST\\",\\n        \\"path\\": \\"/notify\\"\\n      }\\n    },\\n    {\\n      \\"id\\": \\"requestApproval\\",\\n      \\"type\\": \\"kafka\\",\\n      \\"configurations\\": {\\n        \\"brokers\\": [\\n          \\"CHANGE ME\\"\\n        ],\\n        \\"inputTopics\\": [\\n          \\"main-flow\\"\\n        ],\\n        \\"outputTopics\\": [\\n          \\"request-approval\\"\\n        ],\\n        \\"consumerGroup\\": \\"main-flow-manager\\",\\n        \\"authenticationProperties\\": {\\n          \\"ssl\\": true,\\n          \\"sasl\\": {\\n            \\"mechanism\\": \\"PLAIN\\",\\n            \\"username\\": \\"CHANGE ME\\",\\n            \\"password\\": \\"CHANGE ME\\"\\n          }\\n        }\\n      }\\n    }\\n  ],\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"collectionName\\": \\"main-process\\"\\n    }\\n  }\\n}"
                }
              ]
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "{{FLOW_MANAGER_CONFIG_PATH}}",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "main",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "tags": [
            "main"
          ],
          "description": "The Main Flow Manager of the Application",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:{{FLOW_MANAGER_VERSION}}",
          "name": "flow-manager-main",
          "type": "plugin",
          "componentId": "flow-manager",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "flow-manager-subflow": {
          "defaultConfigMaps": [
            {
              "name": "flow-configuration-sub-flow",
              "mountPath": "/sagaConfiguration",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "rest.json",
                  "content": "{\\n  \\"machineDefinition\\": {\\n    \\"initialState\\": \\"PROCESS_CREATED\\",\\n    \\"creationEvent\\": \\"processCreated\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"PROCESS_CREATED\\",\\n        \\"description\\": \\"Process ready and created on CRUD\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 0,\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"actionRequested\\",\\n            \\"targetState\\": \\"ACTION_REQUESTED\\",\\n            \\"businessEventId\\": 1\\n          },\\n          {\\n            \\"inputEvent\\": \\"expireProcess\\",\\n            \\"targetState\\": \\"PROCESS_EXPIRED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"ACTION_REQUESTED\\",\\n        \\"description\\": \\"Request to service\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 0,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"action\\",\\n          \\"label\\": \\"action\\"\\n        },\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"actionCompleted\\",\\n            \\"targetState\\": \\"PROCESS_COMPLETED\\",\\n            \\"businessEventId\\": 2\\n          },\\n          {\\n            \\"inputEvent\\": \\"processFailed\\",\\n            \\"targetState\\": \\"PROCESS_FAILED\\",\\n            \\"businessEventId\\": 1001\\n          },\\n          {\\n            \\"inputEvent\\": \\"expireProcess\\",\\n            \\"targetState\\": \\"PROCESS_EXPIRED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_COMPLETED\\",\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"processCompleted\\"\\n        },\\n        \\"description\\": \\"The process has been completed\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1,\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_FAILED\\",\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"processError\\"\\n        },\\n        \\"description\\": \\"The process has failed\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1001,\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_EXPIRED\\",\\n        \\"description\\": \\"The process expired\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1001,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      }\\n    ],\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"PROCESS_CREATED\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"PROCESS_COMPLETED\\"\\n      },\\n      {\\n        \\"id\\": 1001,\\n        \\"description\\": \\"PROCESS_FAILED\\"\\n      }\\n    ],\\n    \\"businessEvents\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"subProcessCreated\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"actionEvent\\"\\n      },\\n      {\\n        \\"id\\": 2,\\n        \\"description\\": \\"nextEvent\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"processCompleted\\"\\n      },\\n      {\\n        \\"id\\": 1001,\\n        \\"description\\": \\"processError\\"\\n      },\\n      {\\n        \\"id\\": 1000,\\n        \\"description\\": \\"processExpired\\"\\n      }\\n    ]\\n  },\\n  \\"communicationProtocols\\": [\\n    {\\n      \\"id\\": \\"notify\\",\\n      \\"type\\": \\"rest\\",\\n      \\"configurations\\": {\\n        \\"protocol\\": \\"http\\",\\n        \\"endpoint\\": \\"idm-router-service\\",\\n        \\"method\\": \\"POST\\",\\n        \\"path\\": \\"/notify\\"\\n      }\\n    },\\n    {\\n      \\"id\\": \\"action\\",\\n      \\"type\\": \\"rest\\",\\n      \\"configurations\\": {\\n        \\"protocol\\": \\"http\\",\\n        \\"endpoint\\": \\"external-service\\",\\n        \\"method\\": \\"POST\\",\\n        \\"path\\": \\"/action\\"\\n      }\\n    }\\n  ],\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"collectionName\\": \\"sub-process\\"\\n    }\\n  }\\n}"
                },
                {
                  "name": "kafka.json",
                  "content": "{\\n  \\"machineDefinition\\": {\\n    \\"initialState\\": \\"PROCESS_CREATED\\",\\n    \\"creationEvent\\": \\"processCreated\\",\\n    \\"states\\": [\\n      {\\n        \\"id\\": \\"PROCESS_CREATED\\",\\n        \\"description\\": \\"Process ready and created on CRUD\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 0,\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"actionRequested\\",\\n            \\"targetState\\": \\"ACTION_REQUESTED\\",\\n            \\"businessEventId\\": 1\\n          },\\n          {\\n            \\"inputEvent\\": \\"expireProcess\\",\\n            \\"targetState\\": \\"PROCESS_EXPIRED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"ACTION_REQUESTED\\",\\n        \\"description\\": \\"Request to service\\",\\n        \\"isFinal\\": false,\\n        \\"businessStateId\\": 0,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"action\\",\\n          \\"label\\": \\"action\\"\\n        },\\n        \\"outgoingTransitions\\": [\\n          {\\n            \\"inputEvent\\": \\"actionCompleted\\",\\n            \\"targetState\\": \\"PROCESS_COMPLETED\\",\\n            \\"businessEventId\\": 2\\n          },\\n          {\\n            \\"inputEvent\\": \\"processFailed\\",\\n            \\"targetState\\": \\"PROCESS_FAILED\\",\\n            \\"businessEventId\\": 1001\\n          },\\n          {\\n            \\"inputEvent\\": \\"expireProcess\\",\\n            \\"targetState\\": \\"PROCESS_EXPIRED\\",\\n            \\"businessEventId\\": 1000\\n          }\\n        ]\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_COMPLETED\\",\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"processCompleted\\"\\n        },\\n        \\"description\\": \\"The process has been completed\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1,\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_FAILED\\",\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"processError\\"\\n        },\\n        \\"description\\": \\"The process has failed\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1001,\\n        \\"outgoingTransitions\\": []\\n      },\\n      {\\n        \\"id\\": \\"PROCESS_EXPIRED\\",\\n        \\"description\\": \\"The process expired\\",\\n        \\"isFinal\\": true,\\n        \\"businessStateId\\": 1001,\\n        \\"outputCommand\\": {\\n          \\"channel\\": \\"notify\\",\\n          \\"label\\": \\"notify\\"\\n        },\\n        \\"outgoingTransitions\\": []\\n      }\\n    ],\\n    \\"businessStates\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"PROCESS_CREATED\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"PROCESS_COMPLETED\\"\\n      },\\n      {\\n        \\"id\\": 1001,\\n        \\"description\\": \\"PROCESS_FAILED\\"\\n      }\\n    ],\\n    \\"businessEvents\\": [\\n      {\\n        \\"id\\": 0,\\n        \\"description\\": \\"subProcessCreated\\"\\n      },\\n      {\\n        \\"id\\": 1,\\n        \\"description\\": \\"actionEvent\\"\\n      },\\n      {\\n        \\"id\\": 2,\\n        \\"description\\": \\"nextEvent\\"\\n      },\\n      {\\n        \\"id\\": 3,\\n        \\"description\\": \\"processCompleted\\"\\n      },\\n      {\\n        \\"id\\": 1001,\\n        \\"description\\": \\"processError\\"\\n      },\\n      {\\n        \\"id\\": 1000,\\n        \\"description\\": \\"processExpired\\"\\n      }\\n    ]\\n  },\\n  \\"communicationProtocols\\": [\\n    {\\n      \\"id\\": \\"notify\\",\\n      \\"type\\": \\"rest\\",\\n      \\"configurations\\": {\\n        \\"protocol\\": \\"http\\",\\n        \\"endpoint\\": \\"idm-router-service\\",\\n        \\"method\\": \\"POST\\",\\n        \\"path\\": \\"/notify\\"\\n      }\\n    },\\n    {\\n      \\"id\\": \\"action\\",\\n      \\"type\\": \\"kafka\\",\\n      \\"configurations\\": {\\n        \\"brokers\\": [\\n          \\"CHANGE ME\\"\\n        ],\\n        \\"inputTopics\\": [\\n          \\"main-flow\\"\\n        ],\\n        \\"outputTopics\\": [\\n          \\"action\\"\\n        ],\\n        \\"consumerGroup\\": \\"main-flow-manager\\",\\n        \\"authenticationProperties\\": {\\n          \\"ssl\\": true,\\n          \\"sasl\\": {\\n            \\"mechanism\\": \\"PLAIN\\",\\n            \\"username\\": \\"CHANGE ME\\",\\n            \\"password\\": \\"CHANGE ME\\"\\n          }\\n        }\\n      }\\n    }\\n  ],\\n  \\"persistencyManagement\\": {\\n    \\"type\\": \\"crud\\",\\n    \\"configurations\\": {\\n      \\"collectionName\\": \\"sub-process\\"\\n    }\\n  }\\n}"
                }
              ]
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "miaclienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATIONS_FILE_PATH",
              "value": "{{FLOW_MANAGER_CONFIG_PATH}}",
              "valueType": "plain"
            },
            {
              "name": "SAGA_ID_PREFIX",
              "value": "subflow",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "100Mi"
            }
          },
          "description": "The Flow Manager Sub Flow",
          "dockerImage": "nexus.mia-platform.eu/core/flow-manager:{{FLOW_MANAGER_VERSION}}",
          "name": "flow-manager-subflow",
          "type": "plugin",
          "componentId": "flow-manager",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "flow-manager-router": {
          "defaultConfigMaps": [
            {
              "name": "flow-manager-router",
              "mountPath": "/config",
              "viewAsReadOnly": false,
              "files": [
                {
                  "name": "rules.json",
                  "content": "[\\n   {\\n     \\"id\\": \\"default\\",\\n     \\"info\\": {\\n       \\"flowManagerUrl\\": \\"http://flow-manager-subflow/\\", \\n      \\"crudServiceUrl\\": \\"http://crud-service/subflow-process/\\" \\n    },\\n     \\"rules\\": {}\\n   }\\n]\\n"
                }
              ]
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_LOG_LEVEL",
              "value": "NONE",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_MANAGER_URL",
              "value": "http://flow-manager-main/",
              "valueType": "plain"
            },
            {
              "name": "MAIN_SAGA_CRUD_URL",
              "value": "http://crud-service/main-process/",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CONFIGURATION_FILE_PATH",
              "value": "/config/rules.json",
              "valueType": "plain"
            },
            {
              "name": "MODE",
              "value": "{{COMMUNICATION_MODE}}",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_CONFIGURATION_FILE_PATH",
              "value": "/path/to/file",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_ID_KEY",
              "value": "mainFlowId",
              "valueType": "plain"
            },
            {
              "name": "MAIN_FLOW_DATA_KEY",
              "value": "mainFlowData",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_ID_KEY",
              "value": "subFlowId",
              "valueType": "plain"
            },
            {
              "name": "SUB_FLOW_CREATED_EVENT",
              "value": "subFlowCreated",
              "valueType": "plain"
            },
            {
              "name": "ARRAY_MERGE_MODE",
              "value": "SHA",
              "valueType": "plain"
            },
            {
              "name": "EXTERNAL_SERVICE_URL",
              "value": "",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "250m",
              "min": "25m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "200Mi"
            }
          },
          "description": "This service provides communication among flow managers of your project",
          "dockerImage": "nexus.mia-platform.eu/plugins/flow-manager-router:{{ROUTER_VERSION}}",
          "name": "flow-manager-router",
          "type": "plugin",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        },
        "adaptive-approval": {
          "defaultConfigMaps": [],
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "CRUD_URL",
              "value": "http://crud-service/rules",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-main/",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "20m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "20Mi"
            }
          },
          "description": "This service allow to define and verify rules",
          "dockerImage": "nexus.mia-platform.eu/fintech/adaptive-approval:{{ADAPTIVE_APPROVAL_VERSION}}",
          "name": "adaptive-approval",
          "type": "plugin",
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {},
      "collections": {
        "main_process": {
          "id": "main_process",
          "description": "This collection contains main process data and the data collected from different processes",
          "defaultName": "main_process",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "sagaId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "metadata",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "isFinal",
              "description": "",
              "type": "boolean",
              "required": true,
              "nullable": false
            },
            {
              "name": "currentState",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "latestEvent",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "associatedEntityId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "events",
              "description": "",
              "type": "Array_string",
              "required": false,
              "nullable": false
            },
            {
              "name": "history",
              "description": "",
              "type": "RawObject",
              "required": false,
              "nullable": false
            },
            {
              "name": "businessStateId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "businessStateDescription",
              "description": "",
              "type": "string",
              "required": false,
              "nullable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/main-process",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "subflow_process": {
          "id": "subflow_process",
          "description": "This collection contains process data",
          "defaultName": "subflow_process",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "sagaId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "metadata",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "isFinal",
              "description": "",
              "type": "boolean",
              "required": true,
              "nullable": false
            },
            {
              "name": "currentState",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "latestEvent",
              "description": "",
              "type": "RawObject",
              "required": true,
              "nullable": false
            },
            {
              "name": "associatedEntityId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "events",
              "description": "",
              "type": "Array_string",
              "required": false,
              "nullable": false
            },
            {
              "name": "history",
              "description": "",
              "type": "RawObject",
              "required": false,
              "nullable": false
            },
            {
              "name": "businessStateId",
              "description": "",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "businessStateDescription",
              "description": "",
              "type": "string",
              "required": false,
              "nullable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/subflow-process",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "tenants": {
          "id": "tenants",
          "description": "Tenants data",
          "defaultName": "tenants",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "tenant-id",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/tenants",
              "defaultState": "PUBLIC"
            }
          ]
        },
        "rules": {
          "id": "rules",
          "description": "Adaptive approval rules",
          "defaultName": "rules",
          "type": "collection",
          "tags": [
            "collection"
          ],
          "fields": [
            {
              "name": "_id",
              "description": "_id",
              "type": "ObjectId",
              "required": true,
              "nullable": false
            },
            {
              "name": "creatorId",
              "description": "creatorId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "createdAt",
              "description": "createdAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "updaterId",
              "description": "updaterId",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "updatedAt",
              "description": "updatedAt",
              "type": "Date",
              "required": true,
              "nullable": false
            },
            {
              "name": "__STATE__",
              "description": "__STATE__",
              "type": "string",
              "required": true,
              "nullable": false
            },
            {
              "name": "priority",
              "type": "number",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "ruleId",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "type",
              "type": "string",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "rules",
              "type": "Array_RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            },
            {
              "name": "response",
              "type": "RawObject",
              "required": false,
              "nullable": false,
              "sensitivityValue": 0,
              "encryptionEnabled": false,
              "encryptionSearchable": false
            }
          ],
          "internalEndpoints": [
            {
              "basePath": "/rules",
              "defaultState": "PUBLIC"
            }
          ]
        }
      },
      "unsecretedVariables": {
        "ROUTER_VERSION": {
          "productionEnv": "1.0.0",
          "noProductionEnv": "1.0.0"
        },
        "ADAPTIVE_APPROVAL_VERSION": {
          "productionEnv": "0.0.1",
          "noProductionEnv": "0.0.1"
        },
        "FLOW_MANAGER_VERSION": {
          "productionEnv": "2.6.4",
          "noProductionEnv": "2.6.4"
        },
        "COMMUNICATION_MODE": {
          "productionEnv": "KAFKA",
          "noProductionEnv": "REST"
        },
        "FLOW_MANAGER_CONFIG_PATH": {
          "productionEnv": "/sagaConfiguration/kafka.json",
          "noProductionEnv": "/sagaConfiguration/rest.json"
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-09-29T10:24:15.261Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "scoring-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "code",
    "description": "A simple repository template to start coding from scratch",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/scratch-template/main/README.md"
    },
    "itemId": "scratch-template",
    "name": "Scratch Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/scratch-template",
    "resources": {
      "services": {
        "scratch-template": {
          "type": "template",
          "name": "scratch-template",
          "description": "A simple repository template to start coding from scratch",
          "archiveUrl": "https://github.com/mia-platform-marketplace/scratch-template/archive/main.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.010Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "scratch-template_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "code",
    "description": "A simple repository template to start coding from scratch",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/scratch-template/main/README.md"
    },
    "itemId": "scratch-template",
    "name": "Scratch Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/scratch-template",
    "resources": {
      "services": {
        "scratch-template": {
          "type": "template",
          "name": "scratch-template",
          "description": "A simple repository template to start coding from scratch",
          "archiveUrl": "https://github.com/mia-platform-marketplace/scratch-template/archive/main.tar.gz",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-11-08T17:43:44.956Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "scratch-template_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "Use this application to enable Auth0 authorization for your front-end",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/secure-apigateway/overview"
    },
    "itemId": "secure-api-gateway",
    "name": "Secure API Gateway",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/applications/auth0-application",
    "resources": {
      "services": {
        "authorization-service": {
          "name": "authorization-service",
          "type": "plugin",
          "componentId": "authorization-service",
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.0.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "http://auth0-client/userinfo",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "sub",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "x-request-id,request-id,cookie,authorization,client-type,host,x-forwarded-host",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "description": "",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.2",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "type": "folder",
              "envName": "CONFIGURATION_PATH"
            }
          },
          "defaultConfigMaps": [
            {
              "name": "authorization-service-config",
              "mountPath": "/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "oauth-login-site": {
          "type": "plugin",
          "description": "",
          "dockerImage": "nexus.mia-platform.eu/backoffice/login-site:8.1.2",
          "name": "oauth-login-site",
          "componentId": "oauth-login-site",
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        },
        "api-gateway": {
          "type": "plugin",
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "name": "api-gateway",
          "componentId": "api-gateway",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "frontend",
              "from": 8080,
              "to": 8080
            },
            {
              "name": "backoffice",
              "from": 8081,
              "to": 8081
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20
            },
            "readiness": {
              "port": "frontend",
              "path": "/healthz",
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            }
          },
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "defaultConfigMaps": [
            {
              "name": "api-gateway-server",
              "mountPath": "/etc/nginx/conf.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-platform",
              "mountPath": "/etc/nginx/platform.d",
              "files": [],
              "viewAsReadOnly": true
            },
            {
              "name": "api-gateway-customization",
              "mountPath": "/etc/nginx/customization.d",
              "files": [],
              "viewAsReadOnly": true,
              "link": {
                "targetSection": "endpoints"
              }
            },
            {
              "name": "api-gateway-backoffice",
              "mountPath": "/etc/nginx/backoffice.d",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "additionalContainers": [
            {
              "name": "dnsmasq",
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "defaultEnvironmentVariables": [],
              "defaultResources": {
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                },
                "cpuLimits": {
                  "min": "10m"
                }
              },
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              }
            }
          ]
        },
        "auth0-client": {
          "type": "plugin",
          "description": "",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:3.6.0",
          "name": "auth0-client",
          "componentId": "auth0-client",
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "value": "{{REDIS_HOSTS}}",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "60m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "60Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "failureThreshold": 1
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultConfigMaps": [
            {
              "name": "auth0-client-config",
              "mountPath": "/configs",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"clients\\": {\\n\\"frontEnd\\": {\\n\\"auth0Url\\": \\"{{AUTH0_APPLICATION_URL}}\\",\\n\\"clientId\\": \\"{{AUTH0_CLIENT_ID}}\\",\\n\\"clientSecret\\": \\"{{AUTH0_CLIENT_SECRET}}\\",\\n\\"redirectUrl\\": \\"{{AUTH0_CALLBACK_URL}}\\",\\n\\"scopes\\": [\\n    \\"offline_access\\",\\n    \\"profile\\",\\n    \\"email\\",\\n    \\"website\\"\\n],\\n\\"authorizeStateRequired\\": true\\n}\\n},\\n\\"defaultClient\\": \\"frontEnd\\",\\n\\"managementClient\\": {\\n\\"auth0Url\\": \\"{{AUTH0_APPLICATION_URL}}\\",\\n\\"clientId\\": \\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\n\\"clientSecret\\": \\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\"\\n},\\n\\"customClaimsNamespaces\\": [\\n\\"{{AUTH0_NAMESPACE}}/app_metadata\\",\\n\\"{{AUTH0_NAMESPACE}}/user_metadata\\"\\n]\\n}"
                }
              ],
              "link": {}
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      },
      "endpoints": {
        "/web-login": {
          "defaultBasePath": "/web-login",
          "defaultPathRewrite": "/web-login",
          "description": "Endpoint /web-login",
          "type": "custom",
          "tags": [
            "auth0"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false,
          "service": "oauth-login-site",
          "routes": {}
        },
        "/authorize": {
          "defaultBasePath": "/authorize",
          "defaultPathRewrite": "/authorize",
          "description": "Endpoint /authorize",
          "type": "custom",
          "tags": [
            "auth0"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false,
          "service": "auth0-client",
          "routes": {}
        },
        "/oauth/token": {
          "defaultBasePath": "/oauth/token",
          "defaultPathRewrite": "/oauth/token",
          "description": "Endpoint /oauth/token",
          "type": "custom",
          "tags": [
            "auth0"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false,
          "service": "auth0-client",
          "routes": {}
        },
        "/userinfo": {
          "defaultBasePath": "/userinfo",
          "defaultPathRewrite": "/userinfo",
          "description": "Endpoint /userinfo",
          "type": "custom",
          "tags": [
            "auth0"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false,
          "service": "auth0-client",
          "routes": {}
        },
        "/logout": {
          "defaultBasePath": "/logout",
          "defaultPathRewrite": "/logout",
          "description": "Endpoint /logout",
          "type": "custom",
          "tags": [
            "auth0"
          ],
          "public": true,
          "showInDocumentation": false,
          "secreted": false,
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": true,
          "forceMicroserviceGatewayProxy": false,
          "service": "auth0-client",
          "routes": {}
        }
      },
      "collections": {},
      "unsecretedVariables": {
        "AUTH0_NAMESPACE": {
          "productionEnv": "your-auth0-namespace",
          "noProductionEnv": "your-auth0-namespace"
        },
        "AUTH0_CALLBACK_URL": {
          "productionEnv": "your-auth0-callback-url",
          "noProductionEnv": "your-auth0-callback-url"
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-10-20T16:30:41.556Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "secure-api-gateway.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send custom email using an Amazon SES.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/ses-mail-notification-service/configuration"
    },
    "itemId": "ses-mail-notification-service",
    "name": "SES Mail Notification Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/mail-notification-service",
    "resources": {
      "services": {
        "ses-mail-notification-service": {
          "type": "plugin",
          "name": "ses-mail-notification-service",
          "description": "Send custom email using an Amazon SES.",
          "dockerImage": "nexus.mia-platform.eu/plugins/ses-mail-notification-service:3.5.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "SES_SECRET",
              "value": "CHANGE_WITH_YOUR_SES_SECRET",
              "valueType": "plain"
            },
            {
              "name": "SES_KEY",
              "value": "CHANGE_WITH_YOUR_SES_KEY",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.5.0",
      "releaseNote": "Added support for SES_HEADERS env variable in order to forward headers to AWS SES."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.028Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ses-mail-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send custom email using an Amazon SES.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/ses-mail-notification-service/configuration"
    },
    "itemId": "ses-mail-notification-service",
    "name": "SES Mail Notification Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/mail-notification-service",
    "resources": {
      "services": {
        "ses-mail-notification-service": {
          "type": "plugin",
          "name": "ses-mail-notification-service",
          "description": "Send custom email using an Amazon SES.",
          "dockerImage": "nexus.mia-platform.eu/plugins/ses-mail-notification-service:3.3.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "SES_SECRET",
              "value": "CHANGE_WITH_YOUR_SES_SECRET",
              "valueType": "plain"
            },
            {
              "name": "SES_KEY",
              "value": "CHANGE_WITH_YOUR_SES_KEY",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.028Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ses-mail-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send custom email using an Amazon SES.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/ses-mail-notification-service/configuration"
    },
    "itemId": "ses-mail-notification-service",
    "name": "SES Mail Notification Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/mail-notification-service",
    "resources": {
      "services": {
        "ses-mail-notification-service": {
          "type": "plugin",
          "name": "ses-mail-notification-service",
          "description": "Send custom email using an Amazon SES.",
          "dockerImage": "nexus.mia-platform.eu/plugins/ses-mail-notification-service:3.3.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "SES_SECRET",
              "value": "CHANGE_WITH_YOUR_SES_SECRET",
              "valueType": "plain"
            },
            {
              "name": "SES_KEY",
              "value": "CHANGE_WITH_YOUR_SES_KEY",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "ses-mail-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This is a plugin to be used for creating a manual Single View Creator for your Fast Data",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator",
    "name": "Single View Creator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator": {
          "type": "plugin",
          "name": "single-view-creator",
          "description": "This is a plugin to be used for creating a manual Single View Creator for your Fast Data",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.2",
          "componentId": "single-view-creator",
          "defaultEnvironmentVariables": [
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equals to the Single View name the service is in charge of keeping updated."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "should be equals to the \`SYSTEM_ID\` you have set in \`PROJECTIONS_CHANGES_COLLECTION\`"
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "name": "singleViewKey.js",
                  "content": "'use strict'\\nconst { get } = require('lodash')\\n\\n// ref: https://docs.mia-platform.eu/docs/fast_data/configure_single_view_creator#single-view-key-extractor\\nmodule.exports = function singleViewKeyGenerator(logger, projectionChangeIdentifier) {\\n    logger.debug({ identifier: projectionChangeIdentifier }, 'singleViewKeyGenerator identifier')\\n\\n    // get the single view id from the identifier\\n    const IDENTIFIER_KEY = 'UNIQUE_ID'\\n    const myId = get(projectionChangeIdentifier, IDENTIFIER_KEY, null)\\n\\n    logger.debug({ myId }, 'single view key')\\n    return {\\n    myId,\\n    }\\n}\\n                            \\n"
                },
                {
                  "name": "pipeline.js",
                  "content": "'use strict'\\nconst { propOr } = require('ramda')\\n\\nconst PROJECTIONS_NAMES = {\\nMY_PROJECTION: 'my-projection-name',\\n}\\n\\n// ref: https://docs.mia-platform.eu/docs/fast_data/configure_single_view_creator#aggregator\\nmodule.exports = (mongoDb) => {\\n    return async(logger, projectionChangeIdentifier) => {\\n        const uniqueId = propOr(null, 'UNIQUE_ID', projectionChangeIdentifier)\\n        logger.debug({ uniqueId }, 'pipeline document received')\\n\\n        // retrieve data from all projections you need for your single view\\n        const projectionCollection = mongoDb.collection(PROJECTIONS_NAMES.MY_PROJECTION)\\n        const projectionDataById = await projectionCollection.findOne({ UNIQUE_ID: uniqueId, __STATE__: 'PUBLIC' }) \\n        if (!projectionDataById) {\\n        logger.debug({ UNIQUE_ID: uniqueId }, 'single view public data not found')\\n        return []\\n        }\\n        const singleViewData = projectionDataById\\n        logger.debug({ singleViewData }, 'single view retrieved data')\\n\\n        return [\\n            singleViewData,\\n        ]\\n    }\\n}\\n              \\n              \\n"
                },
                {
                  "name": "mapper.js",
                  "content": "\\n'use strict'\\n// ref: https://docs.mia-platform.eu/docs/fast_data/configure_single_view_creator#mapping\\nmodule.exports = (logger, singleViewData) => {\\n    const { UNIQUE_ID, NAME } = singleViewData\\n    const singleView = {\\n    myId: UNIQUE_ID,\\n    name: NAME,\\n    }\\n    // be aware not to log sensitive data\\n    logger.debug({ singleView }, 'mapper')\\n    return singleView\\n}\\n\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.667Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "This is a plugin to be used for creating a manual Single View Creator for your Fast Data",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator",
    "name": "Single View Creator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator": {
          "type": "plugin",
          "name": "single-view-creator",
          "description": "This is a plugin to be used for creating a manual Single View Creator for your Fast Data",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.1",
          "componentId": "single-view-creator",
          "defaultEnvironmentVariables": [
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equals to the Single View name the service is in charge of keeping updated."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "should be equals to the \`SYSTEM_ID\` you have set in \`PROJECTIONS_CHANGES_COLLECTION\`"
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "name": "singleViewKey.js",
                  "content": "'use strict'\\nconst { get } = require('lodash')\\n\\n// ref: https://docs.mia-platform.eu/docs/fast_data/configure_single_view_creator#single-view-key-extractor\\nmodule.exports = function singleViewKeyGenerator(logger, projectionChangeIdentifier) {\\n    logger.debug({ identifier: projectionChangeIdentifier }, 'singleViewKeyGenerator identifier')\\n\\n    // get the single view id from the identifier\\n    const IDENTIFIER_KEY = 'UNIQUE_ID'\\n    const myId = get(projectionChangeIdentifier, IDENTIFIER_KEY, null)\\n\\n    logger.debug({ myId }, 'single view key')\\n    return {\\n    myId,\\n    }\\n}\\n                            \\n"
                },
                {
                  "name": "pipeline.js",
                  "content": "'use strict'\\nconst { propOr } = require('ramda')\\n\\nconst PROJECTIONS_NAMES = {\\nMY_PROJECTION: 'my-projection-name',\\n}\\n\\n// ref: https://docs.mia-platform.eu/docs/fast_data/configure_single_view_creator#aggregator\\nmodule.exports = (mongoDb) => {\\n    return async(logger, projectionChangeIdentifier) => {\\n        const uniqueId = propOr(null, 'UNIQUE_ID', projectionChangeIdentifier)\\n        logger.debug({ uniqueId }, 'pipeline document received')\\n\\n        // retrieve data from all projections you need for your single view\\n        const projectionCollection = mongoDb.collection(PROJECTIONS_NAMES.MY_PROJECTION)\\n        const projectionDataById = await projectionCollection.findOne({ UNIQUE_ID: uniqueId, __STATE__: 'PUBLIC' }) \\n        if (!projectionDataById) {\\n        logger.debug({ UNIQUE_ID: uniqueId }, 'single view public data not found')\\n        return []\\n        }\\n        const singleViewData = projectionDataById\\n        logger.debug({ singleViewData }, 'single view retrieved data')\\n\\n        return [\\n            singleViewData,\\n        ]\\n    }\\n}\\n              \\n              \\n"
                },
                {
                  "name": "mapper.js",
                  "content": "\\n'use strict'\\n// ref: https://docs.mia-platform.eu/docs/fast_data/configure_single_view_creator#mapping\\nmodule.exports = (logger, singleViewData) => {\\n    const { UNIQUE_ID, NAME } = singleViewData\\n    const singleView = {\\n    myId: UNIQUE_ID,\\n    name: NAME,\\n    }\\n    // be aware not to log sensitive data\\n    logger.debug({ singleView }, 'mapper')\\n    return singleView\\n}\\n\\n"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-04-20T12:18:27.904Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code",
    "name": "Single View Creator Low Code",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code": {
          "type": "plugin",
          "name": "single-view-creator-low-code",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.4.0",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "200Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "name": "singleViewKey.json",
                  "content": "{\\"version\\":\\"1.0.0\\",\\"config\\":{}}"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "name": "erSchema.json",
                  "content": "{\\"version\\":\\"1.0.0\\",\\"config\\":{}}"
                }
              ]
            },
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "name": "aggregation.json",
                  "content": "{ \\"version\\": \\"1.3.0\\", \\"config\\": { \\"SV_CONFIG\\": { \\"dependencies\\": {}, \\"mapping\\": {} }}}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.926Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code",
    "name": "Single View Creator Low Code",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code": {
          "type": "plugin",
          "name": "single-view-creator-low-code",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.4.0",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "200Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "name": "singleViewKey.json",
                  "content": "{\\"version\\":\\"1.0.0\\",\\"config\\":{}}"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "name": "erSchema.json",
                  "content": "{\\"version\\":\\"1.0.0\\",\\"config\\":{}}"
                }
              ]
            },
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "name": "aggregation.json",
                  "content": "{ \\"version\\": \\"1.3.0\\", \\"config\\": { \\"SV_CONFIG\\": { \\"dependencies\\": {}, \\"mapping\\": {} }}}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-11-22T15:43:44.133Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-kafka",
    "name": "Single View Creator Low Code - Kafka",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-kafka": {
          "type": "plugin",
          "name": "single-view-creator-low-code-kafka",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.8.1",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "KAFKA",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "KAFKA_PROJECTION_CHANGES_TOPICS",
              "value": "CHANGE_WITH_TRIGGER_TOPIC",
              "valueType": "plain",
              "description": "The name of topic that will receive trigger messages."
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH YOUR KAFKA BROKERS",
              "valueType": "plain",
              "description": "Comma separated list of kafka brokers"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR KAFKA CLIENT ID",
              "valueType": "plain",
              "description": "Kafka identifier."
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH YOUR KAFKA CONSUMER GROUP",
              "valueType": "plain",
              "description": "Kafka consumer group for trigger messages."
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH YOUR KAFKA USER",
              "valueType": "plain",
              "description": "Kafka authentication user"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH YOUR KAFKA PASSWORD",
              "valueType": "plain",
              "description": "Kafka authentication password"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE WITH YOUR KAFKA MECHANISM",
              "valueType": "plain",
              "description": "Kafka authentication mechanism"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.8.1",
      "releaseNote": "### Fixed\\n\\n- Allow \`null\` in er-schema condition\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.924Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-kafka.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-kafka",
    "name": "Single View Creator Low Code - Kafka",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-kafka": {
          "type": "plugin",
          "name": "single-view-creator-low-code-kafka",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.8.0",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "KAFKA",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "KAFKA_PROJECTION_CHANGES_TOPICS",
              "value": "CHANGE_WITH_TRIGGER_TOPIC",
              "valueType": "plain",
              "description": "The name of topic that will receive trigger messages."
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH YOUR KAFKA BROKERS",
              "valueType": "plain",
              "description": "Comma separated list of kafka brokers"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR KAFKA CLIENT ID",
              "valueType": "plain",
              "description": "Kafka identifier."
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH YOUR KAFKA CONSUMER GROUP",
              "valueType": "plain",
              "description": "Kafka consumer group for trigger messages."
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH YOUR KAFKA USER",
              "valueType": "plain",
              "description": "Kafka authentication user"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH YOUR KAFKA PASSWORD",
              "valueType": "plain",
              "description": "Kafka authentication password"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE WITH YOUR KAFKA MECHANISM",
              "valueType": "plain",
              "description": "Kafka authentication mechanism"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.8.0",
      "releaseNote": "### Added\\n\\n- introduce \`forceResume\` parameter in Control Plane settings to control the service behavior in case of unsuccessful connection with Control Plane Operator\\n\\n### Changed\\n\\n- Control Plane settings \`state\` and \`feedback\` properties are now optional\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.032Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-kafka.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-kafka",
    "name": "Single View Creator Low Code - Kafka",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-kafka": {
          "type": "plugin",
          "name": "single-view-creator-low-code-kafka",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.3",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "KAFKA",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "KAFKA_PROJECTION_CHANGES_TOPICS",
              "value": "CHANGE_WITH_TRIGGER_TOPIC",
              "valueType": "plain",
              "description": "The name of topic that will receive trigger messages."
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH YOUR KAFKA BROKERS",
              "valueType": "plain",
              "description": "Comma separated list of kafka brokers"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR KAFKA CLIENT ID",
              "valueType": "plain",
              "description": "Kafka identifier."
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH YOUR KAFKA CONSUMER GROUP",
              "valueType": "plain",
              "description": "Kafka consumer group for trigger messages."
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH YOUR KAFKA USER",
              "valueType": "plain",
              "description": "Kafka authentication user"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH YOUR KAFKA PASSWORD",
              "valueType": "plain",
              "description": "Kafka authentication password"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE WITH YOUR KAFKA MECHANISM",
              "valueType": "plain",
              "description": "Kafka authentication mechanism"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.031Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-kafka.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-kafka",
    "name": "Single View Creator Low Code - Kafka",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-kafka": {
          "type": "plugin",
          "name": "single-view-creator-low-code-kafka",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.2",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "KAFKA",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "KAFKA_PROJECTION_CHANGES_TOPICS",
              "value": "CHANGE_WITH_TRIGGER_TOPIC",
              "valueType": "plain",
              "description": "The name of topic that will receive trigger messages."
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH YOUR KAFKA BROKERS",
              "valueType": "plain",
              "description": "Comma separated list of kafka brokers"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR KAFKA CLIENT ID",
              "valueType": "plain",
              "description": "Kafka identifier."
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH YOUR KAFKA CONSUMER GROUP",
              "valueType": "plain",
              "description": "Kafka consumer group for trigger messages."
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH YOUR KAFKA USER",
              "valueType": "plain",
              "description": "Kafka authentication user"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH YOUR KAFKA PASSWORD",
              "valueType": "plain",
              "description": "Kafka authentication password"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE WITH YOUR KAFKA MECHANISM",
              "valueType": "plain",
              "description": "Kafka authentication mechanism"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.667Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-kafka.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-kafka",
    "name": "Single View Creator Low Code - Kafka",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-kafka": {
          "type": "plugin",
          "name": "single-view-creator-low-code-kafka",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.1",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "KAFKA",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "KAFKA_PROJECTION_CHANGES_TOPICS",
              "value": "CHANGE_WITH_TRIGGER_TOPIC",
              "valueType": "plain",
              "description": "The name of topic that will receive trigger messages."
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH YOUR KAFKA BROKERS",
              "valueType": "plain",
              "description": "Comma separated list of kafka brokers"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR KAFKA CLIENT ID",
              "valueType": "plain",
              "description": "Kafka identifier."
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH YOUR KAFKA CONSUMER GROUP",
              "valueType": "plain",
              "description": "Kafka consumer group for trigger messages."
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH YOUR KAFKA USER",
              "valueType": "plain",
              "description": "Kafka authentication user"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH YOUR KAFKA PASSWORD",
              "valueType": "plain",
              "description": "Kafka authentication password"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE WITH YOUR KAFKA MECHANISM",
              "valueType": "plain",
              "description": "Kafka authentication mechanism"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.030Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-kafka.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-kafka",
    "name": "Single View Creator Low Code - Kafka",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-kafka": {
          "type": "plugin",
          "name": "single-view-creator-low-code-kafka",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.1",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "KAFKA",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "KAFKA_PROJECTION_CHANGES_TOPICS",
              "value": "CHANGE_WITH_TRIGGER_TOPIC",
              "valueType": "plain",
              "description": "The name of topic that will receive trigger messages."
            },
            {
              "name": "KAFKA_BROKERS_LIST",
              "value": "CHANGE WITH YOUR KAFKA BROKERS",
              "valueType": "plain",
              "description": "Comma separated list of kafka brokers"
            },
            {
              "name": "KAFKA_CLIENT_ID",
              "value": "CHANGE WITH YOUR KAFKA CLIENT ID",
              "valueType": "plain",
              "description": "Kafka identifier."
            },
            {
              "name": "KAFKA_GROUP_ID",
              "value": "CHANGE WITH YOUR KAFKA CONSUMER GROUP",
              "valueType": "plain",
              "description": "Kafka consumer group for trigger messages."
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE WITH YOUR KAFKA USER",
              "valueType": "plain",
              "description": "Kafka authentication user"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE WITH YOUR KAFKA PASSWORD",
              "valueType": "plain",
              "description": "Kafka authentication password"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE WITH YOUR KAFKA MECHANISM",
              "valueType": "plain",
              "description": "Kafka authentication mechanism"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-22T17:30:21.330Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-kafka.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-mongodb",
    "name": "Single View Creator Low Code - MongoDB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-mongodb": {
          "type": "plugin",
          "name": "single-view-creator-low-code-mongodb",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.8.1",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "MONGO",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SCHEDULING_TIME",
              "value": "60000",
              "valueType": "plain",
              "description": "a quantity of time in milliseconds, every X milliseconds the service wake up and check if there are some projections changes in NEW state to work on."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.8.1",
      "releaseNote": "### Fixed\\n\\n- Allow \`null\` in er-schema condition\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.921Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-mongodb.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-mongodb",
    "name": "Single View Creator Low Code - MongoDB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-mongodb": {
          "type": "plugin",
          "name": "single-view-creator-low-code-mongodb",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.8.0",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "MONGO",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SCHEDULING_TIME",
              "value": "60000",
              "valueType": "plain",
              "description": "a quantity of time in milliseconds, every X milliseconds the service wake up and check if there are some projections changes in NEW state to work on."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.8.0",
      "releaseNote": "### Added\\n\\n- introduce \`forceResume\` parameter in Control Plane settings to control the service behavior in case of unsuccessful connection with Control Plane Operator\\n\\n### Changed\\n\\n- Control Plane settings \`state\` and \`feedback\` properties are now optional\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.032Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-mongodb.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-mongodb",
    "name": "Single View Creator Low Code - MongoDB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-mongodb": {
          "type": "plugin",
          "name": "single-view-creator-low-code-mongodb",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.3",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "MONGO",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SCHEDULING_TIME",
              "value": "60000",
              "valueType": "plain",
              "description": "a quantity of time in milliseconds, every X milliseconds the service wake up and check if there are some projections changes in NEW state to work on."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.034Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-mongodb.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-mongodb",
    "name": "Single View Creator Low Code - MongoDB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-mongodb": {
          "type": "plugin",
          "name": "single-view-creator-low-code-mongodb",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.2",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "MONGO",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SCHEDULING_TIME",
              "value": "60000",
              "valueType": "plain",
              "description": "a quantity of time in milliseconds, every X milliseconds the service wake up and check if there are some projections changes in NEW state to work on."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.668Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-mongodb.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-mongodb",
    "name": "Single View Creator Low Code - MongoDB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-mongodb": {
          "type": "plugin",
          "name": "single-view-creator-low-code-mongodb",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.1",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "MONGO",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SCHEDULING_TIME",
              "value": "60000",
              "valueType": "plain",
              "description": "a quantity of time in milliseconds, every X milliseconds the service wake up and check if there are some projections changes in NEW state to work on."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "6.7.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.033Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-mongodb.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/single-view-creator/configuration"
    },
    "itemId": "single-view-creator-low-code-mongodb",
    "name": "Single View Creator Low Code - MongoDB",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-creator-template",
    "resources": {
      "services": {
        "single-view-creator-low-code-mongodb": {
          "type": "plugin",
          "name": "single-view-creator-low-code-mongodb",
          "description": "Create your Single Views leveraging the power of configuration files instead of writing all the code on your own!",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-creator-plugin:6.7.1",
          "componentId": "single-view-creator-low-code",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "TYPE",
              "value": "CHANGE_WITH_TYPE",
              "valueType": "plain",
              "description": "Identifies the type of projection changes that need to be read. It should be the same as the Single View name you want to update."
            },
            {
              "name": "PROJECTIONS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where projections are stored. Must be a valid uri"
            },
            {
              "name": "PROJECTIONS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections are read."
            },
            {
              "name": "SINGLE_VIEWS_MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB connection string where single view must be stored. Must be a valid uri"
            },
            {
              "name": "SINGLE_VIEWS_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where single views are written."
            },
            {
              "name": "SINGLE_VIEWS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_COLLECTION",
              "valueType": "plain",
              "description": "It must be equal to the Single View name the service is in charge of."
            },
            {
              "name": "SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "value": "CHANGE_WITH_SINGLE_VIEWS_PORTFOLIO_ORIGIN",
              "valueType": "plain",
              "description": "An identifier for the Kafka client to be able to debug and track the requests. If this Single View Creator is responsible for handling only one system, we suggest to use the \`SYSTEM_ID\` specified in the Real Time Updater service."
            },
            {
              "name": "SINGLE_VIEWS_ERRORS_COLLECTION",
              "value": "CHANGE_WITH_SINGLE_VIEWS_ERRORS_COLLECTION",
              "valueType": "plain",
              "description": "Name of a MongoDB CRUD you want to use as collection for single view errors."
            },
            {
              "name": "USE_AUTOMATIC",
              "value": "true",
              "valueType": "plain",
              "description": "wheather to use the low code architecture for the Single View Creator service or not"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "the path to the ER Schema folder, e.g. \`/home/node/app/erSchema\`"
            },
            {
              "name": "AGGREGATION_FOLDER",
              "value": "/home/node/app/aggregation",
              "valueType": "plain",
              "description": "the path to the Aggregation folder, e.g. \`/home/node/app/aggregation\`"
            },
            {
              "name": "CONFIGURATION_FOLDER",
              "value": "/home/node/app/configuration",
              "valueType": "plain",
              "description": "Folder where configuration files are mounted"
            },
            {
              "name": "PROJECTIONS_CHANGES_SOURCE",
              "value": "MONGO",
              "valueType": "plain",
              "description": "Tells the plugin the source where projection changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_DATABASE",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "The db from where projections changes are read."
            },
            {
              "name": "PROJECTIONS_CHANGES_COLLECTION",
              "value": "CHANGE_WITH_PROJECTIONS_CHANGES_COLLECTION",
              "valueType": "plain",
              "description": "if you have set a custom projection change collection name from advanced, then set its name. Otherwise, it is \`fd-pc-SYSTEM_ID\` where \`SYSTEM_ID\` is the id of the System of Records this single view creator is responsible for."
            },
            {
              "name": "SCHEDULING_TIME",
              "value": "60000",
              "valueType": "plain",
              "description": "a quantity of time in milliseconds, every X milliseconds the service wake up and check if there are some projections changes in NEW state to work on."
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "100Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "120m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "aggregation",
              "mountPath": "/home/node/app/aggregation",
              "files": [
                {
                  "content": "{\\n  \\"version\\": \\"1.3.0\\",\\n  \\"config\\": {\\n      \\"SV_CONFIG\\": {\\n          \\"dependencies\\": {},\\n          \\"mapping\\": {}\\n      }\\n  }\\n}",
                  "name": "aggregation.json"
                }
              ]
            },
            {
              "name": "configuration",
              "mountPath": "/home/node/app/configuration",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "singleViewKey.json"
                }
              ]
            },
            {
              "name": "erschema",
              "mountPath": "/home/node/app/erSchema",
              "files": [
                {
                  "content": "{\\n    \\"version\\": \\"1.0.0\\",\\n    \\"config\\": {}\\n}",
                  "name": "erSchema.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-02-22T17:30:21.361Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-creator-low-code-mongodb.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/configuration/single_view_trigger_generator"
    },
    "itemId": "single-view-trigger-generator",
    "name": "Single View Trigger Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-trigger-generator-service",
    "resources": {
      "services": {
        "single-view-trigger-generator": {
          "type": "plugin",
          "name": "single-view-trigger-generator",
          "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-trigger-generator-plugin:3.4.1",
          "componentId": "single-view-trigger-generator",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging; to choose from: error, fatal, warn, info, debug, trace, silent"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB URL where the projections are stored"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "MongoDB Database name where the projections are stored"
            },
            {
              "name": "EVENT_STORE_TARGET",
              "value": "CHANGE_WITH_YOUR_EVENT_STORE_TARGET",
              "valueType": "plain",
              "description": "Kafka topic to send the \`sv-trigger\` messages or MongoDB collection to save the \`pc\` records"
            },
            {
              "name": "SINGLE_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "The name of the Single View",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "EVENT_STORE_CONFIG_PATH",
              "value": "/home/node/app/eventStoreConfig/eventStoreConfig.json",
              "valueType": "plain",
              "description": "Path to the Event Store Config file"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "Path to the ER Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "valueType": "plain",
              "description": "Path to the Projection Changes Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "valueType": "plain",
              "description": "Path to the folder that contains the file kafkaProjectionUpdates.json",
              "readOnly": true,
              "managedBy": "fast-data"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "120Mi",
              "max": "360Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "event-store-config",
              "mountPath": "/home/node/app/eventStoreConfig",
              "files": [
                {
                  "content": "{\\n  \\"consumer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"consumerGroupId\\": \\"group-id\\",\\n      \\"consumeFromBeginning\\": true,\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  },\\n  \\"producer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  }\\n}\\n",
                  "name": "eventStoreConfig.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.1",
      "releaseNote": "### Fixed\\n\\n- Topics not handled by the control plane are resumed and work independently\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-09T16:47:48.035Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-trigger-generator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/configuration/single_view_trigger_generator"
    },
    "itemId": "single-view-trigger-generator",
    "name": "Single View Trigger Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-trigger-generator-service",
    "resources": {
      "services": {
        "single-view-trigger-generator": {
          "type": "plugin",
          "name": "single-view-trigger-generator",
          "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-trigger-generator-plugin:3.4.0",
          "componentId": "single-view-trigger-generator",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging; to choose from: error, fatal, warn, info, debug, trace, silent"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB URL where the projections are stored"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "MongoDB Database name where the projections are stored"
            },
            {
              "name": "EVENT_STORE_TARGET",
              "value": "CHANGE_WITH_YOUR_EVENT_STORE_TARGET",
              "valueType": "plain",
              "description": "Kafka topic to send the \`sv-trigger\` messages or MongoDB collection to save the \`pc\` records"
            },
            {
              "name": "SINGLE_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "The name of the Single View",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "EVENT_STORE_CONFIG_PATH",
              "value": "/home/node/app/eventStoreConfig/eventStoreConfig.json",
              "valueType": "plain",
              "description": "Path to the Event Store Config file"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "Path to the ER Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "valueType": "plain",
              "description": "Path to the Projection Changes Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "valueType": "plain",
              "description": "Path to the folder that contains the file kafkaProjectionUpdates.json",
              "readOnly": true,
              "managedBy": "fast-data"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "120Mi",
              "max": "360Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "event-store-config",
              "mountPath": "/home/node/app/eventStoreConfig",
              "files": [
                {
                  "content": "{\\n  \\"consumer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"consumerGroupId\\": \\"group-id\\",\\n      \\"consumeFromBeginning\\": true,\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  },\\n  \\"producer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  }\\n}\\n",
                  "name": "eventStoreConfig.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.4.0",
      "releaseNote": "### Added\\n\\n- introduce \`forceResume\` parameter in Control Plane settings to control the service behavior in case of unsuccessful connection with Control Plane Operator\\n\\n### Changed\\n\\n- Control Plane settings \`state\` and \`feedback\` properties are now optional\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.035Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-trigger-generator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/configuration/single_view_trigger_generator"
    },
    "itemId": "single-view-trigger-generator",
    "name": "Single View Trigger Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-trigger-generator-service",
    "resources": {
      "services": {
        "single-view-trigger-generator": {
          "type": "plugin",
          "name": "single-view-trigger-generator",
          "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-trigger-generator-plugin:3.3.4",
          "componentId": "single-view-trigger-generator",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging; to choose from: error, fatal, warn, info, debug, trace, silent"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB URL where the projections are stored"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "MongoDB Database name where the projections are stored"
            },
            {
              "name": "EVENT_STORE_TARGET",
              "value": "CHANGE_WITH_YOUR_EVENT_STORE_TARGET",
              "valueType": "plain",
              "description": "Kafka topic to send the \`sv-trigger\` messages or MongoDB collection to save the \`pc\` records"
            },
            {
              "name": "SINGLE_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "The name of the Single View",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "EVENT_STORE_CONFIG_PATH",
              "value": "/home/node/app/eventStoreConfig/eventStoreConfig.json",
              "valueType": "plain",
              "description": "Path to the Event Store Config file"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "Path to the ER Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "valueType": "plain",
              "description": "Path to the Projection Changes Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "valueType": "plain",
              "description": "Path to the folder that contains the file kafkaProjectionUpdates.json",
              "readOnly": true,
              "managedBy": "fast-data"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "120Mi",
              "max": "360Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "event-store-config",
              "mountPath": "/home/node/app/eventStoreConfig",
              "files": [
                {
                  "content": "{\\n  \\"consumer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"consumerGroupId\\": \\"group-id\\",\\n      \\"consumeFromBeginning\\": true,\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  },\\n  \\"producer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  }\\n}\\n",
                  "name": "eventStoreConfig.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.4",
      "releaseNote": "### Fixed\\n\\n- GRPC client successfully reconnect upon Control Plane Operator restarts\\n\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.055Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-trigger-generator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/configuration/single_view_trigger_generator"
    },
    "itemId": "single-view-trigger-generator",
    "name": "Single View Trigger Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-trigger-generator-service",
    "resources": {
      "services": {
        "single-view-trigger-generator": {
          "type": "plugin",
          "name": "single-view-trigger-generator",
          "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-trigger-generator-plugin:3.3.3",
          "componentId": "single-view-trigger-generator",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging; to choose from: error, fatal, warn, info, debug, trace, silent"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB URL where the projections are stored"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "MongoDB Database name where the projections are stored"
            },
            {
              "name": "EVENT_STORE_TARGET",
              "value": "CHANGE_WITH_YOUR_EVENT_STORE_TARGET",
              "valueType": "plain",
              "description": "Kafka topic to send the \`sv-trigger\` messages or MongoDB collection to save the \`pc\` records"
            },
            {
              "name": "SINGLE_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "The name of the Single View",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "EVENT_STORE_CONFIG_PATH",
              "value": "/home/node/app/eventStoreConfig/eventStoreConfig.json",
              "valueType": "plain",
              "description": "Path to the Event Store Config file"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "Path to the ER Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "valueType": "plain",
              "description": "Path to the Projection Changes Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "valueType": "plain",
              "description": "Path to the folder that contains the file kafkaProjectionUpdates.json",
              "readOnly": true,
              "managedBy": "fast-data"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "120Mi",
              "max": "360Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "event-store-config",
              "mountPath": "/home/node/app/eventStoreConfig",
              "files": [
                {
                  "content": "{\\n  \\"consumer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"consumerGroupId\\": \\"group-id\\",\\n      \\"consumeFromBeginning\\": true,\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  },\\n  \\"producer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  }\\n}\\n",
                  "name": "eventStoreConfig.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.668Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-trigger-generator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/configuration/single_view_trigger_generator"
    },
    "itemId": "single-view-trigger-generator",
    "name": "Single View Trigger Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-trigger-generator-service",
    "resources": {
      "services": {
        "single-view-trigger-generator": {
          "type": "plugin",
          "name": "single-view-trigger-generator",
          "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-trigger-generator-plugin:3.3.2",
          "componentId": "single-view-trigger-generator",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging; to choose from: error, fatal, warn, info, debug, trace, silent"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB URL where the projections are stored"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "MongoDB Database name where the projections are stored"
            },
            {
              "name": "EVENT_STORE_TARGET",
              "value": "CHANGE_WITH_YOUR_EVENT_STORE_TARGET",
              "valueType": "plain",
              "description": "Kafka topic to send the \`sv-trigger\` messages or MongoDB collection to save the \`pc\` records"
            },
            {
              "name": "SINGLE_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "The name of the Single View",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "EVENT_STORE_CONFIG_PATH",
              "value": "/home/node/app/eventStoreConfig/eventStoreConfig.json",
              "valueType": "plain",
              "description": "Path to the Event Store Config file"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "Path to the ER Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "valueType": "plain",
              "description": "Path to the Projection Changes Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "valueType": "plain",
              "description": "Path to the folder that contains the file kafkaProjectionUpdates.json",
              "readOnly": true,
              "managedBy": "fast-data"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "120Mi",
              "max": "360Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "event-store-config",
              "mountPath": "/home/node/app/eventStoreConfig",
              "files": [
                {
                  "content": "{\\n  \\"consumer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"consumerGroupId\\": \\"group-id\\",\\n      \\"consumeFromBeginning\\": true,\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  },\\n  \\"producer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  }\\n}\\n",
                  "name": "eventStoreConfig.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.033Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-trigger-generator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "fast-data",
    "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/fast_data/configuration/single_view_trigger_generator"
    },
    "itemId": "single-view-trigger-generator",
    "name": "Single View Trigger Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/fast-data/single-view-trigger-generator-service",
    "resources": {
      "services": {
        "single-view-trigger-generator": {
          "type": "plugin",
          "name": "single-view-trigger-generator",
          "description": "Keep your Real Time Updater lightning-fast by using the Single View Trigger Generator: this service will take care of executing strategies and produce projection changes, so that your Real Time Updater can live up to its name and always keep the Projections up to date in near real time.",
          "dockerImage": "nexus.mia-platform.eu/fast-data/single-view-trigger-generator-plugin:3.3.2",
          "componentId": "single-view-trigger-generator",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain",
              "description": "Level to use for logging; to choose from: error, fatal, warn, info, debug, trace, silent"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "value": "{{MONGODB_URL}}",
              "valueType": "plain",
              "description": "MongoDB URL where the projections are stored"
            },
            {
              "name": "MONGODB_NAME",
              "value": "{{MONGODB_NAME}}",
              "valueType": "plain",
              "description": "MongoDB Database name where the projections are stored"
            },
            {
              "name": "EVENT_STORE_TARGET",
              "value": "CHANGE_WITH_YOUR_EVENT_STORE_TARGET",
              "valueType": "plain",
              "description": "Kafka topic to send the \`sv-trigger\` messages or MongoDB collection to save the \`pc\` records"
            },
            {
              "name": "SINGLE_VIEW_NAME",
              "value": "",
              "valueType": "plain",
              "description": "The name of the Single View",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "EVENT_STORE_CONFIG_PATH",
              "value": "/home/node/app/eventStoreConfig/eventStoreConfig.json",
              "valueType": "plain",
              "description": "Path to the Event Store Config file"
            },
            {
              "name": "ER_SCHEMA_FOLDER",
              "value": "/home/node/app/erSchema",
              "valueType": "plain",
              "description": "Path to the ER Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "PROJECTION_CHANGES_SCHEMA_FOLDER",
              "value": "/home/node/app/projectionChangesSchema",
              "valueType": "plain",
              "description": "Path to the Projection Changes Schema folder",
              "readOnly": true,
              "managedBy": "fast-data"
            },
            {
              "name": "KAFKA_PROJECTION_UPDATES_FOLDER",
              "value": "/home/node/app/kafkaProjectionUpdates",
              "valueType": "plain",
              "description": "Path to the folder that contains the file kafkaProjectionUpdates.json",
              "readOnly": true,
              "managedBy": "fast-data"
            }
          ],
          "defaultResources": {
            "memoryLimits": {
              "min": "120Mi",
              "max": "360Mi"
            },
            "cpuLimits": {
              "min": "100m",
              "max": "600m"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "event-store-config",
              "mountPath": "/home/node/app/eventStoreConfig",
              "files": [
                {
                  "content": "{\\n  \\"consumer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"consumerGroupId\\": \\"group-id\\",\\n      \\"consumeFromBeginning\\": true,\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  },\\n  \\"producer\\": {\\n    \\"kafka\\": {\\n      \\"brokers\\": \\"my-broker:9092\\",\\n      \\"clientId\\": \\"client-id\\",\\n      \\"logLevel\\": \\"WARN\\"\\n    }\\n  }\\n}\\n",
                  "name": "eventStoreConfig.json"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-07T17:30:55.921Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "single-view-trigger-generator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Node.js application that uses Pre and Post \\nhooks to send a message on a Slack channel.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-PrePost-Microservice-Example/master/README.md"
    },
    "itemId": "slack-webhook-example",
    "name": "Slack Webhook Example",
    "resources": {
      "services": {
        "slack-webhook-example": {
          "type": "example",
          "name": "slack-webhook-example",
          "description": "Node.js application that uses Pre and Post \\nhooks to send a message on a Slack channel.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-PrePost-Microservice-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-pre-post.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_NAME",
              "value": "api-gateway",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.073Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "slack-webhook-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "Node.js application that uses Pre and Post \\nhooks to send a message on a Slack channel.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Node.js-PrePost-Microservice-Example/master/README.md"
    },
    "itemId": "slack-webhook-example",
    "name": "Slack Webhook Example",
    "resources": {
      "services": {
        "slack-webhook-example": {
          "type": "example",
          "name": "slack-webhook-example",
          "description": "Node.js application that uses Pre and Post \\nhooks to send a message on a Slack channel.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Node.js-PrePost-Microservice-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-pre-post.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_NAME",
              "value": "api-gateway",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-02-12T10:43:53.643Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "slack-webhook-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/sms-service/configuration"
    },
    "itemId": "sms-service",
    "name": "SMS Service",
    "description": "Send SMS using Kaleyra or Twilio",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/sms-service",
    "resources": {
      "services": {
        "sms-service": {
          "type": "plugin",
          "name": "sms-service",
          "dockerImage": "nexus.mia-platform.eu/plugins/sms-service:1.2.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PROVIDER",
              "value": "twilio",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_ACCOUNT_SID",
              "value": "{{CHANGE-TWILIO_ACCOUNT_SID}}",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_AUTH_TOKEN",
              "value": "{{CHANGE-TWILIO_AUTH_TOKEN}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.2.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.031Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "sms-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/sms-service/configuration"
    },
    "itemId": "sms-service",
    "name": "SMS Service",
    "description": "Send SMS using Kaleyra or Twilio",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/sms-service",
    "resources": {
      "services": {
        "sms-service": {
          "type": "plugin",
          "name": "sms-service",
          "dockerImage": "nexus.mia-platform.eu/plugins/sms-service:1.2.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_PROVIDER",
              "value": "twilio",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_ACCOUNT_SID",
              "value": "{{CHANGE-TWILIO_ACCOUNT_SID}}",
              "valueType": "plain"
            },
            {
              "name": "TWILIO_AUTH_TOKEN",
              "value": "{{CHANGE-TWILIO_AUTH_TOKEN}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-10-14T12:20:28.007Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "sms-service_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send custom email using configured SMTP server",
    "itemId": "smtp-mail-notification-service",
    "name": "SMTP Mail Notification Service",
    "resources": {
      "services": {
        "smtp-mail-notification-service": {
          "type": "plugin",
          "name": "smtp-mail-notification-service",
          "description": "Send custom email using configured SMTP server",
          "dockerImage": "nexus.mia-platform.eu/plugins/smtp-mail-notification-service:3.5.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HOST",
              "value": "CHANGE_WITH_YOUR_HOST",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "CHANGE_WITH_YOUR_PORT",
              "valueType": "plain"
            },
            {
              "name": "AUTH_TYPE",
              "value": "CHANGE_WITH_YOUR_AUTH_TYPE",
              "valueType": "plain"
            },
            {
              "name": "AUTH_USER",
              "value": "CHANGE_WITH_YOUR_AUTH_USER",
              "valueType": "plain"
            },
            {
              "name": "AUTH_PASS",
              "value": "CHANGE_WITH_YOUR_SECRET_AUTH_PASS",
              "valueType": "plain"
            },
            {
              "name": "TLS_SECURE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TLS_SECURE",
              "valueType": "plain"
            },
            {
              "name": "TLS_IGNORE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TLS_IGNORE",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TRUSTED_PROXIES",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.5.0",
      "releaseNote": "Added support for SES_HEADERS env variable in order to forward headers to AWS SES."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.031Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "smtp-mail-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send custom email using configured SMTP server",
    "itemId": "smtp-mail-notification-service",
    "name": "SMTP Mail Notification Service",
    "resources": {
      "services": {
        "smtp-mail-notification-service": {
          "type": "plugin",
          "name": "smtp-mail-notification-service",
          "description": "Send custom email using configured SMTP server",
          "dockerImage": "nexus.mia-platform.eu/plugins/smtp-mail-notification-service:3.3.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HOST",
              "value": "CHANGE_WITH_YOUR_HOST",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "CHANGE_WITH_YOUR_PORT",
              "valueType": "plain"
            },
            {
              "name": "AUTH_TYPE",
              "value": "CHANGE_WITH_YOUR_AUTH_TYPE",
              "valueType": "plain"
            },
            {
              "name": "AUTH_USER",
              "value": "CHANGE_WITH_YOUR_AUTH_USER",
              "valueType": "plain"
            },
            {
              "name": "AUTH_PASS",
              "value": "CHANGE_WITH_YOUR_SECRET_AUTH_PASS",
              "valueType": "plain"
            },
            {
              "name": "TLS_SECURE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TLS_SECURE",
              "valueType": "plain"
            },
            {
              "name": "TLS_IGNORE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TLS_IGNORE",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TRUSTED_PROXIES",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.3.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.030Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "smtp-mail-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "notification",
    "description": "Send custom email using configured SMTP server",
    "itemId": "smtp-mail-notification-service",
    "name": "SMTP Mail Notification Service",
    "resources": {
      "services": {
        "smtp-mail-notification-service": {
          "type": "plugin",
          "name": "smtp-mail-notification-service",
          "description": "Send custom email using configured SMTP server",
          "dockerImage": "nexus.mia-platform.eu/plugins/smtp-mail-notification-service:3.3.0",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "HOST",
              "value": "CHANGE_WITH_YOUR_HOST",
              "valueType": "plain"
            },
            {
              "name": "PORT",
              "value": "CHANGE_WITH_YOUR_PORT",
              "valueType": "plain"
            },
            {
              "name": "AUTH_TYPE",
              "value": "CHANGE_WITH_YOUR_AUTH_TYPE",
              "valueType": "plain"
            },
            {
              "name": "AUTH_USER",
              "value": "CHANGE_WITH_YOUR_AUTH_USER",
              "valueType": "plain"
            },
            {
              "name": "AUTH_PASS",
              "value": "CHANGE_WITH_YOUR_SECRET_AUTH_PASS",
              "valueType": "plain"
            },
            {
              "name": "TLS_SECURE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TLS_SECURE",
              "valueType": "plain"
            },
            {
              "name": "TLS_IGNORE",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TLS_IGNORE",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "CHANGE_WITH_YOUR_OPTIONAL_TRUSTED_PROXIES",
              "valueType": "plain"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "smtp-mail-notification-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Use Mia-Platform Springboot library to develop custom Decorators and interact with CRUD Service.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Springboot-PrePost-Decorator-Example/master/README.md"
    },
    "itemId": "springboot-decorator-example",
    "name": "Springboot Decorator Example",
    "resources": {
      "services": {
        "springboot-decorator-example": {
          "type": "example",
          "name": "springboot-decorator-example",
          "description": "Use Mia-Platform Springboot library to develop custom Decorators and interact with CRUD Service.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Springboot-PrePost-Decorator-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.069Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "springboot-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "Use Mia-Platform Springboot library to develop custom Decorators and interact with CRUD Service.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Springboot-PrePost-Decorator-Example/master/README.md"
    },
    "itemId": "springboot-decorator-example",
    "name": "Springboot Decorator Example",
    "resources": {
      "services": {
        "springboot-decorator-example": {
          "type": "example",
          "name": "springboot-decorator-example",
          "description": "Use Mia-Platform Springboot library to develop custom Decorators and interact with CRUD Service.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Springboot-PrePost-Decorator-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-08-31T08:53:22.514Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "springboot-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "This is the best template to start creating a service in Springboot 2 with Java 11 integrated inside the Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/SpringBoot-Custom-Plugin-Template/refs/heads/2.x_jdk-11/README.md"
    },
    "itemId": "springboot-template",
    "name": "Springboot 2 Java 11 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/SpringBoot-Custom-Plugin-Template/tree/2.x_jdk-11",
    "resources": {
      "services": {
        "springboot-2-java-11-template": {
          "type": "template",
          "name": "springboot-2-java-11-template",
          "description": "This is the best template to start creating a service in Springboot 2 with Java 11 integrated inside the Platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/SpringBoot-Custom-Plugin-Template/archive/refs/heads/2.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.010Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "springboot-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "kotlin",
    "description": "This is the best template to start creating a service in Springboot 2 with Java 11 integrated inside the Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/SpringBoot-Custom-Plugin-Template/refs/heads/2.x_jdk-11/README.md"
    },
    "itemId": "springboot-template",
    "name": "Springboot 2 Java 11 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/SpringBoot-Custom-Plugin-Template/tree/2.x_jdk-11",
    "resources": {
      "services": {
        "springboot-2-java-11-template": {
          "type": "template",
          "name": "springboot-2-java-11-template",
          "description": "This is the best template to start creating a service in Springboot 2 with Java 11 integrated inside the Platform",
          "archiveUrl": "https://github.com/mia-platform-marketplace/SpringBoot-Custom-Plugin-Template/archive/refs/heads/2.x_jdk-11.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fspringboot.gitlab-ci-jdk-11.yml/raw"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "350m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 40,
              "periodSeconds": 15,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-09-23T14:51:29.917Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "springboot-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Provide SQL queries as REST API.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/sql-db-reader/configuration_and_usage"
    },
    "itemId": "sql-db-reader",
    "name": "SQL DB Reader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/db-sql-reader",
    "resources": {
      "services": {
        "sql-db-reader": {
          "type": "plugin",
          "name": "sql-db-reader",
          "description": "Provide SQL queries as REST API.",
          "dockerImage": "nexus.mia-platform.eu/core/db-sql-reader:3.0.1",
          "defaultLogParser": "mia-plain",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.911Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "sql-db-reader-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Provide SQL queries as REST API.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/sql-db-reader/configuration_and_usage"
    },
    "itemId": "sql-db-reader",
    "name": "SQL DB Reader",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/db-sql-reader",
    "resources": {
      "services": {
        "sql-db-reader": {
          "type": "plugin",
          "name": "sql-db-reader",
          "description": "Provide SQL queries as REST API.",
          "dockerImage": "nexus.mia-platform.eu/core/db-sql-reader:3.0.1",
          "defaultLogParser": "mia-plain",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "sql-db-reader-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Provide a REST API interface to execute SQL Stored Procedures",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/sql-invoker/configuration_and_usage"
    },
    "itemId": "sql-invoker",
    "name": "SQL Invoker",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/sql-invoker",
    "resources": {
      "services": {
        "sql-invoker": {
          "type": "plugin",
          "name": "sql-invoker",
          "description": "Provide a REST API interface to execute SQL Stored Procedures",
          "dockerImage": "nexus.mia-platform.eu/core/sqlinvoker:0.0.5",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "PROFILE_FILES_PATH",
              "value": "CHANGE_WITH_YOUR_PROFILE_FILES_PATH",
              "valueType": "plain"
            },
            {
              "name": "DB_USER",
              "value": "CHANGE_WITH_YOUR_DB_USER",
              "valueType": "plain"
            },
            {
              "name": "DB_PASSWORD",
              "value": "CHANGE_WITH_YOUR_SECRET_DB_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "DB_URI",
              "value": "CHANGE_WITH_YOUR_DB_URI",
              "valueType": "plain"
            },
            {
              "name": "DB_DRIVER",
              "value": "CHANGE_WITH_YOUR_DB_DRIVER",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.910Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "sql-invoker-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "database",
    "description": "Provide a REST API interface to execute SQL Stored Procedures",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/sql-invoker/configuration_and_usage"
    },
    "itemId": "sql-invoker",
    "name": "SQL Invoker",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/sql-invoker",
    "resources": {
      "services": {
        "sql-invoker": {
          "type": "plugin",
          "name": "sql-invoker",
          "description": "Provide a REST API interface to execute SQL Stored Procedures",
          "dockerImage": "nexus.mia-platform.eu/core/sqlinvoker:0.0.5",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "PROFILE_FILES_PATH",
              "value": "CHANGE_WITH_YOUR_PROFILE_FILES_PATH",
              "valueType": "plain"
            },
            {
              "name": "DB_USER",
              "value": "CHANGE_WITH_YOUR_DB_USER",
              "valueType": "plain"
            },
            {
              "name": "DB_PASSWORD",
              "value": "CHANGE_WITH_YOUR_SECRET_DB_PASSWORD",
              "valueType": "plain"
            },
            {
              "name": "DB_URI",
              "value": "CHANGE_WITH_YOUR_DB_URI",
              "valueType": "plain"
            },
            {
              "name": "DB_DRIVER",
              "value": "CHANGE_WITH_YOUR_DB_DRIVER",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "sql-invoker-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.9.4",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.9.4",
      "releaseNote": "### Changed\\n\\n- Removed simple-get package to fix socket hang up errors when downloading documentations.\\n\\n### Fixed\\n\\nUpdated Api Portal to version \`2.2.1\`\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-05-08T10:00:00.000Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.9.3",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.9.3",
      "releaseNote": "### Changed\\n\\n- Removed simple-get package to fix socket hang up errors when downloading documentations.\\n\\n### Fixed\\n\\nUpdated Api Portal to version \`2.2.1\`\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-05-08T10:00:00.000Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.9.2",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.9.2",
      "releaseNote": "### Changed\\n\\n- Properties \`example\` and \`examples\` are removed from \`parameters\` object inside \`paths.\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.909Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.9.1",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.9.1",
      "releaseNote": "### Added\\n\\n- Added \`apiPortalConfig\` configurable object in the \`swagger-config.json\`, to specify a custom prefix, logo, or favicon for the API Portal.\\n- Added GET \`/api-portal/config\` endpoint to retrieve the config for the API Portal, such as the prefix with which call the backend.\\n\\n### Updated\\n\\n- GET \`/ui-config\` endpoint returns the custom logo for the API Portal, when configured.\\n"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T17:06:06.528Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.8.3",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.8.3",
      "releaseNote": "### Fixed\\n\\n- Configuration \`transformPaths\` correctly handles situation where a path contains another (e.g., \`/generate\` and \`/generateFromFile\`)."
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.686Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.8.2",
          "componentId": "swagger-aggregator",
          "defaultResources": {
            "memoryLimits": {
              "min": "150Mi",
              "max": "300Mi"
            },
            "cpuLimits": {
              "min": "150m",
              "max": "300m"
            }
          },
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "3.8.2",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.669Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "devportal",
    "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/swagger-aggregator/overview"
    },
    "itemId": "swagger-aggregator",
    "name": "Swagger Aggregator",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/swagger-aggregator",
    "resources": {
      "services": {
        "swagger-aggregator": {
          "type": "plugin",
          "name": "swagger-aggregator",
          "description": "Use Mia-Platform core Swagger Aggregator to aggregate the individual swaggers of all the microservices indicated in the configuration file.",
          "dockerImage": "nexus.mia-platform.eu/core/swagger-aggregator:3.8.2",
          "componentId": "swagger-aggregator",
          "mapEnvVarToMountPath": {
            "swagger-aggregator-config": {
              "type": "file",
              "envName": "CONFIG_FILE_PATH"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CONFIG_FILE_PATH",
              "value": "/home/node/app/configs/config.json",
              "valueType": "plain"
            }
          ],
          "defaultConfigMaps": [
            {
              "name": "swagger-aggregator-config",
              "mountPath": "/home/node/app/configs",
              "files": [],
              "viewAsReadOnly": true
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-06-01T07:27:50.186Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "swagger-aggregator.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-backend/overview"
    },
    "itemId": "teleconsultation-service-backend",
    "name": "Teleconsultation Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-backend",
    "resources": {
      "services": {
        "teleconsultation-service-backend": {
          "type": "plugin",
          "name": "teleconsultation-service-backend",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-backend:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "x-forwarded-for,x-request-id,x-forwarded-host,cookie,client-type",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_CLIENT_TYPE",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_API_SECRET_KEY",
              "value": "{{CHANGE}}",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_SERVICE_CONFIG_PATH",
              "value": "/home/node/app/teleconsultation-service/config.json",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATIONS_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_MAP_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_BASE_URL",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_RECORDING_TYPE",
              "value": "none",
              "valueType": "plain"
            },
            {
              "name": "TRANSCRIPTION_MAX_FILE_SIZE",
              "value": "50MB",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "teleconsultation-service",
              "mountPath": "/home/node/app/teleconsultation-service",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"privileges\\": {\\n\\"basic\\": {\\n\\"groups\\": [\\n\\"customer\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n},\\n\\"plus\\": {\\n\\"groups\\": [\\n\\"doctor\\",\\n\\"admin\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n}\\n},\\n\\"theme\\": {\\n\\"light\\": {\\n\\"primaryColor\\": \\"#fff\\",\\n\\"accentColor\\": \\"#480ca8\\"\\n},\\n\\"dark\\": {\\n\\"primaryColor\\": \\"#003049\\",\\n\\"accentColor\\": \\"#d62828\\"\\n}\\n},\\n\\"environment\\": \\"sandbox\\",\\n\\"mode\\": \\"window\\",\\n\\"companyLogo\\": {\\n\\"url\\": \\"https://www.insert.url.it\\"\\n}\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.0",
      "releaseNote": "Added endpoint \`GET /transcription/:roomId/:sessionId\` to get Kaleyra session transcription"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.535Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-backend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-backend/overview"
    },
    "itemId": "teleconsultation-service-backend",
    "name": "Teleconsultation Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-backend",
    "resources": {
      "services": {
        "teleconsultation-service-backend": {
          "type": "plugin",
          "name": "teleconsultation-service-backend",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-backend:2.0.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "x-forwarded-for,x-request-id,x-forwarded-host,cookie,client-type",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_CLIENT_TYPE",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_API_SECRET_KEY",
              "value": "{{CHANGE}}",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_SERVICE_CONFIG_PATH",
              "value": "/home/node/app/teleconsultation-service/config.json",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATIONS_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_MAP_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_BASE_URL",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "teleconsultation-service",
              "mountPath": "/home/node/app/teleconsultation-service",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"privileges\\": {\\n\\"basic\\": {\\n\\"groups\\": [\\n\\"customer\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n},\\n\\"plus\\": {\\n\\"groups\\": [\\n\\"doctor\\",\\n\\"admin\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n}\\n},\\n\\"theme\\": {\\n\\"light\\": {\\n\\"primaryColor\\": \\"#fff\\",\\n\\"accentColor\\": \\"#480ca8\\"\\n},\\n\\"dark\\": {\\n\\"primaryColor\\": \\"#003049\\",\\n\\"accentColor\\": \\"#d62828\\"\\n}\\n},\\n\\"environment\\": \\"sandbox\\",\\n\\"mode\\": \\"window\\",\\n\\"companyLogo\\": {\\n\\"url\\": \\"https://www.insert.url.it\\"\\n}\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.1",
      "releaseNote": "Update Kaleyra API (from v1 to v2), remove endpoint POST /teleconsultation/:roomId/participants/data"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.535Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-backend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-backend/overview"
    },
    "itemId": "teleconsultation-service-backend",
    "name": "Teleconsultation Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-backend",
    "resources": {
      "services": {
        "teleconsultation-service-backend": {
          "type": "plugin",
          "name": "teleconsultation-service-backend",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-backend:1.7.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "x-forwarded-for,x-request-id,x-forwarded-host,cookie,client-type",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_CLIENT_TYPE",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_API_SECRET_KEY",
              "value": "{{CHANGE}}",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_SERVICE_CONFIG_PATH",
              "value": "/home/node/app/teleconsultation-service/config.json",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATIONS_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_MAP_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_BASE_URL",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "teleconsultation-service",
              "mountPath": "/home/node/app/teleconsultation-service",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"privileges\\": {\\n\\"basic\\": {\\n\\"groups\\": [\\n\\"customer\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n},\\n\\"plus\\": {\\n\\"groups\\": [\\n\\"doctor\\",\\n\\"admin\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n}\\n},\\n\\"theme\\": {\\n\\"light\\": {\\n\\"primaryColor\\": \\"#fff\\",\\n\\"accentColor\\": \\"#480ca8\\"\\n},\\n\\"dark\\": {\\n\\"primaryColor\\": \\"#003049\\",\\n\\"accentColor\\": \\"#d62828\\"\\n}\\n},\\n\\"environment\\": \\"sandbox\\",\\n\\"mode\\": \\"window\\",\\n\\"companyLogo\\": {\\n\\"url\\": \\"https://www.insert.url.it\\"\\n}\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.7.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.035Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-backend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-backend/overview"
    },
    "itemId": "teleconsultation-service-backend",
    "name": "Teleconsultation Service Backend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-backend",
    "resources": {
      "services": {
        "teleconsultation-service-backend": {
          "type": "plugin",
          "name": "teleconsultation-service-backend",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-backend:1.7.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "x-forwarded-for,x-request-id,x-forwarded-host,cookie,client-type",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_CLIENT_TYPE",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_API_SECRET_KEY",
              "value": "{{CHANGE}}",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATION_SERVICE_CONFIG_PATH",
              "value": "/home/node/app/teleconsultation-service/config.json",
              "valueType": "plain"
            },
            {
              "name": "TELECONSULTATIONS_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_MAP_CRUD_NAME",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            },
            {
              "name": "BANDYER_BASE_URL",
              "value": "{{CHANGE-INSERT_VALUE}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "teleconsultation-service",
              "mountPath": "/home/node/app/teleconsultation-service",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\n\\"privileges\\": {\\n\\"basic\\": {\\n\\"groups\\": [\\n\\"customer\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n},\\n\\"plus\\": {\\n\\"groups\\": [\\n\\"doctor\\",\\n\\"admin\\"\\n],\\n\\"tools\\": {\\n\\"chat\\": true,\\n\\"screen_sharing\\": true,\\n\\"file_upload\\": true,\\n\\"whiteboard\\": true,\\n\\"snapshot\\": true,\\n\\"live_edit\\": true,\\n\\"live_pointer\\": true,\\n\\"present_to_everyone\\": true\\n}\\n}\\n},\\n\\"theme\\": {\\n\\"light\\": {\\n\\"primaryColor\\": \\"#fff\\",\\n\\"accentColor\\": \\"#480ca8\\"\\n},\\n\\"dark\\": {\\n\\"primaryColor\\": \\"#003049\\",\\n\\"accentColor\\": \\"#d62828\\"\\n}\\n},\\n\\"environment\\": \\"sandbox\\",\\n\\"mode\\": \\"window\\",\\n\\"companyLogo\\": {\\n\\"url\\": \\"https://www.insert.url.it\\"\\n}\\n}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-12-02T14:43:51.687Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-backend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Start your videocall application leveraging Bandyer APIs",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-frontend/overview"
    },
    "itemId": "teleconsultation-service-frontend",
    "name": "Teleconsultation Service Frontend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-frontend",
    "resources": {
      "services": {
        "teleconsultation-service-frontend": {
          "type": "plugin",
          "name": "teleconsultation-service-frontend",
          "description": "Start your videocall application leveraging Bandyer APIs",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-frontend:2.0.2",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.0.2",
      "releaseNote": "Upgrade dependencies, fix localization and security issues"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.575Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-frontend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Start your videocall application leveraging Bandyer APIs",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-frontend/overview"
    },
    "itemId": "teleconsultation-service-frontend",
    "name": "Teleconsultation Service Frontend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-frontend",
    "resources": {
      "services": {
        "teleconsultation-service-frontend": {
          "type": "plugin",
          "name": "teleconsultation-service-frontend",
          "description": "Start your videocall application leveraging Bandyer APIs",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-frontend:1.5.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.033Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-frontend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "Start your videocall application leveraging Bandyer APIs",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/teleconsultation-service-frontend/overview"
    },
    "itemId": "teleconsultation-service-frontend",
    "name": "Teleconsultation Service Frontend",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/teleconsultation-service-frontend",
    "resources": {
      "services": {
        "teleconsultation-service-frontend": {
          "type": "plugin",
          "name": "teleconsultation-service-frontend",
          "description": "Start your videocall application leveraging Bandyer APIs",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/teleconsultation-service-frontend:1.5.1",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-12-02T14:41:04.333Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "teleconsultation-service-frontend.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "Generates Temporary-Passwords associated with arbitrary data payload to be later consumed.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/temporary-password-generator/overview"
    },
    "itemId": "temporary-password-generator",
    "name": "Temporary Password Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/temporary-password-generator",
    "resources": {
      "services": {
        "temporary-password-generator": {
          "type": "plugin",
          "name": "temporary-password-generator",
          "description": "Generates Temporary-Passwords associated with arbitrary data payload to be later consumed.",
          "dockerImage": "nexus.mia-platform.eu/core/temporary-password-generator:1.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "PEM_PRIVATE_KEY_PATH",
              "value": "/CHANGE_WITH_YOUR_PATH_TO/private.pem",
              "description": "Private key used to sign JWTs.",
              "valueType": "plain"
            },
            {
              "name": "OTP_HMAC_KEY",
              "value": "CHANGE_WITH_A_32_CHARACTERS_SECRET",
              "description": "This value should be a 32 letters passphrase, used to hash passwords.",
              "valueType": "plain"
            },
            {
              "name": "OTP_CRUD_NAME",
              "value": "CHANGE_WITH_CRUD_NAME",
              "description": "Name of the CRUD where password and metadata will be stored.",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.903Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "temporary-password-generator-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "Generates Temporary-Passwords associated with arbitrary data payload to be later consumed.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/temporary-password-generator/overview"
    },
    "itemId": "temporary-password-generator",
    "name": "Temporary Password Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/temporary-password-generator",
    "resources": {
      "services": {
        "temporary-password-generator": {
          "type": "plugin",
          "name": "temporary-password-generator",
          "description": "Generates Temporary-Passwords associated with arbitrary data payload to be later consumed.",
          "dockerImage": "nexus.mia-platform.eu/core/temporary-password-generator:1.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "PEM_PRIVATE_KEY_PATH",
              "value": "/CHANGE_WITH_YOUR_PATH_TO/private.pem",
              "description": "Private key used to sign JWTs.",
              "valueType": "plain"
            },
            {
              "name": "OTP_HMAC_KEY",
              "value": "CHANGE_WITH_A_32_CHARACTERS_SECRET",
              "description": "This value should be a 32 letters passphrase, used to hash passwords.",
              "valueType": "plain"
            },
            {
              "name": "OTP_CRUD_NAME",
              "value": "CHANGE_WITH_CRUD_NAME",
              "description": "Name of the CRUD where password and metadata will be stored.",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "temporary-password-generator-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Therapy and Monitoring Manager (TMM) is a service that enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/therapy-and-monitoring-manager/overview"
    },
    "itemId": "therapy-and-monitoring-manager",
    "name": "Therapy and Monitoring Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/therapy-monitoring-manager",
    "resources": {
      "services": {
        "therapy-and-monitoring-manager": {
          "type": "plugin",
          "name": "therapy-and-monitoring-manager",
          "description": "The Therapy and Monitoring Manager (TMM) is a service that enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/therapy-monitoring-manager:0.5.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "MONITORINGS_CRUD_NAME",
              "value": "monitorings",
              "valueType": "plain"
            },
            {
              "name": "THERAPIES_CRUD_NAME",
              "value": "therapies",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_CRUD_NAME",
              "value": "detections",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_GRACE_PERIOD",
              "value": "30",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_TIME_ZONE",
              "value": "UTC",
              "valueType": "plain"
            },
            {
              "name": "CRON_SCHEDULE",
              "value": "0 0 * * *",
              "valueType": "plain"
            },
            {
              "name": "PROTOTYPES_CONFIG_FILE_PATH",
              "value": "/home/config/prototypes-definition.json",
              "valueType": "plain"
            },
            {
              "name": "VALIDATION_SERVICE",
              "value": "integrated",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_STATUS",
              "value": "disabled",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_STATUS",
              "value": "disabled",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "prototypes",
              "mountPath": "/home/config/",
              "files": [
                {
                  "name": "prototypes-definition.json",
                  "content": "[]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.5.1",
      "releaseNote": "Update Node.js (v20), custom-plugin-lib (v7.0.0) and fastify-cron (v1.3.1), update prototype and threshold schemas, save threshold validation results"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.535Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "therapy-and-monitoring-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Therapy and Monitoring Manager (TMM) is a service that enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/therapy-and-monitoring-manager/overview"
    },
    "itemId": "therapy-and-monitoring-manager",
    "name": "Therapy and Monitoring Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/therapy-monitoring-manager",
    "resources": {
      "services": {
        "therapy-and-monitoring-manager": {
          "type": "plugin",
          "name": "therapy-and-monitoring-manager",
          "description": "The Therapy and Monitoring Manager (TMM) is a service that enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/therapy-monitoring-manager:0.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "MONITORINGS_CRUD_NAME",
              "value": "monitorings",
              "valueType": "plain"
            },
            {
              "name": "THERAPIES_CRUD_NAME",
              "value": "therapies",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_CRUD_NAME",
              "value": "observations",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_GRACE_PERIOD",
              "value": "30",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_TIME_ZONE",
              "value": "UTC",
              "valueType": "plain"
            },
            {
              "name": "CRON_SCHEDULE",
              "value": "0 0 * * *",
              "valueType": "plain"
            },
            {
              "name": "PROTOTYPES_CONFIG_FILE_PATH",
              "value": "/home/config/prototypes-definition.json",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_STATUS",
              "value": "change-me",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_TOLERANCE_FREQUENCY",
              "value": "2",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_TOLERANCE_TIME",
              "value": "1",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_MINIMUM_PERCENTAGE",
              "value": "20%",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_STATUS",
              "value": "disabled",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_MINIMUM_PERCENTAGE",
              "value": "20%",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "prototypes",
              "mountPath": "/home/config/",
              "files": [
                {
                  "name": "prototypes-definition.json",
                  "content": "[]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.3.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.035Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "therapy-and-monitoring-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The Therapy and Monitoring Manager (TMM) is a service that enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/therapy-and-monitoring-manager/overview"
    },
    "itemId": "therapy-and-monitoring-manager",
    "name": "Therapy and Monitoring Manager",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/therapy-monitoring-manager",
    "resources": {
      "services": {
        "therapy-and-monitoring-manager": {
          "type": "plugin",
          "name": "therapy-and-monitoring-manager",
          "description": "The Therapy and Monitoring Manager (TMM) is a service that enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/therapy-monitoring-manager:0.3.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "MONITORINGS_CRUD_NAME",
              "value": "monitorings",
              "valueType": "plain"
            },
            {
              "name": "THERAPIES_CRUD_NAME",
              "value": "therapies",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_CRUD_NAME",
              "value": "observations",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_GRACE_PERIOD",
              "value": "30",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_TIME_ZONE",
              "value": "UTC",
              "valueType": "plain"
            },
            {
              "name": "CRON_SCHEDULE",
              "value": "0 0 * * *",
              "valueType": "plain"
            },
            {
              "name": "PROTOTYPES_CONFIG_FILE_PATH",
              "value": "/home/config/prototypes-definition.json",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_STATUS",
              "value": "change-me",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_TOLERANCE_FREQUENCY",
              "value": "2",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_TOLERANCE_TIME",
              "value": "1",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_MINIMUM_PERCENTAGE",
              "value": "20%",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_STATUS",
              "value": "disabled",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_MINIMUM_PERCENTAGE",
              "value": "20%",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultConfigMaps": [
            {
              "name": "prototypes",
              "mountPath": "/home/config/",
              "files": [
                {
                  "name": "prototypes-definition.json",
                  "content": "[]"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-01-16T10:18:22.999Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "therapy-and-monitoring-manager_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "healthcare",
    "description": "This application allows to quickly setup the necessary services in order to manage patient care plans and collect data from medical and wearable devices",
    "itemId": "therapy-device-module",
    "name": "Therapy Device Module",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/applications/therapy-device-module",
    "resources": {
      "collections": {
        "tdm_dm_devices": {
          "defaultName": "tdm_dm_devices",
          "description": "Device Manager devices",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceProvider",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceType",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "features",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "status",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "assignedPatientId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "serialNumber",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "tdm_dm_devices",
          "internalEndpoints": [
            {
              "basePath": "/tdm-dm-devices",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "tdm_dm_health_data": {
          "defaultName": "tdm_dm_health_data",
          "description": "Device Manager health data",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "providerId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "rawData",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "rawDataType",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "receivedAt",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "rawDataFormat",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "normalizedData",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "normalizedDataType",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "recordedAt",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            }
          ],
          "id": "tdm_dm_health_data",
          "internalEndpoints": [
            {
              "basePath": "/tdm-dm-health-data",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "tdm_dm_health_data_type": {
          "defaultName": "tdm_dm_health_data_type",
          "description": "Device Manager health data types",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "version",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "name",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "providerId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "dataType",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "schema",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "normalizationRules",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "metrics",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "code",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "format",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "normalizedDataType",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "normalizedDataSchema",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "identifier",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "tdm_dm_health_data_type",
          "internalEndpoints": [
            {
              "basePath": "/tdm-dm-health-data-type",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "tdm_tmm_detections": {
          "defaultName": "tdm_tmm_detections",
          "description": "TMM detections",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "planType",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "planId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "value",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "observedAt",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "doctorId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isCompliant",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "tdm_tmm_detections",
          "internalEndpoints": [
            {
              "basePath": "/detections",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "tdm_tmm_monitorings": {
          "defaultName": "tdm_tmm_monitorings",
          "description": "TMM monitorings",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "planName",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "prototypeId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "notes",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "startDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "endDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "each",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "times",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "hours",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "doctorId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "assignedDevices",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceToleranceTime",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceToleranceFrequency",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceMinimumPercentage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "complianceMinimumPercentage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientAdherent",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientCompliant",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "tresholds",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientAdherentLastUpdatedAt",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientCompliantLastUpdatedAt",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "thresholds",
              "nullable": false,
              "required": false,
              "schema": {
                "properties": {
                  "propertyName": {
                    "description": "Name of the property the threshold is evaluated on",
                    "type": "string"
                  },
                  "thresholdOperator": {
                    "description": "Name of the operator",
                    "enum": [
                      "gt",
                      "lt",
                      "gte",
                      "lte",
                      "eq"
                    ],
                    "type": "string"
                  },
                  "thresholdValue": {
                    "description": "Threshold value",
                    "type": "number"
                  }
                },
                "required": [
                  "propertyName",
                  "thresholdOperator",
                  "thresholdValue"
                ]
              },
              "sensitivityValue": 0,
              "type": "Array_RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceStatus",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "complianceStatus",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "tdm_tmm_monitorings",
          "internalEndpoints": [
            {
              "basePath": "/monitorings",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "tdm_tmm_therapies": {
          "defaultName": "tdm_tmm_therapies",
          "description": "TMM therapies",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "planName",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "prototypeId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "notes",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "startDate",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "endDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "each",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "times",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "hours",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "doctorId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "patientId",
              "nullable": false,
              "required": true,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceToleranceTime",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceToleranceFrequency",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceMinimumPercentage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "complianceMinimumPercentage",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "number"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientAdherent",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientCompliant",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientAdherentLastUpdatedAt",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPatientCompliantLastUpdatedAt",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "directives",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "RawObject"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "adherenceStatus",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "complianceStatus",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "tdm_tmm_therapies",
          "internalEndpoints": [
            {
              "basePath": "/therapies",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/device-manager": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/device-manager",
          "defaultPathRewrite": "/",
          "description": "Device Manager endpoint",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "device-manager",
          "tags": [
            "Device Manager"
          ],
          "type": "custom"
        },
        "/mobile-bff": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/mobile-bff",
          "defaultPathRewrite": "/",
          "description": "Mobile BFF endpoint",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "mobile-bff",
          "tags": [
            "Mobile BFF"
          ],
          "type": "custom"
        },
        "/tdm-dm-devices": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "tdm_dm_devices",
          "defaultBasePath": "/tdm-dm-devices",
          "defaultPathRewrite": "/tdm-dm-devices",
          "description": "Endpoint /tdm-dm-devices",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/tdm-dm-health-data": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "tdm_dm_health_data",
          "defaultBasePath": "/tdm-dm-health-data",
          "defaultPathRewrite": "/tdm-dm-health-data",
          "description": "Endpoint /tdm-dm-health-data",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/tdm-dm-health-data-type": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "tdm_dm_health_data_type",
          "defaultBasePath": "/tdm-dm-health-data-type",
          "defaultPathRewrite": "/tdm-dm-health-data-type",
          "description": "Endpoint /tdm-dm-health-data-type",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": true,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/tmm": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/tmm",
          "defaultPathRewrite": "/",
          "description": "TMM endpoint",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "therapy-monitoring-manager",
          "tags": [
            "Therapy and Monitoring Manager"
          ],
          "type": "custom"
        }
      },
      "services": {
        "api-gateway": {
          "componentId": "api-gateway-envoy",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            },
            {
              "from": 9901,
              "name": "admin",
              "to": 9901
            }
          ],
          "defaultArgs": [
            "-c",
            "/etc/envoy/envoy.json",
            "-l",
            "{{LOG_LEVEL}}",
            "--log-format",
            "{\\"level\\":\\"%l\\",\\"time\\":\\"%Y-%m-%dT%T.%fZ\\",\\"scope\\":\\"%n\\",\\"message\\":\\"%j\\"}",
            "--drain-time-s",
            "50"
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/envoy",
              "name": "api-gateway-envoy-config",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend"
            },
            "readiness": {
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "200m",
              "min": "150m"
            },
            "memoryLimits": {
              "max": "250Mi",
              "min": "150Mi"
            }
          },
          "defaultTerminationGracePeriodSeconds": 60,
          "description": "Envoy API Gateway to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/cache/envoyproxy/envoy:v1.32.1",
          "execPreStop": [
            "bash",
            "-c",
            "echo -e 'POST /drain_listeners?graceful HTTP/1.1\\r\\nHost: localhost:9901\\r\\n\\r' > /dev/tcp/localhost/9901 && sleep 55s"
          ],
          "name": "api-gateway",
          "type": "plugin"
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "url",
              "secretName": "mongodb",
              "valueType": "secret"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "400m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:{{CRUD_SERVICE_VERSION}}",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "device-manager": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "TMM_SERVICE_URL",
              "value": "http://therapy-monitoring-manager",
              "valueType": "plain"
            },
            {
              "name": "CRUD_DEVICES_ENDPOINT",
              "value": "/tdm-dm-devices",
              "valueType": "plain"
            },
            {
              "name": "CRUD_HEALTH_DATA_ENDPOINT",
              "value": "/tdm-dm-health-data",
              "valueType": "plain"
            },
            {
              "name": "CRUD_HEALTH_DATA_TYPE_ENDPOINT",
              "value": "/tdm-dm-health-data-type",
              "valueType": "plain"
            },
            {
              "name": "TMM_MONITORINGS_ENDPOINT",
              "value": "/monitorings",
              "valueType": "plain"
            },
            {
              "name": "TMM_DETECTIONS_ENDPOINT",
              "value": "/detections",
              "valueType": "plain"
            },
            {
              "name": "TMM_PROTOTYPES_ENDPOINT",
              "value": "/prototypes",
              "valueType": "plain"
            },
            {
              "name": "MEDISANTE_PROVIDER",
              "value": "medisante",
              "valueType": "plain"
            },
            {
              "name": "HEALTHKIT_PROVIDER",
              "value": "healthkit",
              "valueType": "plain"
            },
            {
              "name": "STANDARD_JSON_MEDISANTE",
              "value": "medisante-standard-json",
              "valueType": "plain"
            },
            {
              "name": "STANDARD_JSON_HEALTHKIT",
              "value": "healthkit-standard-json",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "url",
              "secretName": "mongodb",
              "valueType": "secret"
            },
            {
              "name": "DATA_ACQUISITION_JOB_COLLECTION",
              "value": "tdm_dm_data_acquisition_jobs",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "150Mi"
            }
          },
          "description": "A plugin to collect, store and visualize patient health data from medical and wearable devices",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/device-manager:{{DEVICE_MANAGER_VERSION}}",
          "name": "device-manager",
          "type": "plugin"
        },
        "mobile-bff": {
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "UMS_SERVICE_URL",
              "value": "{{USER_MANAGER_SERVICE_URL}}",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "150Mi",
              "min": "150Mi"
            }
          },
          "description": "A plugin to collect health data from medical and wearable devices",
          "dockerImage": "nexus.mia-platform.eu/therapy-device-module/mobile-bff:{{MOBILE_BFF_VERIOSN}}",
          "name": "mobile-bff",
          "type": "plugin"
        },
        "therapy-monitoring-manager": {
          "componentId": "therapy-monitoring-manager",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "[\\n  {\\n    \\"identifier\\": \\"bodyTemperature\\",\\n    \\"type\\": \\"measurement\\",\\n    \\"name\\": {\\n      \\"en\\": \\"Body Temperature\\",\\n      \\"it\\": \\"Temperatura Corporea\\"\\n    },\\n    \\"schema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"bodyTemperature\\": {\\n          \\"type\\": \\"number\\",\\n          \\"minimum\\": 31,\\n          \\"maximum\\": 45\\n        }\\n      },\\n      \\"required\\": [\\n        \\"bodyTemperature\\"\\n      ]\\n    },\\n    \\"labels\\": {\\n      \\"bodyTemperature\\": {\\n        \\"en\\": \\"Body temperature [°C]\\",\\n        \\"it\\": \\"Temperatura corporea [°C]\\"\\n      }\\n    }\\n  },\\n  {\\n    \\"identifier\\": \\"cardiologyTherapy\\",\\n    \\"type\\": \\"therapy\\",\\n    \\"name\\": {\\n      \\"it\\": \\"Terapia Cardiologica\\",\\n      \\"en\\": \\"Cardiology Therapy\\"\\n    },\\n    \\"schema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"drug\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"dosage\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"notes\\": {\\n          \\"type\\": \\"string\\"\\n        }\\n      }\\n    },\\n    \\"labels\\": {\\n      \\"drug\\": {\\n        \\"en\\": \\"Drug\\",\\n        \\"it\\": \\"Farmaco\\"\\n      },\\n      \\"dosage\\": {\\n        \\"en\\": \\"Dosage\\",\\n        \\"it\\": \\"Dosaggio\\"\\n      },\\n      \\"notes\\": {\\n        \\"en\\": \\"Notes\\",\\n        \\"it\\": \\"Note\\"\\n      }\\n    }\\n  },\\n  {\\n    \\"identifier\\": \\"physicalExercise\\",\\n    \\"type\\": \\"therapy\\",\\n    \\"name\\": {\\n      \\"en\\": \\"Physical Exercise\\",\\n      \\"it\\": \\"Esercizio Fisico\\"\\n    },\\n    \\"schema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"sessionName\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"advices\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"tool\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"exerciseType\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"steps\\": {\\n          \\"type\\": \\"array\\",\\n          \\"items\\": {\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n              \\"duration\\": {\\n                \\"type\\": \\"integer\\"\\n              },\\n              \\"power\\": {\\n                \\"type\\": \\"integer\\"\\n              }\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\"labels\\": {\\n      \\"sessionName\\": {\\n        \\"en\\": \\"Session name\\",\\n        \\"it\\": \\"Nome della sessione\\"\\n      },\\n      \\"advices\\": {\\n        \\"en\\": \\"Terapeutic advices\\",\\n        \\"it\\": \\"Consigli terapeutici\\"\\n      },\\n      \\"tool\\": {\\n        \\"en\\": \\"Tool\\",\\n        \\"it\\": \\"Attrezzo\\"\\n      },\\n      \\"exerciseType\\": {\\n        \\"en\\": \\"Exercise type\\",\\n        \\"it\\": \\"Tipo di allenamento\\"\\n      },\\n      \\"steps\\": {\\n        \\"en\\": \\"Steps\\",\\n        \\"it\\": \\"Step\\"\\n      },\\n      \\"duration\\": {\\n        \\"en\\": \\"Duration\\",\\n        \\"it\\": \\"Durata\\"\\n      },\\n      \\"power\\": {\\n        \\"en\\": \\"Power\\",\\n        \\"it\\": \\"Potenza\\"\\n      }\\n    }\\n  },\\n  {\\n    \\"identifier\\": \\"nutritionalTherapy\\",\\n    \\"type\\": \\"therapy\\",\\n    \\"name\\": {\\n      \\"en\\": \\"Nutritional Therapy\\",\\n      \\"it\\": \\"Terapia Nutrizionale\\"\\n    },\\n    \\"schema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"nutritionalAdvices\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"personalAdvices\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"diet\\": {\\n          \\"type\\": \\"string\\"\\n        }\\n      }\\n    },\\n    \\"labels\\": {\\n      \\"nutritionalAdvices\\": {\\n        \\"en\\": \\"Advices for a healthy and correct diet\\",\\n        \\"it\\": \\"Consigli di una sana e corretta alimentazione\\"\\n      },\\n      \\"personalAdvices\\": {\\n        \\"en\\": \\"Personal recommendations\\",\\n        \\"it\\": \\"Consigli personalizzati\\"\\n      },\\n      \\"diet\\": {\\n        \\"en\\": \\"Diet\\",\\n        \\"it\\": \\"Dieta\\"\\n      }\\n    },\\n    \\"hints\\": {\\n      \\"diet\\": [\\n        {\\n          \\"en\\": \\"Low calorie 1200 KCAL (BEE ≤ 1300KCAL)\\",\\n          \\"it\\": \\"Ipocalorica 1200 KCAL (BEE ≤ 1300KCAL)\\"\\n        },\\n        {\\n          \\"en\\": \\"Low calorie 1400 KCAL (BEE [1400-1600] KCAL)\\",\\n          \\"it\\": \\"Ipocalorica 1400 KCAL (BEE [1400-1600] KCAL)\\"\\n        },\\n        {\\n          \\"en\\": \\"Low calorie 1600 KCAL (BEE [1600-1800] KCAL)\\",\\n          \\"it\\": \\"Ipocalorica 1600 KCAL (BEE [1600-1800] KCAL)\\"\\n        },\\n        {\\n          \\"en\\": \\"Low calorie 1800 KCAL (BEE [1800-2000] KCAL)\\",\\n          \\"it\\": \\"Ipocalorica 1800 KCAL (BEE [1800-2000] KCAL)\\"\\n        }\\n      ]\\n    }\\n  },\\n  {\\n    \\"identifier\\": \\"psychologicalTherapy\\",\\n    \\"type\\": \\"therapy\\",\\n    \\"name\\": {\\n      \\"en\\": \\"Psychological Therapy\\",\\n      \\"it\\": \\"Terapia Psicologica\\"\\n    },\\n    \\"schema\\": {\\n      \\"type\\": \\"object\\",\\n      \\"properties\\": {\\n        \\"advices\\": {\\n          \\"type\\": \\"string\\"\\n        },\\n        \\"hiddenNotes\\": {\\n          \\"type\\": \\"string\\"\\n        }\\n      },\\n      \\"required\\": [\\n        \\"advices\\"\\n      ]\\n    },\\n    \\"labels\\": {\\n      \\"advices\\": {\\n        \\"en\\": \\"Terapeutic advices\\",\\n        \\"it\\": \\"Consigli terapeutici\\"\\n      },\\n      \\"hiddenNotes\\": {\\n        \\"en\\": \\"Notes (not visible to the patient)\\",\\n        \\"it\\": \\"Note (non visibili al paziente)\\"\\n      }\\n    }\\n  }\\n]",
                  "name": "prototypes.json"
                }
              ],
              "mountPath": "/home/config/",
              "name": "tdm-tmm-prototypes"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "trace",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_URL",
              "value": "http://crud-service",
              "valueType": "plain"
            },
            {
              "name": "MONITORINGS_CRUD_NAME",
              "value": "monitorings",
              "valueType": "plain"
            },
            {
              "name": "THERAPIES_CRUD_NAME",
              "value": "therapies",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_CRUD_NAME",
              "value": "detections",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_GRACE_PERIOD",
              "value": "30",
              "valueType": "plain"
            },
            {
              "name": "DETECTIONS_TIME_ZONE",
              "value": "UTC",
              "valueType": "plain"
            },
            {
              "name": "CRON_SCHEDULE",
              "value": "0 0 * * *",
              "valueType": "plain"
            },
            {
              "name": "VALIDATION_SERVICE",
              "value": "integrated",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_STATUS",
              "value": "disabled",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_STATUS",
              "value": "disabled",
              "valueType": "plain"
            },
            {
              "name": "PROTOTYPES_SERVICE_URL",
              "value": "http://device-manager/prototypes/",
              "valueType": "plain"
            },
            {
              "name": "PROTOTYPES_CONFIG_FILE_PATH",
              "value": "/home/config/prototypes.json",
              "valueType": "plain"
            },
            {
              "name": "NOTIFICATION_MANAGER_URL",
              "value": "{{NOTIFICATION_MANAGER_URL}}",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_TOLERANCE_FREQUENCY",
              "value": "1",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_TOLERANCE_TIME",
              "value": "1",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_ADHERENCE_MINIMUM_PERCENTAGE",
              "value": "80",
              "valueType": "plain"
            },
            {
              "name": "DEFAULT_COMPLIANCE_MINIMUM_PERCENTAGE",
              "value": "80",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/ready",
              "periodSeconds": 10,
              "port": "http",
              "successThreshold": 1,
              "timeoutSeconds": 2
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "100Mi"
            }
          },
          "description": "The Therapy and Monitoring Manager (TMM) enables health care professionals to manage patients therapies and monitor patients health conditions, adherence and compliance to therapy.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/therapy-monitoring-manager:{{THERAPY_MONITORING_MANAGER_VERSION}}",
          "name": "therapy-monitoring-manager",
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "CRUD_SERVICE_VERSION": {
          "noProductionEnv": "7.2.1",
          "productionEnv": "7.2.1"
        },
        "DEVICE_MANAGER_VERSION": {
          "noProductionEnv": "1.0.0",
          "productionEnv": "1.0.0"
        },
        "MOBILE_BFF_VERIOSN": {
          "noProductionEnv": "0.1.0-rc.4",
          "productionEnv": "0.1.0-rc.4"
        },
        "NOTIFICATION_MANAGER_URL": {
          "noProductionEnv": "http://notification-manager.notification-module-development.svc.cluster.local",
          "productionEnv": "http://notification-manager.notification-module-preproduction.svc.cluster.local"
        },
        "THERAPY_MONITORING_MANAGER_VERSION": {
          "noProductionEnv": "0.5.1",
          "productionEnv": "0.5.1"
        },
        "USER_MANAGER_MODULE_NAMESPACE": {
          "noProductionEnv": "user-manager-module-development",
          "productionEnv": "user-manager-module-preproduction"
        },
        "USER_MANAGER_SERVICE_URL": {
          "noProductionEnv": "http://user-manager-service.user-auth-module-development.svc.cluster.local",
          "productionEnv": "http://user-manager-service.user-auth-module-preproduction.svc.cluster.local"
        }
      },
      "listeners": {
        "frontend": {
          "name": "frontend",
          "port": "8080",
          "selectedByDefault": true,
          "description": "Default listener for frontend API",
          "ownedBy": {
            "componentIds": [
              "api-gateway-envoy"
            ]
          }
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.671Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "therapy-device-module_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "business",
    "description": "Visualize events on a timeline",
    "itemId": "timeline-viewer",
    "name": "Timeline Viewer",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/backoffice/timeline",
    "resources": {
      "services": {
        "timeline-viewer": {
          "type": "plugin",
          "name": "timeline-viewer",
          "description": "Visualize events on a timeline",
          "dockerImage": "nexus.mia-platform.eu/backoffice/timeline:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.036Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "timeline-viewer.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "business",
    "description": "Visualize events on a timeline",
    "itemId": "timeline-viewer",
    "name": "Timeline Viewer",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/backoffice/timeline",
    "resources": {
      "services": {
        "timeline-viewer": {
          "type": "plugin",
          "name": "timeline-viewer",
          "description": "Visualize events on a timeline",
          "dockerImage": "nexus.mia-platform.eu/backoffice/timeline:2.1.0",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "timeline-viewer.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Timer Service allows scheduling of timers that perform custom actions upon expiry.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/timer-service/overview"
    },
    "itemId": "timer-service",
    "name": "Timer Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/timer-service",
    "resources": {
      "services": {
        "timer-service": {
          "type": "plugin",
          "name": "timer-service",
          "description": "The Timer Service allows scheduling of timers that perform custom actions upon expiry.",
          "dockerImage": "nexus.mia-platform.eu/core/timer-service:2.1.3",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PATH",
              "value": "CHANGE_WITH_YOUR_CRUD_PATH",
              "valueType": "plain"
            },
            {
              "name": "POLL_INTERVAL_MS",
              "value": "30000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "CHANGE_WITH_YOUR_KAFKA_BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_LOG_LEVEL",
              "value": "CHANGE_WITH_YOUR_KAFKA_LOG_LEVEL",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_MECHANISM",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE_WITH_YOUR_SECRET_KAFKA_SASL_PSW",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "2.1.3",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.034Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "timer-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "orchestrators",
    "description": "The Timer Service allows scheduling of timers that perform custom actions upon expiry.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/timer-service/overview"
    },
    "itemId": "timer-service",
    "name": "Timer Service",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/core/timer-service",
    "resources": {
      "services": {
        "timer-service": {
          "type": "plugin",
          "name": "timer-service",
          "description": "The Timer Service allows scheduling of timers that perform custom actions upon expiry.",
          "dockerImage": "nexus.mia-platform.eu/core/timer-service:2.1.3",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "CRUD_SERVICE_NAME",
              "value": "crud-service",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PATH",
              "value": "CHANGE_WITH_YOUR_CRUD_PATH",
              "valueType": "plain"
            },
            {
              "name": "POLL_INTERVAL_MS",
              "value": "30000",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_BROKERS",
              "value": "CHANGE_WITH_YOUR_KAFKA_BROKERS",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_LOG_LEVEL",
              "value": "CHANGE_WITH_YOUR_KAFKA_LOG_LEVEL",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_MECHANISM",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_MECHANISM",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_USERNAME",
              "value": "CHANGE_WITH_YOUR_KAFKA_SASL_USERNAME",
              "valueType": "plain"
            },
            {
              "name": "KAFKA_SASL_PASSWORD",
              "value": "CHANGE_WITH_YOUR_SECRET_KAFKA_SASL_PSW",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-05-28T13:19:05.392Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "timer-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "Use this service for custom token generation and validation",
    "itemId": "token-service",
    "name": "Token Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/token-service",
    "resources": {
      "services": {
        "token-service": {
          "type": "plugin",
          "name": "token-service",
          "description": "Use this service for custom token generation and validation",
          "dockerImage": "nexus.mia-platform.eu/plugins/token-service:2.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ENABLE_PAYLOAD_HEADER_CHECK",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.891Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "token-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "addonsecurity",
    "description": "Use this service for custom token generation and validation",
    "itemId": "token-service",
    "name": "Token Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/platform/plugins/token-service",
    "resources": {
      "services": {
        "token-service": {
          "type": "plugin",
          "name": "token-service",
          "description": "Use this service for custom token generation and validation",
          "dockerImage": "nexus.mia-platform.eu/plugins/token-service:2.0.0",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ENABLE_PAYLOAD_HEADER_CHECK",
              "value": "true",
              "valueType": "plain"
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2020-08-05T08:24:02.500Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "token-service-plugin-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "A simple Hello World example based on Mia-Platform TypeScript Template.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Typescript-LC39-Hello-World-Example/master/README.md"
    },
    "itemId": "typescript-hello-world-example",
    "name": "TypeScript Hello World Example",
    "resources": {
      "services": {
        "typescript-hello-world-example": {
          "type": "example",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Typescript-LC39-Hello-World-Example/archive/master.tar.gz",
          "name": "typescript-hello-world-example",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.068Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "typescript-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "A simple Hello World example based on Mia-Platform TypeScript Template.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Typescript-LC39-Hello-World-Example/master/README.md"
    },
    "itemId": "typescript-hello-world-example",
    "name": "TypeScript Hello World Example",
    "resources": {
      "services": {
        "typescript-hello-world-example": {
          "type": "example",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Typescript-LC39-Hello-World-Example/archive/master.tar.gz",
          "name": "typescript-hello-world-example",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-11-08T17:43:44.934Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "typescript-hello-world-example-transparent.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with React using TypeScript",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Typescript-React-App-Template/master/README.md"
    },
    "itemId": "typescript-react-template",
    "name": "TypeScript React Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Typescript-React-App-Template",
    "resources": {
      "services": {
        "typescript-react-template": {
          "type": "template",
          "name": "typescript-react-template",
          "description": "This template allows you to start setting up a front-end project with React using TypeScript",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Typescript-React-App-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:51.858Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "typescript-react-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with React using TypeScript",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Typescript-React-App-Template/master/README.md"
    },
    "itemId": "typescript-react-template",
    "name": "TypeScript React Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Typescript-React-App-Template",
    "resources": {
      "services": {
        "typescript-react-template": {
          "type": "template",
          "name": "typescript-react-template",
          "description": "This template allows you to start setting up a front-end project with React using TypeScript",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Typescript-React-App-Template/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-03-30T10:38:16.178Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "typescript-react-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "This is the best template to start creating a service in Node.js 16 with TypeScript integrated with Mia-Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Typescript-LC39-Template/refs/heads/16.x/README.md"
    },
    "itemId": "typescript-template",
    "name": "Node.js 16 TypeScript Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Typescript-LC39-Template/tree/16.x",
    "resources": {
      "services": {
        "typescript-template": {
          "type": "template",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Typescript-LC39-Template/archive/refs/heads/16.x.tar.gz",
          "name": "typescript-template",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.009Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "typescript-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "nodejs",
    "description": "This is the best template to start creating a service in Node.js 16 with TypeScript integrated with Mia-Platform",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Typescript-LC39-Template/refs/heads/16.x/README.md"
    },
    "itemId": "typescript-template",
    "name": "Node.js 16 TypeScript Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Typescript-LC39-Template/tree/16.x",
    "resources": {
      "services": {
        "typescript-template": {
          "type": "template",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Typescript-LC39-Template/archive/refs/heads/16.x.tar.gz",
          "name": "typescript-template",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-11-08T17:43:44.956Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "typescript-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "This plugin keeps a user's permissions on different tools synchronized according to some configurable rules.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/user-access-sync/overview"
    },
    "itemId": "user-access-sync",
    "name": "User Access Sync",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/fintech/middleware-permissions",
    "resources": {
      "services": {
        "user-access-sync": {
          "type": "plugin",
          "name": "user-access-sync",
          "description": "This plugin keeps a user's permissions on different tools synchronized according to some configurable rules.",
          "dockerImage": "nexus.mia-platform.eu/plugins/user-access-sync:0.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "MIA_CONSOLE_NAME",
              "value": "change-me",
              "valueType": "plain"
            },
            {
              "name": "CRUD_RULES_URL",
              "value": "change-me",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PROVIDER_CONFIGURATION_URL",
              "value": "change-me",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "150m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "10Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "0.1.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.035Z",
    "lifecycleStatus": "draft",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "user-access-sync.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "This plugin keeps a user's permissions on different tools synchronized according to some configurable rules.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/user-access-sync/overview"
    },
    "itemId": "user-access-sync",
    "name": "User Access Sync",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/fintech/middleware-permissions",
    "resources": {
      "services": {
        "user-access-sync": {
          "type": "plugin",
          "name": "user-access-sync",
          "description": "This plugin keeps a user's permissions on different tools synchronized according to some configurable rules.",
          "dockerImage": "nexus.mia-platform.eu/plugins/user-access-sync:0.1.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "info",
              "valueType": "plain"
            },
            {
              "name": "MIA_CONSOLE_NAME",
              "value": "change-me",
              "valueType": "plain"
            },
            {
              "name": "CRUD_RULES_URL",
              "value": "change-me",
              "valueType": "plain"
            },
            {
              "name": "CRUD_PROVIDER_CONFIGURATION_URL",
              "value": "change-me",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "150m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "10Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 15,
              "periodSeconds": 10,
              "timeoutSeconds": 2,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-nginx",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-05-30T16:08:43.680Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "user-access-sync.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "healthcare",
    "description": "This module provides a ready-to-use system for the user management and authentication services.",
    "itemId": "user-manager-module",
    "name": "User Manager Module",
    "publishOnMiaDocumentation": true,
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/applications/user-manager-module",
    "resources": {
      "collections": {
        "uam_user_manager_configs": {
          "defaultName": "uam_user_manager_configs",
          "description": "User Manager Service configurations for users",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "unique group type for users: eg. admin, secretary, etc. etc.",
              "name": "userGroup",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "the registry CRUD endpoint associated to the user group, with additional user data",
              "name": "crudEndpoint",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "the JSON schema of the CRUD that stores the user data for the specific gruop type",
              "name": "crudSchema",
              "nullable": false,
              "required": true,
              "type": "RawObject"
            },
            {
              "description": "label displayed in the backoffice lookup",
              "name": "label",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "authUserCreationDisabled",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            }
          ],
          "id": "uam_user_manager_configs",
          "internalEndpoints": [
            {
              "basePath": "/uam-user-manager-configs",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        },
        "uam_users": {
          "defaultName": "uam_users",
          "description": "User Manager Service users",
          "fields": [
            {
              "description": "_id",
              "name": "_id",
              "nullable": false,
              "required": true,
              "type": "ObjectId"
            },
            {
              "description": "creatorId",
              "name": "creatorId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "createdAt",
              "name": "createdAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "updaterId",
              "name": "updaterId",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "updatedAt",
              "name": "updatedAt",
              "nullable": false,
              "required": true,
              "type": "Date"
            },
            {
              "description": "__STATE__",
              "name": "__STATE__",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "group associated to the user: customer, doctor, backoffice_operator, etc etc",
              "name": "userGroup",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "firstName",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "lastName",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "title",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "birthDate",
              "nullable": false,
              "required": false,
              "type": "Date"
            },
            {
              "name": "birthCity",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "birthProvince",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "birthNation",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "fiscalCode",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "email",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "name": "mobilePhone",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "residenceAddress",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "residenceProvince",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "residenceZipCode",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "name": "residenceNation",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "id of the company stored in the companies CRUD",
              "name": "companyId",
              "nullable": false,
              "required": false,
              "type": "ObjectId"
            },
            {
              "description": "authUserId of the doctor assigned to a customer: stored in the users CRUD",
              "name": "doctorId",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "id of the membership of a customer eg. Distance Care, Concierge, Distance Care: stored in the membership_models CRUD",
              "name": "membershipModelId",
              "nullable": false,
              "required": false,
              "type": "ObjectId"
            },
            {
              "description": "",
              "name": "residenceCity",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "auth service user id associated to a specific user",
              "name": "authUserId",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "id of the insurance stored in the insurances CRUD",
              "name": "insuranceId",
              "nullable": false,
              "required": false,
              "type": "ObjectId"
            },
            {
              "description": "medical notes about the customer",
              "name": "notes",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "additional notes about the customer regarding risk factors",
              "name": "riskFactors",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "Array of medical specialties ids stored in the medical_specialties CRUD",
              "name": "medicalSpecialties",
              "nullable": false,
              "required": false,
              "type": "Array_string"
            },
            {
              "description": "",
              "name": "username",
              "nullable": false,
              "required": true,
              "type": "string"
            },
            {
              "description": "authUserId of the secretary associated with a customer",
              "name": "secretaryId",
              "nullable": false,
              "required": false,
              "type": "string"
            },
            {
              "description": "Array of medical expertises ids stored in the medical_expertises CRUD",
              "name": "medicalExpertises",
              "nullable": false,
              "required": false,
              "type": "Array_string"
            },
            {
              "description": "corresponds to the 'blocked' property in auth0, replaces the old 'isBlocked'",
              "name": "blocked",
              "nullable": false,
              "required": false,
              "type": "boolean"
            },
            {
              "description": "the id of a gender stored in the genders CRUD",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "genderId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "true if the user accept the privacy agreement",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "isPrivacyAccepted",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "boolean"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "familyMembersIds",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "roles",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "expirationDate",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Date"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "expirationId",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "ObjectId"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "groups",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "clusters",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "deviceToken",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "description": "List of doctors Ids",
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "doctorsIds",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "Array_string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "label",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            },
            {
              "encryptionEnabled": false,
              "encryptionSearchable": false,
              "name": "recipient",
              "nullable": false,
              "required": false,
              "sensitivityValue": 0,
              "type": "string"
            }
          ],
          "id": "uam_users",
          "internalEndpoints": [
            {
              "basePath": "/uam-users",
              "defaultState": "PUBLIC"
            }
          ],
          "type": "collection"
        }
      },
      "endpoints": {
        "/authorize": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/authorize",
          "defaultPathRewrite": "/authorize",
          "description": "Endpoint /authorize",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "auth0-client",
          "tags": [
            "auth0-client"
          ],
          "type": "custom"
        },
        "/logout": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/logout",
          "defaultPathRewrite": "/logout",
          "description": "Endpoint /logout",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "auth0-client",
          "tags": [
            "auth0-client"
          ],
          "type": "custom"
        },
        "/oauth/token": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/oauth/token",
          "defaultPathRewrite": "/oauth/token",
          "description": "Endpoint /oauth/token",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "auth0-client",
          "tags": [
            "auth0-client"
          ],
          "type": "custom"
        },
        "/uam-user-manager-configs": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "uam_user_manager_configs",
          "defaultBasePath": "/uam-user-manager-configs",
          "defaultPathRewrite": "/uam-user-manager-configs",
          "description": "Endpoint /uam-user-manager-configs",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": false,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/uam-users": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "collectionId": "uam_users",
          "defaultBasePath": "/uam-users",
          "defaultPathRewrite": "/uam-users",
          "description": "Endpoint /uam-users",
          "forceMicroserviceGatewayProxy": false,
          "pathName": "/",
          "public": false,
          "secreted": false,
          "showInDocumentation": true,
          "tags": [
            "crud"
          ],
          "type": "crud"
        },
        "/ums": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/ums",
          "defaultPathRewrite": "/",
          "description": "Endpoint /ums",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "user-manager-service",
          "tags": [
            "user-manager-service"
          ],
          "type": "custom"
        },
        "/web-login": {
          "allowUnknownRequestContentType": false,
          "allowUnknownResponseContentType": false,
          "defaultBasePath": "/web-login",
          "defaultPathRewrite": "/web-login",
          "description": "Endpoint /web-login",
          "forceMicroserviceGatewayProxy": false,
          "public": true,
          "secreted": false,
          "service": "oauth-login-site",
          "tags": [
            "oauth-login-site"
          ],
          "type": "custom"
        }
      },
      "services": {
        "api-gateway": {
          "additionalContainers": [
            {
              "args": [
                "--listen",
                "127.0.0.1:53",
                "--default-resolver",
                "--enable-search",
                "--hostsfile=/etc/hosts"
              ],
              "defaultEnvironmentVariables": [
                {
                  "name": "LOG_LEVEL",
                  "value": "{{LOG_LEVEL}}",
                  "valueType": "plain"
                },
                {
                  "name": "TRUSTED_PROXIES",
                  "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
                  "valueType": "plain"
                },
                {
                  "name": "HTTP_PORT",
                  "value": "3000",
                  "valueType": "plain"
                },
                {
                  "name": "USERID_HEADER_KEY",
                  "value": "miauserid",
                  "valueType": "plain"
                },
                {
                  "name": "GROUPS_HEADER_KEY",
                  "value": "miausergroups",
                  "valueType": "plain"
                },
                {
                  "name": "CLIENTTYPE_HEADER_KEY",
                  "value": "client-type",
                  "valueType": "plain"
                },
                {
                  "name": "BACKOFFICE_HEADER_KEY",
                  "value": "isbackoffice",
                  "valueType": "plain"
                },
                {
                  "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
                  "value": "microservice-gateway",
                  "valueType": "plain"
                },
                {
                  "name": "USER_PROPERTIES_HEADER_KEY",
                  "value": "miauserproperties",
                  "valueType": "plain"
                }
              ],
              "defaultProbes": {
                "liveness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 15,
                  "periodSeconds": 20
                },
                "readiness": {
                  "cmd": [
                    "/bin/sh",
                    "-c",
                    "netstat -lutan | grep LISTEN | grep 53"
                  ],
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10
                }
              },
              "defaultResources": {
                "cpuLimits": {
                  "min": "10m"
                },
                "memoryLimits": {
                  "max": "20Mi",
                  "min": "5Mi"
                }
              },
              "dockerImage": "nexus.mia-platform.eu/core/dnsmasq:1.0.3",
              "name": "dnsmasq"
            }
          ],
          "componentId": "api-gateway",
          "containerPorts": [
            {
              "from": 8080,
              "name": "frontend",
              "to": 8080
            },
            {
              "from": 8081,
              "name": "backoffice",
              "to": 8081
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "mountPath": "/etc/nginx/conf.d",
              "name": "api-gateway-server",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/platform.d",
              "name": "api-gateway-platform",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "link": {
                "targetSection": "endpoints"
              },
              "mountPath": "/etc/nginx/customization.d",
              "name": "api-gateway-customization",
              "viewAsReadOnly": true
            },
            {
              "files": [],
              "mountPath": "/etc/nginx/backoffice.d",
              "name": "api-gateway-backoffice",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-nginx",
          "defaultProbes": {
            "liveness": {
              "initialDelaySeconds": 15,
              "path": "/healthz",
              "periodSeconds": 20,
              "port": "frontend"
            },
            "readiness": {
              "initialDelaySeconds": 5,
              "path": "/healthz",
              "periodSeconds": 10,
              "port": "frontend"
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "10m"
            },
            "memoryLimits": {
              "max": "25Mi",
              "min": "5Mi"
            }
          },
          "description": "Use this service to route requests to the correct service and verify the need of authentication",
          "dockerImage": "nexus.mia-platform.eu/core/api-gateway:5.0.2",
          "execPreStop": [
            "sh",
            "-c",
            "sleep 5 && /usr/sbin/nginx -s quit"
          ],
          "name": "api-gateway",
          "type": "plugin"
        },
        "auth0-client": {
          "componentId": "auth0-client",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [
                {
                  "content": "{\\"clients\\":{\\"cms\\":{\\"auth0Url\\":\\"{{AUTH0_TENANT_URL}}\\",\\"clientId\\":\\"{{AUTH0_CMS_CLIENT_ID}}\\",\\"clientSecret\\":\\"{{AUTH0_CMS_CLIENT_SECRET}}\\",\\"redirectUrl\\":\\"{{BACKOFFICE_BASE_URL}}/web-login/callback\\",\\"scopes\\":[\\"offline_access\\",\\"profile\\",\\"email\\",\\"website\\"],\\"audience\\":\\"\\",\\"supportedConnections\\":[\\"{{AUTH0_CONNECTION}}\\"],\\"defaultConnection\\":\\"{{AUTH0_CONNECTION}}\\"},\\"backoffice\\":{\\"auth0Url\\":\\"{{AUTH0_TENANT_URL}}\\",\\"clientId\\":\\"{{AUTH0_BACKOFFICE_CLIENT_ID}}\\",\\"clientSecret\\":\\"{{AUTH0_BACKOFFICE_CLIENT_SECRET}}\\",\\"redirectUrl\\":\\"{{BACKOFFICE_BASE_URL}}/web-login/callback\\",\\"scopes\\":[\\"offline_access\\",\\"profile\\",\\"email\\",\\"website\\"],\\"supportedConnections\\":[\\"{{AUTH0_CONNECTION}}\\"],\\"defaultConnection\\":\\"{{AUTH0_CONNECTION}}\\"}},\\"defaultClient\\":\\"backoffice\\",\\"managementClient\\":{\\"auth0Url\\":\\"{{AUTH0_TENANT_URL}}\\",\\"clientId\\":\\"{{AUTH0_MANAGEMENT_CLIENT_ID}}\\",\\"clientSecret\\":\\"{{AUTH0_MANAGEMENT_CLIENT_SECRET}}\\",\\"supportedConnectionsMap\\":{\\"{{AUTH0_CONNECTION}}\\":{\\"connectionId\\":\\"{{AUTH0_CONNECTION_ID}}\\"}},\\"defaultManagementConnectionName\\":\\"{{AUTH0_CONNECTION}}\\"},\\"customClaimsNamespaces\\":[\\"https://mia-platform.eu/app_metadata\\",\\"https://mia-platform.eu/user_metadata\\"]}",
                  "name": "config.json"
                }
              ],
              "link": {},
              "mountPath": "/configs",
              "name": "auth0-client-config"
            }
          ],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "SESSION_SCOPE",
              "value": "{{SESSION_SCOPE}}",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_FILE_NAME",
              "value": "config",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_CONFIG_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "REDIS_MODE",
              "value": "normal",
              "valueType": "plain"
            },
            {
              "name": "ORIGINAL_PROTOCOL_HEADER",
              "value": "{{ORIGINAL_PROTOCOL_HEADER}}",
              "valueType": "plain"
            },
            {
              "name": "REDIS_HOSTS",
              "secretKey": "redis-hosts",
              "secretName": "redis",
              "valueType": "secret"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "100m",
              "min": "60m"
            },
            "memoryLimits": {
              "max": "100Mi",
              "min": "60Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/redis",
              "name": "redis"
            }
          ],
          "description": "Integrate with your Auth0 tenant using Mia-Platform core service Auth0 Client.",
          "dockerImage": "nexus.mia-platform.eu/core/auth0-client:{{AUTH0_CLIENT_VERSION}}",
          "name": "auth0-client",
          "type": "plugin"
        },
        "authorization-service": {
          "componentId": "authorization-service",
          "defaultConfigMaps": [
            {
              "files": [],
              "mountPath": "/configs",
              "name": "authorization-service-config",
              "viewAsReadOnly": true
            }
          ],
          "defaultDocumentationPath": "",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_PATH",
              "value": "/configs",
              "valueType": "plain"
            },
            {
              "name": "CONFIGURATION_FILE_NAME",
              "value": "auth",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "SERVICE_VERSION",
              "value": "2.0.2",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_URL",
              "value": "http://user-manager-service/userinfo",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_USER_ID_KEY",
              "value": "sub",
              "valueType": "plain"
            },
            {
              "name": "HEADERS_TO_PROXY",
              "value": "x-request-id,request-id,cookie,authorization,client-type,host,x-forwarded-host",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_STRICT_MODE_ENABLED",
              "value": "true",
              "valueType": "plain"
            },
            {
              "name": "CLIENT_TYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "CUSTOM_PERMISSIONS_KEY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_TO_PROXY",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "AUTHORIZATION_HEADERS_TO_PROXY",
              "value": "cookie,authorization,client-type",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "description": "",
          "dockerImage": "nexus.mia-platform.eu/core/authorization-service:2.4.2",
          "mapEnvVarToMountPath": {
            "authorization-service-config": {
              "envName": "CONFIGURATION_PATH",
              "type": "folder"
            }
          },
          "name": "authorization-service",
          "type": "plugin",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        },
        "crud-service": {
          "componentId": "crud-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [
            {
              "files": [],
              "link": {
                "targetSection": "collections"
              },
              "mountPath": "/home/node/app/collections",
              "name": "crud-service-collections",
              "viewAsReadOnly": true
            }
          ],
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "COLLECTION_DEFINITION_FOLDER",
              "value": "/home/node/app/collections",
              "valueType": "plain"
            },
            {
              "name": "USER_ID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "CRUD_LIMIT_CONSTRAINT_ENABLED",
              "value": "{{CRUD_LIMIT_CONSTRAINT_ENABLED}}",
              "valueType": "plain"
            },
            {
              "name": "EXPOSE_METRICS",
              "value": "false",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "mongodb-url",
              "secretName": "crud-service",
              "valueType": "secret"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "300m",
              "min": "100m"
            },
            "memoryLimits": {
              "max": "300Mi",
              "min": "70Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mlp",
              "name": "crud-service"
            }
          ],
          "description": "Use Mia-Platform core Crud Service to manage different instances of the service.",
          "dockerImage": "nexus.mia-platform.eu/core/crud-service:{{CRUD_SERVICE_VERSION}}",
          "mapEnvVarToMountPath": {
            "collections": {
              "envName": "COLLECTION_DEFINITION_FOLDER",
              "type": "folder"
            }
          },
          "name": "crud-service",
          "type": "plugin"
        },
        "oauth-login-site": {
          "componentId": "oauth-login-site",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 8080
            }
          ],
          "defaultConfigMaps": [],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultSecrets": [],
          "description": "Login Page for authentication.",
          "dockerImage": "nexus.mia-platform.eu/backoffice/login-site:7.2.1",
          "name": "oauth-login-site",
          "type": "plugin"
        },
        "user-manager-service": {
          "componentId": "user-manager-service",
          "containerPorts": [
            {
              "from": 80,
              "name": "http",
              "protocol": "TCP",
              "to": 3000
            }
          ],
          "defaultConfigMaps": [],
          "defaultDocumentationPath": "/documentation/json",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "AUTH_SERVICE",
              "value": "auth0-client",
              "valueType": "plain"
            },
            {
              "name": "UMS_CONFIG_CRUD_ENDPOINT",
              "value": "/uam-user-manager-configs",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_ENDPOINT",
              "value": "/uam-users",
              "valueType": "plain"
            },
            {
              "name": "AUTH_CONNECTION",
              "secretKey": "auth-connection",
              "secretName": "user-manager-service",
              "valueType": "secret"
            },
            {
              "name": "RANDOM_PWD_LENGTH",
              "value": "10",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "acl_rows,x-request-id,request-id,cookie,authorization,client-type,host,x-forwarded-host",
              "valueType": "plain"
            },
            {
              "name": "USERINFO_ADDITIONAL_PROPERTIES",
              "value": "permissions",
              "valueType": "plain"
            },
            {
              "name": "MONGODB_URL",
              "secretKey": "mongodb-url",
              "secretName": "user-manager-service",
              "valueType": "secret"
            },
            {
              "name": "JOBS_COLLECTION_NAME",
              "value": "uam_ums_users_jobs",
              "valueType": "plain"
            }
          ],
          "defaultProbes": {
            "liveness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 15,
              "path": "/-/healthz",
              "periodSeconds": 20,
              "timeoutSeconds": 1
            },
            "readiness": {
              "failureThreshold": 3,
              "initialDelaySeconds": 5,
              "path": "/-/ready",
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            }
          },
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "70Mi",
              "min": "50Mi"
            }
          },
          "defaultSecrets": [
            {
              "mountPath": "/home/node/app/secrets/mlp",
              "name": "user-manager-service"
            }
          ],
          "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/user-manager-service:{{USER_MANAGER_SERVICE_VERSION}}",
          "name": "user-manager-service",
          "type": "plugin"
        }
      },
      "unsecretedVariables": {
        "AUTH0_CLIENT_VERSION": {
          "noProductionEnv": "3.6.0",
          "productionEnv": "3.6.0"
        },
        "BOOKING_MODULE_NAMESPACE": {
          "noProductionEnv": "booking-module-development",
          "productionEnv": "booking-module-preproduction"
        },
        "CRUD_SERVICE_VERSION": {
          "noProductionEnv": "7.1.0",
          "productionEnv": "7.1.0"
        },
        "EHR_MODULE_NAMESPACE": {
          "noProductionEnv": "ehr-module-development",
          "productionEnv": "ehr-module-preproduction"
        },
        "NOTIFICATION_MODULE_NAMESPACE": {
          "noProductionEnv": "notification-module-development",
          "productionEnv": "notification-module-preproduction"
        },
        "ORIGINAL_PROTOCOL_HEADER": {
          "noProductionEnv": "x-forwarded-proto",
          "productionEnv": "x-forwarded-proto"
        },
        "PATIENT_MONITORING_PORTAL_NAMESPACE": {
          "noProductionEnv": "patient-monitoring-portal-development",
          "productionEnv": "patient-monitoring-portal-preproduction"
        },
        "REDIS_MODE": {
          "noProductionEnv": "normal",
          "productionEnv": "normal"
        },
        "SESSION_SCOPE": {
          "noProductionEnv": "mia-care-platform-development",
          "productionEnv": "mia-care-platform-preproduction"
        },
        "THERAPY_DEVICE_MODULE_NAMESPACE": {
          "noProductionEnv": "therapy-device-module-development",
          "productionEnv": "therapy-device-module-preproduction"
        },
        "USER_MANAGER_SERVICE_VERSION": {
          "noProductionEnv": "1.5.2",
          "productionEnv": "1.5.2"
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "application",
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-01-16T17:17:52.671Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "user-manager-module-new.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/user-manager-service/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "user-manager-service",
    "name": "User Manager Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/user-manager-service",
    "resources": {
      "services": {
        "user-manager-service": {
          "type": "plugin",
          "name": "user-manager-service",
          "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/user-manager-service:1.5.2",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "AUTH_SERVICE",
              "value": "auth0-client",
              "valueType": "plain"
            },
            {
              "name": "UMS_CONFIG_CRUD_ENDPOINT",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_ENDPOINT",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "AUTH_CONNECTION",
              "value": "Username-Password-Authentication",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "70Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.2",
      "releaseNote": "Upgrade custom-plugin-lib (v6) and fix bug in user bulk activation"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-03-20T16:42:16.535Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "user-manager-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/user-manager-service/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "user-manager-service",
    "name": "User Manager Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/user-manager-service",
    "resources": {
      "services": {
        "user-manager-service": {
          "type": "plugin",
          "name": "user-manager-service",
          "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/user-manager-service:1.5.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "AUTH_SERVICE",
              "value": "auth0-client",
              "valueType": "plain"
            },
            {
              "name": "UMS_CONFIG_CRUD_ENDPOINT",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_ENDPOINT",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "AUTH_CONNECTION",
              "value": "Username-Password-Authentication",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "70Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "version": {
      "name": "1.5.1",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.039Z",
    "lifecycleStatus": "published",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "user-manager-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "utility",
    "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
    "documentation": {
      "type": "externalLink",
      "url": "https://docs.mia-platform.eu/docs/runtime_suite/user-manager-service/overview"
    },
    "publishOnMiaDocumentation": true,
    "itemId": "user-manager-service",
    "name": "User Manager Service",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-care/platform/plugins/user-manager-service",
    "resources": {
      "services": {
        "user-manager-service": {
          "type": "plugin",
          "name": "user-manager-service",
          "description": "The User Manager Service combines the Authentication Service (e.g. Auth0 Client) and the CRUD into a unique service for user management.",
          "dockerImage": "nexus.mia-platform.eu/mia-care/plugins/user-manager-service:1.5.1",
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "TRUSTED_PROXIES",
              "value": "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            },
            {
              "name": "AUTH_SERVICE",
              "value": "auth0-client",
              "valueType": "plain"
            },
            {
              "name": "UMS_CONFIG_CRUD_ENDPOINT",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "USERS_CRUD_ENDPOINT",
              "value": "CHANGE VALUE",
              "valueType": "plain"
            },
            {
              "name": "AUTH_CONNECTION",
              "value": "Username-Password-Authentication",
              "valueType": "plain"
            }
          ],
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "50m"
            },
            "memoryLimits": {
              "max": "70Mi",
              "min": "50Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": "/-/healthz",
              "initialDelaySeconds": 15,
              "periodSeconds": 20,
              "timeoutSeconds": 1,
              "failureThreshold": 3
            },
            "readiness": {
              "path": "/-/ready",
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "timeoutSeconds": 1,
              "successThreshold": 1,
              "failureThreshold": 3
            }
          },
          "defaultLogParser": "mia-json",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Care",
    "tenantId": "mia-platform",
    "type": "plugin",
    "visibility": {
      "public": true
    },
    "releaseDate": "2022-05-04T08:19:20.540Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "user-manager-service.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-care.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "rust",
    "description": "A simple Hello World example application using Mia-Platform Swift template based on Vapor.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Vapor-Hello-World-Example/master/README.md"
    },
    "itemId": "vapor-hello-world-example",
    "name": "Vapor Hello World Example",
    "resources": {
      "services": {
        "vapor-hello-world-example": {
          "type": "example",
          "name": "vapor-hello-world-example",
          "description": "A simple Hello World example application using Mia-Platform Swift template based on Vapor.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Vapor-Hello-World-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fswift-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-04-03T13:02:52.066Z",
    "lifecycleStatus": "archived",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "vapor-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "rust",
    "description": "A simple Hello World example application using Mia-Platform Swift template based on Vapor.",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Vapor-Hello-World-Example/master/README.md"
    },
    "itemId": "vapor-hello-world-example",
    "name": "Vapor Hello World Example",
    "resources": {
      "services": {
        "vapor-hello-world-example": {
          "type": "example",
          "name": "vapor-hello-world-example",
          "description": "A simple Hello World example application using Mia-Platform Swift template based on Vapor.",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Vapor-Hello-World-Example/archive/master.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fswift-app.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "LOG_LEVEL",
              "value": "{{LOG_LEVEL}}",
              "valueType": "plain"
            },
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "miauserid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "miausergroups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "client-type",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "isbackoffice",
              "valueType": "plain"
            },
            {
              "name": "USER_PROPERTIES_HEADER_KEY",
              "value": "miauserproperties",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-plain",
          "defaultDocumentationPath": "",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "example",
    "visibility": {
      "public": true
    },
    "releaseDate": "2021-07-15T16:31:36.237Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "vapor-hello-world-example.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "idm",
    "description": "This is the best template to start creating a verifiable credential service for your IDM project",
    "itemId": "verifiable-credential-generator",
    "name": "Verifiable Credential Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/template/vc-generator-template",
    "resources": {
      "services": {
        "verifiable-credential-generator": {
          "type": "template",
          "name": "verifiable-credential-generator",
          "description": "This is the best template to start creating a verifiable credential service for your IDM project",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/64569/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "userid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "groups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "clienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "console-sid,cms-sid",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-master",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_CONFIG",
              "value": "/config/vcMapping.json",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_JWK",
              "value": "{\\"kty\\":\\"RSA\\",\\"n\\":\\"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\\",\\"e\\":\\"AQAB\\",\\"d\\":\\"nXNyzeWLkKOpKrnWnX8V3ykE_uxDK4fDV3vra8enRhrqELJiYmuyGuuWW3g9qbliYdMaI5FdvBlREKw5yg5wnKMdAvt7DAigUW-YYE317TCTWx3iitfHfNYYImUMcHXTMT_q8B5hoqmTlaHzdFIlMnL7q4uW3xRMtrvscLgOVgJaRJ5kuW7k9YF_J1b4HfBdPw-5czrQaFER3Ys-84HXXK7ZHK0mck7bkHOG57oHFoTygPwV97YqgiAva01wC_jsHyRWQCbAm4b61GKycGzMNOoW5IobkncSOCIGgTmQPQUroAc1r8aeoWNzI_v55SW2xoCYkL-c9UAtHl29aOmTSQ\\",\\"p\\":\\"34G14OI-ShxJ1NGhWBismSXe4q6yi2v0xQ3gaEvOVTLwMiDDC7CkSNHvkEw9QCnhySBGOlwStZydi8eRsmjWWdI61syH55ger1sucsfW2J7h5oUlFf-DZK5_bWI0swwRaV-Fqu3nzOacXQ8hD1P36E9qmVParrcvwjHYFoNdBT8\\",\\"q\\":\\"057nKHye7qvQnuV8llUvlBpAc9ONGlqPS-ACf-IXupwS94Lf2BQzqAwDeXTpGx5jVtiw3iPP3yIoV3uZ1y4eX4ETN219H_jppjSO1t1bTQLQPrygrKCZ9RAFhFBYM1SfbKwroi4z6uatqbl6awuGLRZss1FE2ZT1z1eWZdmBY7c\\",\\"dp\\":\\"R5njLUbtU4qacG4ztOg6qtlB_PagRh_wiww1_tOCJzMpVbW_JkiRaK6wg1aZLKv-JBONy_ZhHAMvSW9GkpQZTy8VIGjnhN7rvZuFVsoEXuMPVW0EA3cWnbN1KRKT9WQBU_OA-9A5OSALqZhGLAXnXmnKqZH-dYhD6X9UTWoJ67s\\",\\"dq\\":\\"W0MQ_1XXGKjCHHRtaUutbBpyJ0FZfb8GQzuE-G-huhlq2JD5Re9YY6VirjNsAAT35FEo3XPmRp0tdqTYMIM0GA3LIsE2D97BrKrH2wO1Rx3qftPMGwZbvuK87lXT47cf1bbeTl_MhgYbaLGTiKx8nd8o26A1p_vkkhl8w8msUjs\\",\\"qi\\":\\"ix3m1zTFKMtJTgnIT3LvPw8gXV9buVjtARguoc0nY7dzyy-HLWsUwliLzgd2oxZAy-NTpM3HAeFP8w7hHZsDGMZd5rhrQqqY6L0RWjvKEqeM959lazoFMAkuV0U2KW_enpRplUuH5zK1VsfnNZxtBfv6zgWurzWMLHjnP2YpoKU\\"}",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_JWA",
              "value": "RS256",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "verifiable-credential-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\"default\\":\\"/vc/default.json\\"}"
                }
              ]
            },
            {
              "name": "verifiable-credential-schema-config",
              "mountPath": "/vc",
              "files": [
                {
                  "name": "default.json",
                  "content": "{\\"@context\\":[\\"https://www.w3.org/2018/credentials/v1\\"],\\"type\\":[\\"VerifiableCredential\\"],\\"issuer\\":\\"change-me\\"}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.011Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "verifiable-credential-generator_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "idm",
    "description": "This is the best template to start creating a verifiable credential service for your IDM project",
    "itemId": "verifiable-credential-generator",
    "name": "Verifiable Credential Generator",
    "repositoryUrl": "https://git.tools.mia-platform.eu/mia-fintech/marketplace/template/vc-generator-template",
    "resources": {
      "services": {
        "verifiable-credential-generator": {
          "type": "template",
          "name": "verifiable-credential-generator",
          "description": "This is the best template to start creating a verifiable credential service for your IDM project",
          "archiveUrl": "https://git.tools.mia-platform.eu/api/v4/projects/64569/repository/archive.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Fnode-template.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "3000",
              "valueType": "plain"
            },
            {
              "name": "USERID_HEADER_KEY",
              "value": "userid",
              "valueType": "plain"
            },
            {
              "name": "GROUPS_HEADER_KEY",
              "value": "groups",
              "valueType": "plain"
            },
            {
              "name": "CLIENTTYPE_HEADER_KEY",
              "value": "clienttype",
              "valueType": "plain"
            },
            {
              "name": "BACKOFFICE_HEADER_KEY",
              "value": "backoffice",
              "valueType": "plain"
            },
            {
              "name": "MICROSERVICE_GATEWAY_SERVICE_NAME",
              "value": "microservice-gateway",
              "valueType": "plain"
            },
            {
              "name": "ADDITIONAL_HEADERS_TO_PROXY",
              "value": "console-sid,cms-sid",
              "valueType": "plain"
            },
            {
              "name": "FLOW_MANAGER_URL",
              "value": "http://flow-manager-master",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_CONFIG",
              "value": "/config/vcMapping.json",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_JWK",
              "value": "{\\"kty\\":\\"RSA\\",\\"n\\":\\"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\\",\\"e\\":\\"AQAB\\",\\"d\\":\\"nXNyzeWLkKOpKrnWnX8V3ykE_uxDK4fDV3vra8enRhrqELJiYmuyGuuWW3g9qbliYdMaI5FdvBlREKw5yg5wnKMdAvt7DAigUW-YYE317TCTWx3iitfHfNYYImUMcHXTMT_q8B5hoqmTlaHzdFIlMnL7q4uW3xRMtrvscLgOVgJaRJ5kuW7k9YF_J1b4HfBdPw-5czrQaFER3Ys-84HXXK7ZHK0mck7bkHOG57oHFoTygPwV97YqgiAva01wC_jsHyRWQCbAm4b61GKycGzMNOoW5IobkncSOCIGgTmQPQUroAc1r8aeoWNzI_v55SW2xoCYkL-c9UAtHl29aOmTSQ\\",\\"p\\":\\"34G14OI-ShxJ1NGhWBismSXe4q6yi2v0xQ3gaEvOVTLwMiDDC7CkSNHvkEw9QCnhySBGOlwStZydi8eRsmjWWdI61syH55ger1sucsfW2J7h5oUlFf-DZK5_bWI0swwRaV-Fqu3nzOacXQ8hD1P36E9qmVParrcvwjHYFoNdBT8\\",\\"q\\":\\"057nKHye7qvQnuV8llUvlBpAc9ONGlqPS-ACf-IXupwS94Lf2BQzqAwDeXTpGx5jVtiw3iPP3yIoV3uZ1y4eX4ETN219H_jppjSO1t1bTQLQPrygrKCZ9RAFhFBYM1SfbKwroi4z6uatqbl6awuGLRZss1FE2ZT1z1eWZdmBY7c\\",\\"dp\\":\\"R5njLUbtU4qacG4ztOg6qtlB_PagRh_wiww1_tOCJzMpVbW_JkiRaK6wg1aZLKv-JBONy_ZhHAMvSW9GkpQZTy8VIGjnhN7rvZuFVsoEXuMPVW0EA3cWnbN1KRKT9WQBU_OA-9A5OSALqZhGLAXnXmnKqZH-dYhD6X9UTWoJ67s\\",\\"dq\\":\\"W0MQ_1XXGKjCHHRtaUutbBpyJ0FZfb8GQzuE-G-huhlq2JD5Re9YY6VirjNsAAT35FEo3XPmRp0tdqTYMIM0GA3LIsE2D97BrKrH2wO1Rx3qftPMGwZbvuK87lXT47cf1bbeTl_MhgYbaLGTiKx8nd8o26A1p_vkkhl8w8msUjs\\",\\"qi\\":\\"ix3m1zTFKMtJTgnIT3LvPw8gXV9buVjtARguoc0nY7dzyy-HLWsUwliLzgd2oxZAy-NTpM3HAeFP8w7hHZsDGMZd5rhrQqqY6L0RWjvKEqeM959lazoFMAkuV0U2KW_enpRplUuH5zK1VsfnNZxtBfv6zgWurzWMLHjnP2YpoKU\\"}",
              "valueType": "plain"
            },
            {
              "name": "VERIFIABLE_CREDENTIAL_JWA",
              "value": "RS256",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-json",
          "defaultDocumentationPath": "/documentation/json",
          "defaultConfigMaps": [
            {
              "name": "verifiable-credential-config",
              "mountPath": "/config",
              "files": [
                {
                  "name": "config.json",
                  "content": "{\\"default\\":\\"/vc/default.json\\"}"
                }
              ]
            },
            {
              "name": "verifiable-credential-schema-config",
              "mountPath": "/vc",
              "files": [
                {
                  "name": "default.json",
                  "content": "{\\"@context\\":[\\"https://www.w3.org/2018/credentials/v1\\"],\\"type\\":[\\"VerifiableCredential\\"],\\"issuer\\":\\"change-me\\"}"
                }
              ]
            }
          ],
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 3000,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-FinTech",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2023-03-20T14:03:58.062Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "verifiable-credential-generator_logo_20250410.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "MIA-FinTech.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with React 18 using TypeScript and Vite",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Vite-Typescript-React-App-Template/refs/heads/18.x/README.md"
    },
    "itemId": "vite-typescript-react-template",
    "name": "Vite TypeScript React 18 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Vite-Typescript-React-App-Template/tree/18.x",
    "resources": {
      "services": {
        "vite-typescript-react-18-template": {
          "type": "template",
          "name": "vite-typescript-react-18-template",
          "description": "This template allows you to start setting up a front-end project with React 18 using TypeScript and Vite",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Vite-Typescript-React-App-Template/archive/refs/heads/18.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app-vitest.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.010Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "vite-typescript-react-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "spa",
    "description": "This template allows you to start setting up a front-end project with React 18 using TypeScript and Vite",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/mia-platform-marketplace/Vite-Typescript-React-App-Template/refs/heads/18.x/README.md"
    },
    "itemId": "vite-typescript-react-template",
    "name": "Vite TypeScript React 18 Template",
    "repositoryUrl": "https://github.com/mia-platform-marketplace/Vite-Typescript-React-App-Template/tree/18.x",
    "resources": {
      "services": {
        "vite-typescript-react-18-template": {
          "type": "template",
          "name": "vite-typescript-react-18-template",
          "description": "This template allows you to start setting up a front-end project with React 18 using TypeScript and Vite",
          "archiveUrl": "https://github.com/mia-platform-marketplace/Vite-Typescript-React-App-Template/archive/refs/heads/18.x.tar.gz",
          "pipelines": {
            "gitlab-ci": {
              "path": "/projects/platform%2Fpipelines-templates/repository/files/console-pipeline%2Freact-app-vitest.gitlab-ci.yml/raw"
            }
          },
          "defaultEnvironmentVariables": [
            {
              "name": "HTTP_PORT",
              "value": "8080",
              "valueType": "plain"
            }
          ],
          "defaultLogParser": "mia-nginx",
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080,
              "protocol": "TCP"
            }
          ]
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-06-10T16:10:21.405Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "vite-typescript-react-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to scaffold a Web Components library to be used in Mia-Platform Microfrontend Composer",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/wc-library-template/refs/tags/v1.0.0/README.md"
    },
    "itemId": "web-components-library-template",
    "name": "Web Components Library Template",
    "repositoryUrl": "https://github.com/micro-lc/wc-library-template",
    "resources": {
      "services": {
        "web-components-library-template": {
          "type": "template",
          "name": "web-components-library-template",
          "archiveUrl": "https://github.com/micro-lc/wc-library-template/archive/v1.0.0.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-nginx"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "version": {
      "name": "1.0.0",
      "releaseNote": "-"
    },
    "visibility": {
      "public": true
    },
    "releaseDate": "2025-02-20T16:47:48.010Z",
    "lifecycleStatus": "published",
    "isLatest": true,
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "web-components-library-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  },
  {
    "categoryId": "microfrontend",
    "description": "Use this template to scaffold a Web Components library to be used in Mia-Platform Microfrontend Composer",
    "documentation": {
      "type": "markdown",
      "url": "https://raw.githubusercontent.com/micro-lc/wc-library-template/refs/tags/v1.0.0/README.md"
    },
    "itemId": "web-components-library-template",
    "name": "Web Components Library Template",
    "repositoryUrl": "https://github.com/micro-lc/wc-library-template",
    "resources": {
      "services": {
        "web-components-library-template": {
          "type": "template",
          "name": "web-components-library-template",
          "archiveUrl": "https://github.com/micro-lc/wc-library-template/archive/v1.0.0.tar.gz",
          "defaultResources": {
            "cpuLimits": {
              "max": "50m",
              "min": "30m"
            },
            "memoryLimits": {
              "max": "50Mi",
              "min": "30Mi"
            }
          },
          "defaultProbes": {
            "liveness": {
              "path": ""
            },
            "readiness": {
              "path": ""
            }
          },
          "containerPorts": [
            {
              "name": "http",
              "from": 80,
              "to": 8080
            }
          ],
          "defaultEnvironmentVariables": [],
          "defaultLogParser": "mia-nginx"
        }
      }
    },
    "supportedBy": "Mia-Platform",
    "tenantId": "mia-platform",
    "type": "template",
    "visibility": {
      "public": true
    },
    "releaseDate": "2024-12-05T17:09:02.864Z",
    "lifecycleStatus": "archived",
    "__STATE__": "PUBLIC",
    "creatorId": "marketplace-sync",
    "image": [
      {
        "name": "web-components-library-template.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ],
    "supportedByImage": [
      {
        "name": "mia-platform-logo-2023.png",
        "creatorId": "marketplace-sync",
        "updaterId": "marketplace-sync"
      }
    ]
  }
]
`;

exports[`Sync script > should match snapshot 3`] = `
[
  {
    "name": "MIA-FinTech.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "acl-service-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "adaptive-approval-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ai-compliance-for-data-catalog-logo.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ai-rag-chat-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ai-rag-chat_logo_20250423.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ai-rag-template_logo_20250423.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "angular-template-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ania-service-client-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "api-documentation-aggregator-nginx_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "api-documentation-aggregator_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "api-gateway_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "api-portal_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "application-service-adapter_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "application_file-bucket.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "appointment-manager.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "audit-trail_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "auth0-client.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "authentication-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "authorization-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "back-kit.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "booking-module_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "bucket-storage-support-gcp.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "bucket-storage-support-s3.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "care-kit_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "chat-service-backend_logo_2025-04-23.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "chat-service-frontend_logo_2025-04-23.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "client-credentials_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "cpp-oatpp-hello-world-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "cron-scheduler-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "crud-mssql.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "crud-oracle.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "crud-postgresql.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "crud-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "crud-sql-template_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "csv-connector-application-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "csv-connector-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "data-catalog-agent_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "data-catalog-application-new.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "data-catalog_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "data-visualization-backend.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "data-visualization.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "debezium-server-db2-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "debezium-server-for-mysql.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "debezium-server-for-oracle.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "debezium-server-for-postgresql.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "debezium-server-generic-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "debezium.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "dev-portal.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "device-manager_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "doctor-service-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "drools-application.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ehr-module_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "email-builder.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "envoy-api-gateway_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "export-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "fast-data-control-plane-operator.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "fast-data-control-plane-with-access-control-application.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "fast-data-control-plane.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "fast-data-monitoring.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "fhir-adapter.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "fhir-api-server.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "files-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "flow-manager-router.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "flow-manager-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "form-service-backend_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "form-service-frontend_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "function-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "geofences-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "go-call-crud-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "go-echo-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "go-hello-world-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "go-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "google-proxy-fhir-service-plugin.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "graphql-custom-plugin-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "helidon-hello-world-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "http-proxy-manager_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "identification-manager_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ingestion-reloader_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ingestion-storer_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "insurance-crud-data-model-application-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "integration-connector-agent_logo_20250423.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "integration-test-service-plugin.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "invoice-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ip-geolocation-service-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "java-hello-world.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "jwt-token-validator.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "kafka2firebase_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "kafka2rest-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "kafka2rest-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ktor-hello-world-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ktor-multi-module-hello-world-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ktor-multi-module-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ktor-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "login-site_logo_20250619.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "mailchimp-notification-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "messaging-service_logo_20250507.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "mia-care.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "mia-platform-logo-2023.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "micro-lc-angular-14-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "micro-lc-angular-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "micro-lc-middleware.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "micro-lc-react-template-new.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "micro-lc-vue-3-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "micro-lc.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "microfrontend-composer-on-prem-toolkit_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "microfrontend-composer-toolkit_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "microservice-gateway_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "mongezium_logo_20250708.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "mongo2kafka-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "mongodb-reader-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "node-js-call-crud-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "node-js-custom-plugin-with-mongo-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "node-js-daemon-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "node-js-flow-manager-client.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "node-js-helloworld-microservice-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "node-js-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "notification-manager-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "notification-module_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "o3-dicom-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "openai-playground-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "payment-gateway-manager_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "payment-integration-hub.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "pdf-service_logo_20250423.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "pharma-ecommerce-backend-plugin.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "projection-storer_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "push-notification-manager.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "push-notification-sender_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "python-falcon-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "python-tornado-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "r-nd.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "rag-chatbot-api.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "rate-limit-envoy_logo_20250423.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "react-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "real-time-updater_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "rest2kafka-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "rest2kafka-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "rust-hello-world-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "salesforce-streaming-api-connector.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "scoring-manager_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "scratch-template_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "secure-api-gateway.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "ses-mail-notification-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "single-view-creator-low-code-kafka.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "single-view-creator-low-code-mongodb.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "single-view-creator-low-code.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "single-view-creator.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "single-view-trigger-generator.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "slack-webhook-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "sms-service_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "smtp-mail-notification-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "springboot-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "springboot-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "sql-db-reader-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "sql-invoker-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "swagger-aggregator.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "teleconsultation-service-backend.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "teleconsultation-service-frontend.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "temporary-password-generator-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "therapy-and-monitoring-manager_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "therapy-device-module_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "timeline-viewer.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "timer-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "token-service-plugin-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "typescript-hello-world-example-transparent.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "typescript-react-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "typescript-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "user-access-sync.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "user-manager-module-new.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "user-manager-service.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "vapor-hello-world-example.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "verifiable-credential-generator_logo_20250410.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "vite-typescript-react-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  },
  {
    "name": "web-components-library-template.png",
    "creatorId": "marketplace-sync",
    "updaterId": "marketplace-sync"
  }
]
`;
